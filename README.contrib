Contributing to Sprite
======================

1. SOURCE LOCATION
------------------

Sprite is hosted at <TBD>.  Anyone may submit a pull request.  Please follow
the guidelines in this document.


2. DEVELOPMENT-SPECIFIC ENVIRONMENT VARIABLES
---------------------------------------------

The following environment variables are available in the testing suite.  These
require that each test file imports 'cytest' before loading anything from the
'curry' package.

    - SPRITE_CATCH_ERRORS

        Default: ''

        Sets a breakpoint whenever a specified error type is created.  The
        value is a comma-separated list of Python exception names.  For
        example, the value "AssertionError,RuntimeError" will cause an
        interactive prompt to start whenever either of those exceptions occurs.

    - SPRITE_CACHE_FILE

        Default: $HOME/.sprite/cache.db

        Specifies the cache database file, which stores the results of slow
        conversions that occur in compiling Curry code.  This is used primarily
        to speed up development, when the same programs are run over and over.
        If set to the empty string, caching is disabled.

    - SPRITE_CACHE_UPDATE

        Default: Not set

        Specifies which cache entries to update.  This can be needed when part
        of the toolchain changes.  For instance, if the tool converting Curry
        to ICurry is updated and gives a new output (because, say, the Prelude
        has changed), then the old cache files will be out of date.  It is fine
        to simply delete the cache file in that case, but this variable provides
        a less extreme option.

        Files matching the pattern will be forced out-of-date and therefore
        updated in the cache.  The value is a glob pattern unless written as
        /pattern/.

    - SPRITE_DEBUG

        Default: Not set.

        Enables features to debug internal errors within Sprite itself.
        The command-line tools, such as sprite-exec and sprite-make, catch
        all errors.  Use this to get a stack trace when Sprite fails.


3. TEST-SPECIFIC MAKE VARIABLES
-------------------------------

These variables control the build process.  You specify them on the make
command line.

    - SYMLINK_INTERFACES

				Defining this causes Python files and exported C++ headers to be
				installed as symbolic links back to the source area.  This way, one can
				run tests following an edit to these files without re-installing.
				Modifying other files or adding new files necessitates a call to 'make
				stage'.

