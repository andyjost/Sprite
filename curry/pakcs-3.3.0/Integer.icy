(IProg "Integer" ["Prelude"] [(IDataType ("Integer","Nat",0) [(("Integer","IHi",0),0),(("Integer","O",1),1),(("Integer","I",2),1)]),(IDataType ("Integer","AlgebraicInt",1) [(("Integer","Neg",0),1),(("Integer","Zero",1),0),(("Integer","Pos",2),1)]),(IDataType ("Integer","ISet",2) [(("Integer","ISet",0),3),(("Integer","Empty",1),0)])] [(IFunction ("Integer","_inst#Prelude.Data#Integer.Nat",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) 2 []),(IFPCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) 1 [])]))))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE0",55) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE1",54) [(IVar 2),(IVar 5)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE2",53) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE2",53) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE1",54) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 5),(IVar 6)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE0",55) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (IOr (IOr (ICCall ("Integer","IHi",0) []) (ICCall ("Integer","O",1) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])])) (ICCall ("Integer","I",2) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])])))))])))),(IFunction ("Integer","_inst#Prelude.Data#Integer.AlgebraicInt",3) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt",4) 2 []),(IFPCall ("Integer","_impl#aValue#Prelude.Data#Integer.AlgebraicInt",5) 1 [])]))))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE0",58) [(IVar 2),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE1",57) [(IVar 2)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE2",56) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE2",56) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE1",57) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE0",58) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 3),(IVar 4)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#aValue#Prelude.Data#Integer.AlgebraicInt",5) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (IOr (IOr (ICCall ("Integer","Neg",0) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])]) (ICCall ("Integer","Zero",1) [])) (ICCall ("Integer","Pos",2) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])])))))])))),(IFunction ("Integer","_inst#Prelude.Data#Integer.ISet",6) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("Integer","_impl#===#Prelude.Data#Integer.ISet",7) 2 []),(IFPCall ("Integer","_impl#aValue#Prelude.Data#Integer.ISet",8) 1 [])]))))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.ISet",7) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","ISet",0) 3 (IBlock [(IVarDecl 3),(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 1 [0])),(IVarAssign 4 (IVarAccess 1 [1])),(IVarAssign 5 (IVarAccess 1 [2]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.ISet_CASE0",60) [(IVar 2),(IVar 3),(IVar 4),(IVar 5)])))),(IConsBranch ("Integer","Empty",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.ISet_CASE1",59) [(IVar 2)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.ISet_CASE1",59) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","ISet",0) 3 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Empty",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.ISet_CASE0",60) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3),(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 4 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3]))] (ICaseCons 2 [(IConsBranch ("Integer","ISet",0) 3 (IBlock [(IVarDecl 6),(IVarDecl 7),(IVarDecl 8)] [(IVarAssign 6 (IVarAccess 2 [0])),(IVarAssign 7 (IVarAccess 2 [1])),(IVarAssign 8 (IVarAccess 2 [2]))] (IReturn (IFCall ("Prelude","&&",678) [(IFCall ("Prelude","&&",678) [(IFCall ("Prelude","_impl#===#Prelude.Data#Prelude.Bool",573) [(IVar 3),(IVar 6)]),(IFCall ("Integer","_impl#===#Prelude.Data#Integer.ISet",7) [(IVar 4),(IVar 7)])]),(IFCall ("Integer","_impl#===#Prelude.Data#Integer.ISet",7) [(IVar 5),(IVar 8)])])))),(IConsBranch ("Integer","Empty",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#aValue#Prelude.Data#Integer.ISet",8) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (IOr (ICCall ("Integer","ISet",0) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Bool",574) [(ICCall ("Prelude","()",0) [])]),(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.ISet",8) [(ICCall ("Prelude","()",0) [])]),(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.ISet",8) [(ICCall ("Prelude","()",0) [])])]) (ICCall ("Integer","Empty",1) [])))))])))),(IFunction ("Integer","_inst#Prelude.Eq#Integer.Nat",9) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) 2 []),(IFCall ("Integer","_impl#/=#Prelude.Eq#Integer.Nat",11) [])]))))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE0",63) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE1",62) [(IVar 2),(IVar 5)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE2",61) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE2",61) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE1",62) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) [(IVar 5),(IVar 6)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE0",63) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#/=#Prelude.Eq#Integer.Nat",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFCall ("Integer","_inst#Prelude.Eq#Integer.Nat",9) [])]))))),(IFunction ("Integer","_inst#Prelude.Show#Integer.Nat",12) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("Integer","_impl#show#Prelude.Show#Integer.Nat",13) []),(IFPCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",14) 2 []),(IFCall ("Integer","_impl#showList#Prelude.Show#Integer.Nat",15) [])]))))),(IFunction ("Integer","_impl#show#Prelude.Show#Integer.Nat",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFCall ("Integer","_inst#Prelude.Show#Integer.Nat",12) [])]))))),(IFunction ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",14) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",628) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar 'H')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",629) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",670) [(IFPCall ("Prelude","showString",628) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'O')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",14) [(ILit (IInt 11)),(IVar 3)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",629) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",670) [(IFPCall ("Prelude","showString",628) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",14) [(ILit (IInt 11)),(IVar 4)])])]))))])))),(IFunction ("Integer","_impl#showList#Prelude.Show#Integer.Nat",15) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFCall ("Integer","_inst#Prelude.Show#Integer.Nat",12) [])]))))),(IFunction ("Integer","_inst#Prelude.Eq#Integer.AlgebraicInt",16) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt",17) 2 []),(IFCall ("Integer","_impl#/=#Prelude.Eq#Integer.AlgebraicInt",18) [])]))))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt",17) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE0",66) [(IVar 2),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE1",65) [(IVar 2)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE2",64) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE2",64) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE1",65) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE0",66) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) [(IVar 3),(IVar 4)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#/=#Prelude.Eq#Integer.AlgebraicInt",18) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFCall ("Integer","_inst#Prelude.Eq#Integer.AlgebraicInt",16) [])]))))),(IFunction ("Integer","_inst#Prelude.Show#Integer.AlgebraicInt",19) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("Integer","_impl#show#Prelude.Show#Integer.AlgebraicInt",20) []),(IFPCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.AlgebraicInt",21) 2 []),(IFCall ("Integer","_impl#showList#Prelude.Show#Integer.AlgebraicInt",22) [])]))))),(IFunction ("Integer","_impl#show#Prelude.Show#Integer.AlgebraicInt",20) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFCall ("Integer","_inst#Prelude.Show#Integer.AlgebraicInt",19) [])]))))),(IFunction ("Integer","_impl#showsPrec#Prelude.Show#Integer.AlgebraicInt",21) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",629) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",670) [(IFPCall ("Prelude","showString",628) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",14) [(ILit (IInt 11)),(IVar 3)])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",628) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'Z')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",629) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",670) [(IFPCall ("Prelude","showString",628) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'P')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 's')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",14) [(ILit (IInt 11)),(IVar 4)])])]))))])))),(IFunction ("Integer","_impl#showList#Prelude.Show#Integer.AlgebraicInt",22) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFCall ("Integer","_inst#Prelude.Show#Integer.AlgebraicInt",19) [])]))))),(IFunction ("Integer","toNat",23) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Integer","toNat_COMPLEXCASE0",67) [(IVar 1),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",89) [(IVar 1),(ILit (IInt 0))])]))))),(IFunction ("Integer","toNat_COMPLEXCASE0",67) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 5)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","toNat_LET1",68) [(IVar 1)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] IExempt))])))),(IFunction ("Integer","toNat_LET1",68) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int",373) [(IVar 1),(ILit (IInt 2))])),(IVarAssign 3 (IFCall ("Integer","toNat._#selFP2#q",71) [(IVar 2)])),(IVarAssign 4 (IFCall ("Integer","toNat._#selFP3#r",72) [(IVar 2)]))] (IReturn (IFCall ("Integer","toNat_COMPLEXCASE2",69) [(IVar 4),(IVar 3),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 3),(ILit (IInt 0))])]))))),(IFunction ("Integer","toNat_COMPLEXCASE2",69) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 3),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 5 (IVarAccess 0 [2]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","toNat_COMPLEXCASE3",70) [(IVar 3),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 4),(ILit (IInt 0))])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","IHi",0) []))))])))),(IFunction ("Integer","toNat_COMPLEXCASE3",70) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","toNat",23) [(IVar 3)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","toNat",23) [(IVar 3)])]))))])))),(IFunction ("Integer","toNat._#selFP2#q",71) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","toNat._#selFP3#r",72) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","toAlgebraicInt",24) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Integer","toAlgebraicInt_COMPLEXCASE0",73) [(IVar 1),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 1),(ILit (IInt 0))])]))))),(IFunction ("Integer","toAlgebraicInt_COMPLEXCASE0",73) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","toAlgebraicInt_COMPLEXCASE1",74) [(IVar 1),(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(IVar 1)]),(ILit (IInt 0))])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) []))))])))),(IFunction ("Integer","toAlgebraicInt_COMPLEXCASE1",74) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","toNat",23) [(IVar 1)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","toNat",23) [(IFCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",337) [(IVar 1)])])]))))])))),(IFunction ("Integer","fromNat",25) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ILit (IInt 1))))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",336) [(ILit (IInt 2)),(IFCall ("Integer","fromNat",25) [(IVar 2)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",336) [(ILit (IInt 2)),(IFCall ("Integer","fromNat",25) [(IVar 3)])]),(ILit (IInt 1))]))))])))),(IFunction ("Integer","fromAlgebraicInt",26) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",337) [(IFCall ("Integer","fromNat",25) [(IVar 2)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ILit (IInt 0))))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","fromNat",25) [(IVar 3)]))))])))),(IFunction ("Integer","cmpNat",27) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","cmpNat_CASE0",81) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpNat_CASE1",78) [(IVar 2),(IVar 5)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 9)] [(IVarAssign 9 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpNat_CASE4",75) [(IVar 2),(IVar 9)]))))])))),(IFunction ("Integer","cmpNat_CASE4",75) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 9)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat_LET5",76) [(IVar 9),(IVar 10)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",27) [(IVar 9),(IVar 12)]))))])))),(IFunction ("Integer","cmpNat_LET5",76) 2 Private [] (IFuncBody (IBlock [(IVarDecl 9),(IVarDecl 10),(IVarDecl 11)] [(IVarAssign 9 (IVarAccess 0 [0])),(IVarAssign 10 (IVarAccess 0 [1])),(IVarAssign 11 (IFCall ("Integer","cmpNat",27) [(IVar 9),(IVar 10)]))] (IReturn (IFCall ("Integer","cmpNat_CASE6",77) [(IVar 11)]))))),(IFunction ("Integer","cmpNat_CASE6",77) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 11)] [(IVarAssign 11 (IVarAccess 0 [0]))] (ICaseCons 11 [(IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 11)))),(IConsBranch ("Prelude","EQ",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Prelude","GT",2) 0 (IBlock [] [] (IReturn (IVar 11))))])))),(IFunction ("Integer","cmpNat_CASE1",78) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",27) [(IVar 5),(IVar 6)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat_LET2",79) [(IVar 5),(IVar 7)]))))])))),(IFunction ("Integer","cmpNat_LET2",79) 2 Private [] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 7),(IVarDecl 8)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 7 (IVarAccess 0 [1])),(IVarAssign 8 (IFCall ("Integer","cmpNat",27) [(IVar 5),(IVar 7)]))] (IReturn (IFCall ("Integer","cmpNat_CASE3",80) [(IVar 8)]))))),(IFunction ("Integer","cmpNat_CASE3",80) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 0 [0]))] (ICaseCons 8 [(IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 8)))),(IConsBranch ("Prelude","EQ",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))),(IConsBranch ("Prelude","GT",2) 0 (IBlock [] [] (IReturn (IVar 8))))])))),(IFunction ("Integer","cmpNat_CASE0",81) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))))])))),(IFunction ("Integer","succ",28) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","I",2) [(IVar 2)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","succ",28) [(IVar 3)])]))))])))),(IFunction ("Integer","pred",29) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","pred_CASE0",82) [(IVar 2)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","O",1) [(IVar 5)]))))])))),(IFunction ("Integer","pred_CASE0",82) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","IHi",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","pred",29) [(IVar 2)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(ICCall ("Integer","O",1) [(IVar 4)])]))))])))),(IFunction ("Integer","+^",30) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","succ",28) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+^_CASE0",84) [(IVar 2),(IVar 3)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+^_CASE1",83) [(IVar 2),(IVar 6)]))))])))),(IFunction ("Integer","+^_CASE1",83) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","succ",28) [(IVar 6)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","+^",30) [(IVar 6),(IVar 7)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","+^",30) [(IFCall ("Integer","succ",28) [(IVar 6)]),(IVar 8)])]))))])))),(IFunction ("Integer","+^_CASE0",84) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IVar 3)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","+^",30) [(IVar 3),(IVar 4)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","+^",30) [(IVar 3),(IVar 5)])]))))])))),(IFunction ("Integer","-^",31) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","inc",40) [(ICCall ("Integer","Neg",0) [(IVar 2)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","-^_CASE0",86) [(IVar 2),(IVar 1),(IVar 3)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","-^_CASE1",85) [(IVar 2),(IVar 6)]))))])))),(IFunction ("Integer","-^_CASE1",85) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 6)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","inc",40) [(IFCall ("Integer","mult2",32) [(IFCall ("Integer","-^",31) [(IVar 6),(IVar 7)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","mult2",32) [(IFCall ("Integer","-^",31) [(IVar 6),(IVar 8)])]))))])))),(IFunction ("Integer","-^_CASE0",86) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","pred",29) [(IVar 1)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","mult2",32) [(IFCall ("Integer","-^",31) [(IVar 3),(IVar 4)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","dec",41) [(IFCall ("Integer","mult2",32) [(IFCall ("Integer","-^",31) [(IVar 3),(IVar 5)])])]))))])))),(IFunction ("Integer","mult2",32) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(ICCall ("Integer","O",1) [(IVar 3)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 2)])]))))])))),(IFunction ("Integer","*^",33) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IVar 2)))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","*^",33) [(IVar 3),(IVar 2)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+^",30) [(IVar 2),(ICCall ("Integer","O",1) [(IFCall ("Integer","*^",33) [(IVar 4),(IVar 2)])])]))))])))),(IFunction ("Integer","div2",34) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2)))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","mod2",35) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])]))))])))),(IFunction ("Integer","quotRemNat",36) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE0",87) [(IVar 2),(IVar 1),(IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) [(IVar 2),(ICCall ("Integer","IHi",0) [])])]))))),(IFunction ("Integer","quotRemNat_COMPLEXCASE0",87) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 13)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE1",88) [(IVar 1),(IVar 2),(IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",10) [(IVar 1),(ICCall ("Integer","IHi",0) [])])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(IVar 1)]),(ICCall ("Integer","Zero",1) [])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE1",88) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE2",89) [(IVar 1),(IVar 2),(IFCall ("Prelude","otherwise",681) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE2",89) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE3",90) [(IVar 1),(IVar 2),(IFCall ("Integer","cmpNat",27) [(IVar 1),(IVar 2)])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE3",90) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Pos",2) [(IVar 1)])])))),(IConsBranch ("Prelude","EQ",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])]),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Prelude","GT",2) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE4",91) [(IVar 1),(IVar 2),(IFCall ("Integer","quotRemNat",36) [(IFCall ("Integer","div2",34) [(IVar 1)]),(IVar 2)])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE4",91) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 13 [0])),(IVarAssign 4 (IVarAccess 13 [1]))] (IReturn (IFCall ("Integer","quotRemNat_CASE5",92) [(IVar 3),(IVar 4),(IVar 1),(IVar 2)]))))])))),(IFunction ("Integer","quotRemNat_CASE5",92) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 4),(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1])),(IVarAssign 1 (IVarAccess 0 [2])),(IVarAssign 2 (IVarAccess 0 [3]))] (ICaseCons 3 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IFCall ("Prelude","error",749) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])]),(IFCall ("Integer","-^",31) [(IVar 1),(IVar 2)])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 3 [0]))] (IReturn (IFCall ("Integer","quotRemNat_CASE6",93) [(IVar 4),(IVar 1),(IVar 2),(IVar 6)]))))])))),(IFunction ("Integer","quotRemNat_CASE6",93) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 1),(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 2 (IVarAccess 0 [2])),(IVarAssign 6 (IVarAccess 0 [3]))] (ICaseCons 4 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IFCall ("Prelude","error",749) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'd')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 6)])]),(IFCall ("Integer","mod2",35) [(IVar 1)])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 4 [0]))] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE7",94) [(IVar 6),(IFCall ("Integer","quotRemNat",36) [(IFCall ("Integer","quotRemNat.shift.122",96) [(IVar 1),(IVar 8)]),(IVar 2)])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE7",94) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 6),(IVarDecl 13)] [(IVarAssign 6 (IVarAccess 0 [0])),(IVarAssign 13 (IVarAccess 0 [1]))] (ICaseCons 13 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 9),(IVarDecl 10)] [(IVarAssign 9 (IVarAccess 13 [0])),(IVarAssign 10 (IVarAccess 13 [1]))] (IReturn (IFCall ("Integer","quotRemNat_CASE8",95) [(IVar 9),(IVar 6),(IVar 10)]))))])))),(IFunction ("Integer","quotRemNat_CASE8",95) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 9),(IVarDecl 6),(IVarDecl 10)] [(IVarAssign 9 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1])),(IVarAssign 10 (IVarAccess 0 [2]))] (ICaseCons 9 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IFCall ("Prelude","error",749) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 6)])]),(IVar 10)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 9 [0]))] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(IFCall ("Integer","+^",30) [(ICCall ("Integer","O",1) [(IVar 6)]),(IVar 12)])]),(IVar 10)]))))])))),(IFunction ("Integer","quotRemNat.shift.122",96) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","error",749) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar '.')),(ICCall ("Prelude",":",1) [(ILit (IChar 's')),(ICCall ("Prelude",":",1) [(ILit (IChar 'h')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'f')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar 'H')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(IVar 2)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IVar 2)]))))])))),(IFunction ("Integer","lteqInteger",37) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering",69) []),(IFCall ("Integer","cmpInteger",38) [(IVar 1),(IVar 2)])]),(ICCall ("Prelude","GT",2) [])]))))),(IFunction ("Integer","cmpInteger",38) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpInteger_CASE0",99) [(IVar 2),(IVar 8)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","cmpInteger_CASE1",98) [(IVar 2)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpInteger_CASE2",97) [(IVar 2),(IVar 5)]))))])))),(IFunction ("Integer","cmpInteger_CASE2",97) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",27) [(IVar 5),(IVar 6)]))))])))),(IFunction ("Integer","cmpInteger_CASE1",98) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))))])))),(IFunction ("Integer","cmpInteger_CASE0",99) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",27) [(IVar 10),(IVar 8)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))))])))),(IFunction ("Integer","neg",39) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IVar 2)]))))])))),(IFunction ("Integer","inc",40) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","inc_CASE0",100) [(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","succ",28) [(IVar 2)])]))))])))),(IFunction ("Integer","inc_CASE0",100) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 3 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","pred",29) [(ICCall ("Integer","O",1) [(IVar 4)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 3 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(ICCall ("Integer","O",1) [(IVar 5)])]))))])))),(IFunction ("Integer","dec",41) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","succ",28) [(IVar 5)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Neg",0) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","dec_CASE0",101) [(IVar 2)]))))])))),(IFunction ("Integer","dec_CASE0",101) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","pred",29) [(ICCall ("Integer","O",1) [(IVar 3)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 4)])]))))])))),(IFunction ("Integer","+#",42) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+#_CASE0",103) [(IVar 2),(IVar 1),(IVar 6)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 2)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+#_CASE1",102) [(IVar 2),(IVar 1),(IVar 3)]))))])))),(IFunction ("Integer","+#_CASE1",102) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","-^",31) [(IVar 3),(IVar 5)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 1)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","+^",30) [(IVar 3),(IVar 4)])]))))])))),(IFunction ("Integer","+#_CASE0",103) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 6 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","+^",30) [(IVar 6),(IVar 8)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 1)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","-^",31) [(IVar 7),(IVar 6)]))))])))),(IFunction ("Integer","-#",43) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","+#",42) [(IVar 1),(ICCall ("Integer","Pos",2) [(IVar 4)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 1)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","+#",42) [(IVar 1),(ICCall ("Integer","Neg",0) [(IVar 3)])]))))])))),(IFunction ("Integer","*#",44) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","*#_CASE0",105) [(IVar 2),(IVar 6)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","*#_CASE1",104) [(IVar 2),(IVar 3)]))))])))),(IFunction ("Integer","*#_CASE1",104) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","*^",33) [(IVar 3),(IVar 5)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","*^",33) [(IVar 3),(IVar 4)])]))))])))),(IFunction ("Integer","*#_CASE0",105) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","*^",33) [(IVar 6),(IVar 8)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","*^",33) [(IVar 6),(IVar 7)])]))))])))),(IFunction ("Integer","quotRemInteger",45) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 9)] [(IVarAssign 9 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_CASE0",108) [(IVar 1),(IVar 9)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_CASE3",106) [(IVar 1),(IVar 3)]))))])))),(IFunction ("Integer","quotRemInteger_CASE3",106) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_LET4",107) [(IVar 5),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemNat",36) [(IVar 4),(IVar 3)]))))])))),(IFunction ("Integer","quotRemInteger_LET4",107) 2 Private [] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 3),(IVarDecl 6),(IVarDecl 7),(IVarDecl 8)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 6 (IFCall ("Integer","quotRemNat",36) [(IVar 5),(IVar 3)])),(IVarAssign 7 (IFCall ("Integer","quotRemInteger._#selFP5#d",111) [(IVar 6)])),(IVarAssign 8 (IFCall ("Integer","quotRemInteger._#selFP6#m",112) [(IVar 6)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",39) [(IVar 7)]),(IFCall ("Integer","neg",39) [(IVar 8)])]))))),(IFunction ("Integer","quotRemInteger_CASE0",108) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 9)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 14)] [(IVarAssign 14 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_LET1",110) [(IVar 14),(IVar 9)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_LET2",109) [(IVar 10),(IVar 9)]))))])))),(IFunction ("Integer","quotRemInteger_LET2",109) 2 Private [] (IFuncBody (IBlock [(IVarDecl 10),(IVarDecl 9),(IVarDecl 11),(IVarDecl 12),(IVarDecl 13)] [(IVarAssign 10 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1])),(IVarAssign 11 (IFCall ("Integer","quotRemNat",36) [(IVar 10),(IVar 9)])),(IVarAssign 12 (IFCall ("Integer","quotRemInteger._#selFP8#d",113) [(IVar 11)])),(IVarAssign 13 (IFCall ("Integer","quotRemInteger._#selFP9#m",114) [(IVar 11)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",39) [(IVar 12)]),(IVar 13)]))))),(IFunction ("Integer","quotRemInteger_LET1",110) 2 Private [] (IFuncBody (IBlock [(IVarDecl 14),(IVarDecl 9),(IVarDecl 15),(IVarDecl 16),(IVarDecl 17)] [(IVarAssign 14 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1])),(IVarAssign 15 (IFCall ("Integer","quotRemNat",36) [(IVar 14),(IVar 9)])),(IVarAssign 16 (IFCall ("Integer","quotRemInteger._#selFP11#d",115) [(IVar 15)])),(IVarAssign 17 (IFCall ("Integer","quotRemInteger._#selFP12#m",116) [(IVar 15)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 16),(IFCall ("Integer","neg",39) [(IVar 17)])]))))),(IFunction ("Integer","quotRemInteger._#selFP5#d",111) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","quotRemInteger._#selFP6#m",112) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","quotRemInteger._#selFP8#d",113) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","quotRemInteger._#selFP9#m",114) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","quotRemInteger._#selFP11#d",115) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","quotRemInteger._#selFP12#m",116) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divModInteger",46) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","divModInteger_CASE0",120) [(IVar 1),(IVar 12)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","divModInteger_CASE4",117) [(IVar 1),(IVar 3)]))))])))),(IFunction ("Integer","divModInteger_CASE4",117) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","divModInteger_LET5",118) [(IVar 5),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemNat",36) [(IVar 4),(IVar 3)]))))])))),(IFunction ("Integer","divModInteger_LET5",118) 2 Private [] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 3),(IVarDecl 6),(IVarDecl 7),(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 6 (IFCall ("Integer","quotRemNat",36) [(IVar 5),(IVar 3)])),(IVarAssign 7 (IFCall ("Integer","divModInteger._#selFP14#d",124) [(IVar 6)])),(IVarAssign 8 (IFCall ("Integer","divModInteger._#selFP15#m",125) [(IVar 6)])),(IVarAssign 9 (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",39) [(IFCall ("Integer","inc",40) [(IVar 7)])]),(IFCall ("Integer","-#",43) [(ICCall ("Integer","Pos",2) [(IVar 3)]),(IVar 8)])]))] (IReturn (IFCall ("Integer","divModInteger_CASE6",119) [(IVar 7),(IVar 8),(IVar 9)]))))),(IFunction ("Integer","divModInteger_CASE6",119) 3 Private [1] (IFuncBody (IBlock [(IVarDecl 7),(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 7 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1])),(IVarAssign 9 (IVarAccess 0 [2]))] (ICaseCons 8 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IVar 9)))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",39) [(IVar 7)]),(IVar 8)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (IVar 9))))])))),(IFunction ("Integer","divModInteger_CASE0",120) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 12)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 12 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 20)] [(IVarAssign 20 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","divModInteger_LET1",123) [(IVar 20),(IVar 12)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 13)] [(IVarAssign 13 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","divModInteger_LET2",121) [(IVar 13),(IVar 12)]))))])))),(IFunction ("Integer","divModInteger_LET2",121) 2 Private [] (IFuncBody (IBlock [(IVarDecl 13),(IVarDecl 12),(IVarDecl 14),(IVarDecl 15),(IVarDecl 16),(IVarDecl 17)] [(IVarAssign 13 (IVarAccess 0 [0])),(IVarAssign 12 (IVarAccess 0 [1])),(IVarAssign 14 (IFCall ("Integer","quotRemNat",36) [(IVar 13),(IVar 12)])),(IVarAssign 15 (IFCall ("Integer","divModInteger._#selFP17#d",126) [(IVar 14)])),(IVarAssign 16 (IFCall ("Integer","divModInteger._#selFP18#m",127) [(IVar 14)])),(IVarAssign 17 (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",39) [(IFCall ("Integer","inc",40) [(IVar 15)])]),(IFCall ("Integer","-#",43) [(IVar 16),(ICCall ("Integer","Pos",2) [(IVar 12)])])]))] (IReturn (IFCall ("Integer","divModInteger_CASE3",122) [(IVar 15),(IVar 16),(IVar 17)]))))),(IFunction ("Integer","divModInteger_CASE3",122) 3 Private [1] (IFuncBody (IBlock [(IVarDecl 15),(IVarDecl 16),(IVarDecl 17)] [(IVarAssign 15 (IVarAccess 0 [0])),(IVarAssign 16 (IVarAccess 0 [1])),(IVarAssign 17 (IVarAccess 0 [2]))] (ICaseCons 16 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IVar 17)))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",39) [(IVar 15)]),(IVar 16)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (IVar 17))))])))),(IFunction ("Integer","divModInteger_LET1",123) 2 Private [] (IFuncBody (IBlock [(IVarDecl 20),(IVarDecl 12),(IVarDecl 21),(IVarDecl 22),(IVarDecl 23)] [(IVarAssign 20 (IVarAccess 0 [0])),(IVarAssign 12 (IVarAccess 0 [1])),(IVarAssign 21 (IFCall ("Integer","quotRemNat",36) [(IVar 20),(IVar 12)])),(IVarAssign 22 (IFCall ("Integer","divModInteger._#selFP20#d",128) [(IVar 21)])),(IVarAssign 23 (IFCall ("Integer","divModInteger._#selFP21#m",129) [(IVar 21)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 22),(IFCall ("Integer","neg",39) [(IVar 23)])]))))),(IFunction ("Integer","divModInteger._#selFP14#d",124) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","divModInteger._#selFP15#m",125) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divModInteger._#selFP17#d",126) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","divModInteger._#selFP18#m",127) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divModInteger._#selFP20#d",128) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","divModInteger._#selFP21#m",129) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divInteger",47) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","fst",683) [(IFCall ("Integer","divModInteger",46) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","modInteger",48) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","snd",684) [(IFCall ("Integer","divModInteger",46) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","quotInteger",49) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","fst",683) [(IFCall ("Integer","quotRemInteger",45) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","remInteger",50) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","snd",684) [(IFCall ("Integer","quotRemInteger",45) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","narrow_int",51) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","ISet",0) 3 (IBlock [(IVarDecl 3),(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 1 [0])),(IVarAssign 4 (IVarAccess 1 [1])),(IVarAssign 5 (IVarAccess 1 [2]))] (IReturn (IFCall ("Integer","narrow_int_CASE0",130) [(IVar 2),(IVar 5),(IVar 3),(IVar 4)])))),(IConsBranch ("Integer","Empty",1) 0 (IBlock [] [] IExempt))])))),(IFunction ("Integer","narrow_int_CASE0",130) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2])),(IVarAssign 4 (IVarAccess 0 [3]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","fromAlgebraicInt",26) [(ICCall ("Integer","Neg",0) [(IFCall ("Integer","narrow_nat",52) [(IVar 5),(IVar 7)])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","narrow_int_CASE1",131) [(IVar 3)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","fromAlgebraicInt",26) [(ICCall ("Integer","Pos",2) [(IFCall ("Integer","narrow_nat",52) [(IVar 4),(IVar 6)])])]))))])))),(IFunction ("Integer","narrow_int_CASE1",131) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ILit (IInt 0)))))])))),(IFunction ("Integer","narrow_nat",52) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","ISet",0) 3 (IBlock [(IVarDecl 3),(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 1 [0])),(IVarAssign 4 (IVarAccess 1 [1])),(IVarAssign 5 (IVarAccess 1 [2]))] (IReturn (IFCall ("Integer","narrow_nat_CASE0",132) [(IVar 2),(IVar 3),(IVar 5),(IVar 4)])))),(IConsBranch ("Integer","Empty",1) 0 (IBlock [] [] IExempt))])))),(IFunction ("Integer","narrow_nat_CASE0",132) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3),(IVarDecl 5),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 5 (IVarAccess 0 [2])),(IVarAssign 4 (IVarAccess 0 [3]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","narrow_nat_CASE1",133) [(IVar 3)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","narrow_nat",52) [(IVar 5),(IVar 7)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","narrow_nat",52) [(IVar 4),(IVar 6)])]))))])))),(IFunction ("Integer","narrow_nat_CASE1",133) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","IHi",0) []))))]))))])