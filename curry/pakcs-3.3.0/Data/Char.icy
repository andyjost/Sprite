(IProg "Data.Char" ["Prelude"] [] [(IFunction ("Data.Char","isAscii",0) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Char",79) []),(IVar 1)]),(ILit (IChar '\128'))]))))),(IFunction ("Data.Char","isLatin1",1) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Char",79) []),(IVar 1)]),(ILit (IChar '\255'))]))))),(IFunction ("Data.Char","isAsciiLower",2) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char",82) []),(IVar 1)]),(ILit (IChar 'a'))]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char",81) [(IVar 1),(ILit (IChar 'z'))])]))))),(IFunction ("Data.Char","isAsciiUpper",3) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char",82) []),(IVar 1)]),(ILit (IChar 'A'))]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char",81) [(IVar 1),(ILit (IChar 'Z'))])]))))),(IFunction ("Data.Char","isControl",4) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","||",679) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Char",79) []),(IVar 1)]),(ILit (IChar ' '))]),(IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char",82) []),(IVar 1)]),(ILit (IChar '\127'))]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char",81) [(IVar 1),(ILit (IChar '\159'))])])]))))),(IFunction ("Data.Char","toUpper",5) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Data.Char","toUpper_COMPLEXCASE0",9) [(IVar 1),(IFCall ("Prelude","isLower",646) [(IVar 1)])]))))),(IFunction ("Data.Char","toUpper_COMPLEXCASE0",9) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","toUpper_COMPLEXCASE1",10) [(IVar 1),(IFCall ("Prelude","otherwise",681) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","chr",655) [(IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",335) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'a'))])]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'A'))])])]))))])))),(IFunction ("Data.Char","toUpper_COMPLEXCASE1",10) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 1))))])))),(IFunction ("Data.Char","toLower",6) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Data.Char","toLower_COMPLEXCASE0",11) [(IVar 1),(IFCall ("Prelude","isUpper",645) [(IVar 1)])]))))),(IFunction ("Data.Char","toLower_COMPLEXCASE0",11) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","toLower_COMPLEXCASE1",12) [(IVar 1),(IFCall ("Prelude","otherwise",681) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","chr",655) [(IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",335) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'A'))])]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'a'))])])]))))])))),(IFunction ("Data.Char","toLower_COMPLEXCASE1",12) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 1))))])))),(IFunction ("Data.Char","digitToInt",7) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Data.Char","digitToInt_COMPLEXCASE0",13) [(IVar 1),(IFCall ("Prelude","isDigit",648) [(IVar 1)])]))))),(IFunction ("Data.Char","digitToInt_COMPLEXCASE0",13) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","digitToInt_COMPLEXCASE1",14) [(IVar 1),(IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int",90) []),(IFCall ("Prelude","ord",654) [(IVar 1)])]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'A'))])]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",89) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'F'))])])])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",335) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar '0'))])]))))])))),(IFunction ("Data.Char","digitToInt_COMPLEXCASE1",14) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","digitToInt_COMPLEXCASE2",15) [(IVar 1),(IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int",90) []),(IFCall ("Prelude","ord",654) [(IVar 1)])]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'a'))])]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",89) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'f'))])])])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",335) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'A'))])]),(ILit (IInt 10))]))))])))),(IFunction ("Data.Char","digitToInt_COMPLEXCASE2",15) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","digitToInt_COMPLEXCASE3",16) [(IFCall ("Prelude","otherwise",681) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",335) [(IFCall ("Prelude","ord",654) [(IVar 1)]),(IFCall ("Prelude","ord",654) [(ILit (IChar 'a'))])]),(ILit (IInt 10))]))))])))),(IFunction ("Data.Char","digitToInt_COMPLEXCASE3",16) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","error",749) [(ICCall ("Prelude",":",1) [(ILit (IChar 'C')),(ICCall ("Prelude",":",1) [(ILit (IChar 'h')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar '.')),(ICCall ("Prelude",":",1) [(ILit (IChar 'd')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 's')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'd')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))))])))),(IFunction ("Data.Char","intToDigit",8) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Data.Char","intToDigit_COMPLEXCASE0",17) [(IVar 1),(IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int",90) []),(IVar 1)]),(ILit (IInt 0))]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",89) [(IVar 1),(ILit (IInt 9))])])]))))),(IFunction ("Data.Char","intToDigit_COMPLEXCASE0",17) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","intToDigit_COMPLEXCASE1",18) [(IVar 1),(IFCall ("Prelude","&&",678) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","apply",750) [(IFCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int",90) []),(IVar 1)]),(ILit (IInt 10))]),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",89) [(IVar 1),(ILit (IInt 15))])])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","chr",655) [(IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","ord",654) [(ILit (IChar '0'))]),(IVar 1)])]))))])))),(IFunction ("Data.Char","intToDigit_COMPLEXCASE1",18) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Data.Char","intToDigit_COMPLEXCASE2",19) [(IFCall ("Prelude","otherwise",681) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","chr",655) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",335) [(IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","ord",654) [(ILit (IChar 'A'))]),(IVar 1)]),(ILit (IInt 10))])]))))])))),(IFunction ("Data.Char","intToDigit_COMPLEXCASE2",19) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","error",749) [(ICCall ("Prelude",":",1) [(ILit (IChar 'C')),(ICCall ("Prelude",":",1) [(ILit (IChar 'h')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar '.')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 'D')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'd')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'l')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]))))]))))])