(IProg "Integer" ["Prelude"] [(IDataType ("Integer","Nat",0) [(("Integer","IHi",0),0),(("Integer","O",1),1),(("Integer","I",2),1)]),(IDataType ("Integer","AlgebraicInt",1) [(("Integer","Neg",0),1),(("Integer","Zero",1),0),(("Integer","Pos",2),1)])] [(IFunction ("Integer","_inst#Prelude.Data#Integer.Nat",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) 2 []),(IFPCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) 1 [])]))))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE0",66) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE1",65) [(IVar 2),(IVar 5)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE2",64) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE2",64) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE1",65) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 5),(IVar 6)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.Nat_CASE0",66) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (IOr (IOr (ICCall ("Integer","IHi",0) []) (ICCall ("Integer","O",1) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])])) (ICCall ("Integer","I",2) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])])))))])))),(IFunction ("Integer","_inst#Prelude.Data#Integer.AlgebraicInt",3) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt",4) 2 []),(IFPCall ("Integer","_impl#aValue#Prelude.Data#Integer.AlgebraicInt",5) 1 [])]))))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE0",69) [(IVar 2),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE1",68) [(IVar 2)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE2",67) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE2",67) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE1",68) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#===#Prelude.Data#Integer.AlgebraicInt_CASE0",69) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#===#Prelude.Data#Integer.Nat",1) [(IVar 3),(IVar 4)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#aValue#Prelude.Data#Integer.AlgebraicInt",5) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (IOr (IOr (ICCall ("Integer","Neg",0) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])]) (ICCall ("Integer","Zero",1) [])) (ICCall ("Integer","Pos",2) [(IFCall ("Integer","_impl#aValue#Prelude.Data#Integer.Nat",2) [(ICCall ("Prelude","()",0) [])])])))))])))),(IFunction ("Integer","_inst#Prelude.Eq#Integer.Nat",6) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) 2 []),(IFCall ("Integer","_impl#/=#Prelude.Eq#Integer.Nat",8) [])]))))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE0",72) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE1",71) [(IVar 2),(IVar 5)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE2",70) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE2",70) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE1",71) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) [(IVar 5),(IVar 6)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.Nat_CASE0",72) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#/=#Prelude.Eq#Integer.Nat",8) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFCall ("Integer","_inst#Prelude.Eq#Integer.Nat",6) [])]))))),(IFunction ("Integer","_inst#Prelude.Show#Integer.Nat",9) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("Integer","_impl#show#Prelude.Show#Integer.Nat",10) []),(IFPCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",11) 2 []),(IFCall ("Integer","_impl#showList#Prelude.Show#Integer.Nat",12) [])]))))),(IFunction ("Integer","_impl#show#Prelude.Show#Integer.Nat",10) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFCall ("Integer","_inst#Prelude.Show#Integer.Nat",9) [])]))))),(IFunction ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",11) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",615) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar 'H')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",616) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",657) [(IFPCall ("Prelude","showString",615) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'O')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",11) [(ILit (IInt 11)),(IVar 3)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",616) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",657) [(IFPCall ("Prelude","showString",615) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",11) [(ILit (IInt 11)),(IVar 4)])])]))))])))),(IFunction ("Integer","_impl#showList#Prelude.Show#Integer.Nat",12) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFCall ("Integer","_inst#Prelude.Show#Integer.Nat",9) [])]))))),(IFunction ("Integer","_inst#Prelude.Eq#Integer.AlgebraicInt",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt",14) 2 []),(IFCall ("Integer","_impl#/=#Prelude.Eq#Integer.AlgebraicInt",15) [])]))))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt",14) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE0",75) [(IVar 2),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE1",74) [(IVar 2)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE2",73) [(IVar 2),(IVar 8)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE2",73) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) [(IVar 8),(IVar 10)]))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE1",74) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt_CASE0",75) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) [(IVar 3),(IVar 4)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Integer","_impl#/=#Prelude.Eq#Integer.AlgebraicInt",15) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFCall ("Integer","_inst#Prelude.Eq#Integer.AlgebraicInt",13) [])]))))),(IFunction ("Integer","_inst#Prelude.Show#Integer.AlgebraicInt",16) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("Integer","_impl#show#Prelude.Show#Integer.AlgebraicInt",17) []),(IFPCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.AlgebraicInt",18) 2 []),(IFCall ("Integer","_impl#showList#Prelude.Show#Integer.AlgebraicInt",19) [])]))))),(IFunction ("Integer","_impl#show#Prelude.Show#Integer.AlgebraicInt",17) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFCall ("Integer","_inst#Prelude.Show#Integer.AlgebraicInt",16) [])]))))),(IFunction ("Integer","_impl#showsPrec#Prelude.Show#Integer.AlgebraicInt",18) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",616) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",657) [(IFPCall ("Prelude","showString",615) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",11) [(ILit (IInt 11)),(IVar 3)])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",615) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'Z')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",616) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",657) [(IFPCall ("Prelude","showString",615) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'P')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 's')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])])])]),(IFCall ("Integer","_impl#showsPrec#Prelude.Show#Integer.Nat",11) [(ILit (IInt 11)),(IVar 4)])])]))))])))),(IFunction ("Integer","_impl#showList#Prelude.Show#Integer.AlgebraicInt",19) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFCall ("Integer","_inst#Prelude.Show#Integer.AlgebraicInt",16) [])]))))),(IFunction ("Integer","toNat",20) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Integer","toNat_COMPLEXCASE0",76) [(IVar 1),(IFCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int",89) [(IVar 1),(ILit (IInt 0))])]))))),(IFunction ("Integer","toNat_COMPLEXCASE0",76) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 5)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","toNat_LET1",77) [(IVar 1)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] IExempt))])))),(IFunction ("Integer","toNat_LET1",77) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int",373) [(IVar 1),(ILit (IInt 2))])),(IVarAssign 3 (IFCall ("Integer","toNat._#selFP2#q",80) [(IVar 2)])),(IVarAssign 4 (IFCall ("Integer","toNat._#selFP3#r",81) [(IVar 2)]))] (IReturn (IFCall ("Integer","toNat_COMPLEXCASE2",78) [(IVar 4),(IVar 3),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 3),(ILit (IInt 0))])]))))),(IFunction ("Integer","toNat_COMPLEXCASE2",78) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 3),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 5 (IVarAccess 0 [2]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","toNat_COMPLEXCASE3",79) [(IVar 3),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 4),(ILit (IInt 0))])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","IHi",0) []))))])))),(IFunction ("Integer","toNat_COMPLEXCASE3",79) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","toNat",20) [(IVar 3)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","toNat",20) [(IVar 3)])]))))])))),(IFunction ("Integer","toNat._#selFP2#q",80) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","toNat._#selFP3#r",81) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","toAlgebraicInt",21) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Integer","toAlgebraicInt_COMPLEXCASE0",82) [(IVar 1),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 1),(ILit (IInt 0))])]))))),(IFunction ("Integer","toAlgebraicInt_COMPLEXCASE0",82) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","toAlgebraicInt_COMPLEXCASE1",83) [(IVar 1),(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(IVar 1)]),(ILit (IInt 0))])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) []))))])))),(IFunction ("Integer","toAlgebraicInt_COMPLEXCASE1",83) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","toNat",20) [(IVar 1)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","toNat",20) [(IFCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",337) [(IVar 1)])])]))))])))),(IFunction ("Integer","fromNat",22) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ILit (IInt 1))))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",336) [(ILit (IInt 2)),(IFCall ("Integer","fromNat",22) [(IVar 2)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",334) [(IFCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",336) [(ILit (IInt 2)),(IFCall ("Integer","fromNat",22) [(IVar 3)])]),(ILit (IInt 1))]))))])))),(IFunction ("Integer","fromAlgebraicInt",23) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int",337) [(IFCall ("Integer","fromNat",22) [(IVar 2)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ILit (IInt 0))))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","fromNat",22) [(IVar 3)]))))])))),(IFunction ("Integer","bindint",24) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Integer","bindint_COMPLEXCASE0",84) [(IVar 1),(IVar 3),(IFCall ("Prelude","=:=",727) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])]))))),(IFunction ("Integer","bindint_COMPLEXCASE0",84) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 4 (IVarAccess 0 [2]))] (ICaseCons 4 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]))))])))),(IFunction ("Integer","narrowInt",25) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Integer","narrowInt_COMPLEXCASE0",85) [(IVar 1),(IFCall ("Prelude","=:=",727) [(IVar 1),(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","anyOf",733) []),(IVar 2)])])]))))),(IFunction ("Integer","narrowInt_COMPLEXCASE0",85) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 1))))])))),(IFunction ("Integer","narrowEqInt",26) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","_impl#==#Prelude.Eq#Integer.AlgebraicInt",14) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])]))))),(IFunction ("Integer","narrowLtEqInt",27) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","lteqInteger",50) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])]))))),(IFunction ("Integer","narrowPlusInt",28) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","+#",55) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowMinusInt",29) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","-#",56) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowMinusIntRev",30) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 2),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","-#",56) [(IFCall ("Integer","toAlgebraicInt",21) [(IVar 1)]),(IVar 3)])])]))))),(IFunction ("Integer","narrowTimesInt",31) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","*#",57) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowDivInt",32) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","divInteger",60) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowDivIntRev",33) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 2),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","divInteger",60) [(IFCall ("Integer","toAlgebraicInt",21) [(IVar 1)]),(IVar 3)])])]))))),(IFunction ("Integer","narrowModInt",34) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","modInteger",61) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowModIntRev",35) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 2),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","modInteger",61) [(IFCall ("Integer","toAlgebraicInt",21) [(IVar 1)]),(IVar 3)])])]))))),(IFunction ("Integer","narrowQuotInt",36) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","quotInteger",62) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowQuotIntRev",37) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 2),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","quotInteger",62) [(IFCall ("Integer","toAlgebraicInt",21) [(IVar 1)]),(IVar 3)])])]))))),(IFunction ("Integer","narrowRemInt",38) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 1),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","remInteger",63) [(IVar 3),(IFCall ("Integer","toAlgebraicInt",21) [(IVar 2)])])])]))))),(IFunction ("Integer","narrowRemIntRev",39) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","&>",731) [(IFCall ("Prelude","=:<=",728) [(IVar 2),(IFCall ("Integer","fromAlgebraicInt",23) [(IVar 3)])]),(IFCall ("Integer","fromAlgebraicInt",23) [(IFCall ("Integer","remInteger",63) [(IFCall ("Integer","toAlgebraicInt",21) [(IVar 1)]),(IVar 3)])])]))))),(IFunction ("Integer","cmpNat",40) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","cmpNat_CASE0",92) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpNat_CASE1",89) [(IVar 2),(IVar 5)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 9)] [(IVarAssign 9 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpNat_CASE4",86) [(IVar 2),(IVar 9)]))))])))),(IFunction ("Integer","cmpNat_CASE4",86) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 9)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat_LET5",87) [(IVar 9),(IVar 10)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",40) [(IVar 9),(IVar 12)]))))])))),(IFunction ("Integer","cmpNat_LET5",87) 2 Private [] (IFuncBody (IBlock [(IVarDecl 9),(IVarDecl 10),(IVarDecl 11)] [(IVarAssign 9 (IVarAccess 0 [0])),(IVarAssign 10 (IVarAccess 0 [1])),(IVarAssign 11 (IFCall ("Integer","cmpNat",40) [(IVar 9),(IVar 10)]))] (IReturn (IFCall ("Integer","cmpNat_CASE6",88) [(IVar 11)]))))),(IFunction ("Integer","cmpNat_CASE6",88) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 11)] [(IVarAssign 11 (IVarAccess 0 [0]))] (ICaseCons 11 [(IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 11)))),(IConsBranch ("Prelude","EQ",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Prelude","GT",2) 0 (IBlock [] [] (IReturn (IVar 11))))])))),(IFunction ("Integer","cmpNat_CASE1",89) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",40) [(IVar 5),(IVar 6)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat_LET2",90) [(IVar 5),(IVar 7)]))))])))),(IFunction ("Integer","cmpNat_LET2",90) 2 Private [] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 7),(IVarDecl 8)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 7 (IVarAccess 0 [1])),(IVarAssign 8 (IFCall ("Integer","cmpNat",40) [(IVar 5),(IVar 7)]))] (IReturn (IFCall ("Integer","cmpNat_CASE3",91) [(IVar 8)]))))),(IFunction ("Integer","cmpNat_CASE3",91) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 0 [0]))] (ICaseCons 8 [(IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (IVar 8)))),(IConsBranch ("Prelude","EQ",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))),(IConsBranch ("Prelude","GT",2) 0 (IBlock [] [] (IReturn (IVar 8))))])))),(IFunction ("Integer","cmpNat_CASE0",92) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))))])))),(IFunction ("Integer","succ",41) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","I",2) [(IVar 2)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","succ",41) [(IVar 3)])]))))])))),(IFunction ("Integer","pred",42) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","pred_CASE0",93) [(IVar 2)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","O",1) [(IVar 5)]))))])))),(IFunction ("Integer","pred_CASE0",93) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","IHi",0) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","pred",42) [(IVar 2)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(ICCall ("Integer","O",1) [(IVar 4)])]))))])))),(IFunction ("Integer","+^",43) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","succ",41) [(IVar 2)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+^_CASE0",95) [(IVar 2),(IVar 3)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+^_CASE1",94) [(IVar 2),(IVar 6)]))))])))),(IFunction ("Integer","+^_CASE1",94) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","succ",41) [(IVar 6)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","+^",43) [(IVar 6),(IVar 7)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","+^",43) [(IFCall ("Integer","succ",41) [(IVar 6)]),(IVar 8)])]))))])))),(IFunction ("Integer","+^_CASE0",95) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IVar 3)])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","+^",43) [(IVar 3),(IVar 4)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","I",2) [(IFCall ("Integer","+^",43) [(IVar 3),(IVar 5)])]))))])))),(IFunction ("Integer","-^",44) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","inc",53) [(ICCall ("Integer","Neg",0) [(IVar 2)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","-^_CASE0",97) [(IVar 2),(IVar 1),(IVar 3)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","-^_CASE1",96) [(IVar 2),(IVar 6)]))))])))),(IFunction ("Integer","-^_CASE1",96) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 6)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","inc",53) [(IFCall ("Integer","mult2",45) [(IFCall ("Integer","-^",44) [(IVar 6),(IVar 7)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","mult2",45) [(IFCall ("Integer","-^",44) [(IVar 6),(IVar 8)])]))))])))),(IFunction ("Integer","-^_CASE0",97) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","pred",42) [(IVar 1)])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","mult2",45) [(IFCall ("Integer","-^",44) [(IVar 3),(IVar 4)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","dec",54) [(IFCall ("Integer","mult2",45) [(IFCall ("Integer","-^",44) [(IVar 3),(IVar 5)])])]))))])))),(IFunction ("Integer","mult2",45) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(ICCall ("Integer","O",1) [(IVar 3)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 2)])]))))])))),(IFunction ("Integer","*^",46) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IVar 2)))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","O",1) [(IFCall ("Integer","*^",46) [(IVar 3),(IVar 2)])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+^",43) [(IVar 2),(ICCall ("Integer","O",1) [(IFCall ("Integer","*^",46) [(IVar 4),(IVar 2)])])]))))])))),(IFunction ("Integer","div2",47) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2)))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","mod2",48) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])]))))])))),(IFunction ("Integer","quotRemNat",49) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE0",98) [(IVar 2),(IVar 1),(IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) [(IVar 2),(ICCall ("Integer","IHi",0) [])])]))))),(IFunction ("Integer","quotRemNat_COMPLEXCASE0",98) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 13)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE1",99) [(IVar 1),(IVar 2),(IFCall ("Integer","_impl#==#Prelude.Eq#Integer.Nat",7) [(IVar 1),(ICCall ("Integer","IHi",0) [])])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(IVar 1)]),(ICCall ("Integer","Zero",1) [])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE1",99) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE2",100) [(IVar 1),(IVar 2),(IFCall ("Prelude","otherwise",668) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE2",100) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE3",101) [(IVar 1),(IVar 2),(IFCall ("Integer","cmpNat",40) [(IVar 1),(IVar 2)])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE3",101) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","LT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Pos",2) [(IVar 1)])])))),(IConsBranch ("Prelude","EQ",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])]),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Prelude","GT",2) 0 (IBlock [] [] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE4",102) [(IVar 1),(IVar 2),(IFCall ("Integer","quotRemNat",49) [(IFCall ("Integer","div2",47) [(IVar 1)]),(IVar 2)])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE4",102) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 13)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 13 (IVarAccess 0 [2]))] (ICaseCons 13 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 13 [0])),(IVarAssign 4 (IVarAccess 13 [1]))] (IReturn (IFCall ("Integer","quotRemNat_CASE5",103) [(IVar 3),(IVar 4),(IVar 1),(IVar 2)]))))])))),(IFunction ("Integer","quotRemNat_CASE5",103) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 4),(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1])),(IVarAssign 1 (IVarAccess 0 [2])),(IVarAssign 2 (IVarAccess 0 [3]))] (ICaseCons 3 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IFCall ("Prelude","error",736) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])]),(IFCall ("Integer","-^",44) [(IVar 1),(IVar 2)])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 3 [0]))] (IReturn (IFCall ("Integer","quotRemNat_CASE6",104) [(IVar 4),(IVar 1),(IVar 2),(IVar 6)]))))])))),(IFunction ("Integer","quotRemNat_CASE6",104) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 1),(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 2 (IVarAccess 0 [2])),(IVarAssign 6 (IVarAccess 0 [3]))] (ICaseCons 4 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IFCall ("Prelude","error",736) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'd')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 6)])]),(IFCall ("Integer","mod2",48) [(IVar 1)])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 4 [0]))] (IReturn (IFCall ("Integer","quotRemNat_COMPLEXCASE7",105) [(IVar 6),(IFCall ("Integer","quotRemNat",49) [(IFCall ("Integer","quotRemNat.shift.154",107) [(IVar 1),(IVar 8)]),(IVar 2)])]))))])))),(IFunction ("Integer","quotRemNat_COMPLEXCASE7",105) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 6),(IVarDecl 13)] [(IVarAssign 6 (IVarAccess 0 [0])),(IVarAssign 13 (IVarAccess 0 [1]))] (ICaseCons 13 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 9),(IVarDecl 10)] [(IVarAssign 9 (IVarAccess 13 [0])),(IVarAssign 10 (IVarAccess 13 [1]))] (IReturn (IFCall ("Integer","quotRemNat_CASE8",106) [(IVar 9),(IVar 6),(IVar 10)]))))])))),(IFunction ("Integer","quotRemNat_CASE8",106) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 9),(IVarDecl 6),(IVarDecl 10)] [(IVarAssign 9 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1])),(IVarAssign 10 (IVarAccess 0 [2]))] (ICaseCons 9 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IFCall ("Prelude","error",736) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 6)])]),(IVar 10)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 9 [0]))] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Pos",2) [(IFCall ("Integer","+^",43) [(ICCall ("Integer","O",1) [(IVar 6)]),(IVar 12)])]),(IVar 10)]))))])))),(IFunction ("Integer","quotRemNat.shift.154",107) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","error",736) [(ICCall ("Prelude",":",1) [(ILit (IChar 'q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar 'R')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'm')),(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar '.')),(ICCall ("Prelude",":",1) [(ILit (IChar 's')),(ICCall ("Prelude",":",1) [(ILit (IChar 'h')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'f')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude",":",1) [(ILit (IChar ':')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar 'H')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude","[]",0) [])])])])])])])])])])])])])])])])])])])])])])])))),(IConsBranch ("Integer","O",1) 1 (IBlock [] [] (IReturn (ICCall ("Integer","O",1) [(IVar 2)])))),(IConsBranch ("Integer","I",2) 1 (IBlock [] [] (IReturn (ICCall ("Integer","I",2) [(IVar 2)]))))])))),(IFunction ("Integer","lteqInteger",50) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","apply",737) [(IFCall ("Prelude","apply",737) [(IFCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering",69) []),(IFCall ("Integer","cmpInteger",51) [(IVar 1),(IVar 2)])]),(ICCall ("Prelude","GT",2) [])]))))),(IFunction ("Integer","cmpInteger",51) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpInteger_CASE0",110) [(IVar 2),(IVar 8)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IFCall ("Integer","cmpInteger_CASE1",109) [(IVar 2)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","cmpInteger_CASE2",108) [(IVar 2),(IVar 5)]))))])))),(IFunction ("Integer","cmpInteger_CASE2",108) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",40) [(IVar 5),(IVar 6)]))))])))),(IFunction ("Integer","cmpInteger_CASE1",109) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","GT",2) [])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","EQ",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))))])))),(IFunction ("Integer","cmpInteger_CASE0",110) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 8)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","cmpNat",40) [(IVar 10),(IVar 8)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","LT",0) []))))])))),(IFunction ("Integer","neg",52) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IVar 2)]))))])))),(IFunction ("Integer","inc",53) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","inc_CASE0",111) [(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","succ",41) [(IVar 2)])]))))])))),(IFunction ("Integer","inc_CASE0",111) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 3 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","pred",42) [(ICCall ("Integer","O",1) [(IVar 4)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 3 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(ICCall ("Integer","O",1) [(IVar 5)])]))))])))),(IFunction ("Integer","dec",54) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","succ",41) [(IVar 5)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Neg",0) [(ICCall ("Integer","IHi",0) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","dec_CASE0",112) [(IVar 2)]))))])))),(IFunction ("Integer","dec_CASE0",112) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Integer","IHi",0) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","O",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","pred",42) [(ICCall ("Integer","O",1) [(IVar 3)])])])))),(IConsBranch ("Integer","I",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(ICCall ("Integer","O",1) [(IVar 4)])]))))])))),(IFunction ("Integer","+#",55) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+#_CASE0",114) [(IVar 2),(IVar 1),(IVar 6)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 2)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","+#_CASE1",113) [(IVar 2),(IVar 1),(IVar 3)]))))])))),(IFunction ("Integer","+#_CASE1",113) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","-^",44) [(IVar 3),(IVar 5)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 1)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","+^",43) [(IVar 3),(IVar 4)])]))))])))),(IFunction ("Integer","+#_CASE0",114) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 6 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","+^",43) [(IVar 6),(IVar 8)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 1)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","-^",44) [(IVar 7),(IVar 6)]))))])))),(IFunction ("Integer","-#",56) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","+#",55) [(IVar 1),(ICCall ("Integer","Pos",2) [(IVar 4)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (IVar 1)))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","+#",55) [(IVar 1),(ICCall ("Integer","Neg",0) [(IVar 3)])]))))])))),(IFunction ("Integer","*#",57) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 6)] [(IVarAssign 6 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","*#_CASE0",116) [(IVar 2),(IVar 6)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","*#_CASE1",115) [(IVar 2),(IVar 3)]))))])))),(IFunction ("Integer","*#_CASE1",115) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","*^",46) [(IVar 3),(IVar 5)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","*^",46) [(IVar 3),(IVar 4)])]))))])))),(IFunction ("Integer","*#_CASE0",116) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 8)] [(IVarAssign 8 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Pos",2) [(IFCall ("Integer","*^",46) [(IVar 6),(IVar 8)])])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Integer","Zero",1) [])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 7)] [(IVarAssign 7 (IVarAccess 2 [0]))] (IReturn (ICCall ("Integer","Neg",0) [(IFCall ("Integer","*^",46) [(IVar 6),(IVar 7)])]))))])))),(IFunction ("Integer","quotRemInteger",58) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 9)] [(IVarAssign 9 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_CASE0",119) [(IVar 1),(IVar 9)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_CASE3",117) [(IVar 1),(IVar 3)]))))])))),(IFunction ("Integer","quotRemInteger_CASE3",117) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_LET4",118) [(IVar 5),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemNat",49) [(IVar 4),(IVar 3)]))))])))),(IFunction ("Integer","quotRemInteger_LET4",118) 2 Private [] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 3),(IVarDecl 6),(IVarDecl 7),(IVarDecl 8)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 6 (IFCall ("Integer","quotRemNat",49) [(IVar 5),(IVar 3)])),(IVarAssign 7 (IFCall ("Integer","quotRemInteger._#selFP5#d",122) [(IVar 6)])),(IVarAssign 8 (IFCall ("Integer","quotRemInteger._#selFP6#m",123) [(IVar 6)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",52) [(IVar 7)]),(IFCall ("Integer","neg",52) [(IVar 8)])]))))),(IFunction ("Integer","quotRemInteger_CASE0",119) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 9)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 14)] [(IVarAssign 14 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_LET1",121) [(IVar 14),(IVar 9)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemInteger_LET2",120) [(IVar 10),(IVar 9)]))))])))),(IFunction ("Integer","quotRemInteger_LET2",120) 2 Private [] (IFuncBody (IBlock [(IVarDecl 10),(IVarDecl 9),(IVarDecl 11),(IVarDecl 12),(IVarDecl 13)] [(IVarAssign 10 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1])),(IVarAssign 11 (IFCall ("Integer","quotRemNat",49) [(IVar 10),(IVar 9)])),(IVarAssign 12 (IFCall ("Integer","quotRemInteger._#selFP8#d",124) [(IVar 11)])),(IVarAssign 13 (IFCall ("Integer","quotRemInteger._#selFP9#m",125) [(IVar 11)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",52) [(IVar 12)]),(IVar 13)]))))),(IFunction ("Integer","quotRemInteger_LET1",121) 2 Private [] (IFuncBody (IBlock [(IVarDecl 14),(IVarDecl 9),(IVarDecl 15),(IVarDecl 16),(IVarDecl 17)] [(IVarAssign 14 (IVarAccess 0 [0])),(IVarAssign 9 (IVarAccess 0 [1])),(IVarAssign 15 (IFCall ("Integer","quotRemNat",49) [(IVar 14),(IVar 9)])),(IVarAssign 16 (IFCall ("Integer","quotRemInteger._#selFP11#d",126) [(IVar 15)])),(IVarAssign 17 (IFCall ("Integer","quotRemInteger._#selFP12#m",127) [(IVar 15)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 16),(IFCall ("Integer","neg",52) [(IVar 17)])]))))),(IFunction ("Integer","quotRemInteger._#selFP5#d",122) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","quotRemInteger._#selFP6#m",123) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","quotRemInteger._#selFP8#d",124) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","quotRemInteger._#selFP9#m",125) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","quotRemInteger._#selFP11#d",126) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","quotRemInteger._#selFP12#m",127) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divModInteger",59) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","divModInteger_CASE0",131) [(IVar 1),(IVar 12)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] IExempt)),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Integer","divModInteger_CASE4",128) [(IVar 1),(IVar 3)]))))])))),(IFunction ("Integer","divModInteger_CASE4",128) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","divModInteger_LET5",129) [(IVar 5),(IVar 3)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","quotRemNat",49) [(IVar 4),(IVar 3)]))))])))),(IFunction ("Integer","divModInteger_LET5",129) 2 Private [] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 3),(IVarDecl 6),(IVarDecl 7),(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 6 (IFCall ("Integer","quotRemNat",49) [(IVar 5),(IVar 3)])),(IVarAssign 7 (IFCall ("Integer","divModInteger._#selFP14#d",135) [(IVar 6)])),(IVarAssign 8 (IFCall ("Integer","divModInteger._#selFP15#m",136) [(IVar 6)])),(IVarAssign 9 (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",52) [(IFCall ("Integer","inc",53) [(IVar 7)])]),(IFCall ("Integer","-#",56) [(ICCall ("Integer","Pos",2) [(IVar 3)]),(IVar 8)])]))] (IReturn (IFCall ("Integer","divModInteger_CASE6",130) [(IVar 7),(IVar 8),(IVar 9)]))))),(IFunction ("Integer","divModInteger_CASE6",130) 3 Private [1] (IFuncBody (IBlock [(IVarDecl 7),(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 7 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1])),(IVarAssign 9 (IVarAccess 0 [2]))] (ICaseCons 8 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IVar 9)))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",52) [(IVar 7)]),(IVar 8)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (IVar 9))))])))),(IFunction ("Integer","divModInteger_CASE0",131) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 12)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 12 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [(IVarDecl 20)] [(IVarAssign 20 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","divModInteger_LET1",134) [(IVar 20),(IVar 12)])))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Integer","Zero",1) []),(ICCall ("Integer","Zero",1) [])])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [(IVarDecl 13)] [(IVarAssign 13 (IVarAccess 1 [0]))] (IReturn (IFCall ("Integer","divModInteger_LET2",132) [(IVar 13),(IVar 12)]))))])))),(IFunction ("Integer","divModInteger_LET2",132) 2 Private [] (IFuncBody (IBlock [(IVarDecl 13),(IVarDecl 12),(IVarDecl 14),(IVarDecl 15),(IVarDecl 16),(IVarDecl 17)] [(IVarAssign 13 (IVarAccess 0 [0])),(IVarAssign 12 (IVarAccess 0 [1])),(IVarAssign 14 (IFCall ("Integer","quotRemNat",49) [(IVar 13),(IVar 12)])),(IVarAssign 15 (IFCall ("Integer","divModInteger._#selFP17#d",137) [(IVar 14)])),(IVarAssign 16 (IFCall ("Integer","divModInteger._#selFP18#m",138) [(IVar 14)])),(IVarAssign 17 (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",52) [(IFCall ("Integer","inc",53) [(IVar 15)])]),(IFCall ("Integer","-#",56) [(IVar 16),(ICCall ("Integer","Pos",2) [(IVar 12)])])]))] (IReturn (IFCall ("Integer","divModInteger_CASE3",133) [(IVar 15),(IVar 16),(IVar 17)]))))),(IFunction ("Integer","divModInteger_CASE3",133) 3 Private [1] (IFuncBody (IBlock [(IVarDecl 15),(IVarDecl 16),(IVarDecl 17)] [(IVarAssign 15 (IVarAccess 0 [0])),(IVarAssign 16 (IVarAccess 0 [1])),(IVarAssign 17 (IVarAccess 0 [2]))] (ICaseCons 16 [(IConsBranch ("Integer","Neg",0) 1 (IBlock [] [] (IReturn (IVar 17)))),(IConsBranch ("Integer","Zero",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("Integer","neg",52) [(IVar 15)]),(IVar 16)])))),(IConsBranch ("Integer","Pos",2) 1 (IBlock [] [] (IReturn (IVar 17))))])))),(IFunction ("Integer","divModInteger_LET1",134) 2 Private [] (IFuncBody (IBlock [(IVarDecl 20),(IVarDecl 12),(IVarDecl 21),(IVarDecl 22),(IVarDecl 23)] [(IVarAssign 20 (IVarAccess 0 [0])),(IVarAssign 12 (IVarAccess 0 [1])),(IVarAssign 21 (IFCall ("Integer","quotRemNat",49) [(IVar 20),(IVar 12)])),(IVarAssign 22 (IFCall ("Integer","divModInteger._#selFP20#d",139) [(IVar 21)])),(IVarAssign 23 (IFCall ("Integer","divModInteger._#selFP21#m",140) [(IVar 21)]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 22),(IFCall ("Integer","neg",52) [(IVar 23)])]))))),(IFunction ("Integer","divModInteger._#selFP14#d",135) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","divModInteger._#selFP15#m",136) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divModInteger._#selFP17#d",137) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","divModInteger._#selFP18#m",138) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divModInteger._#selFP20#d",139) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Integer","divModInteger._#selFP21#m",140) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IVar 3))))])))),(IFunction ("Integer","divInteger",60) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","fst",670) [(IFCall ("Integer","divModInteger",59) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","modInteger",61) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","snd",671) [(IFCall ("Integer","divModInteger",59) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","quotInteger",62) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","fst",670) [(IFCall ("Integer","quotRemInteger",58) [(IVar 1),(IVar 2)])]))))),(IFunction ("Integer","remInteger",63) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","snd",671) [(IFCall ("Integer","quotRemInteger",58) [(IVar 1),(IVar 2)])])))))])