Prog "Data.List" ["Prelude","Data.Maybe"] [] [Func ("Data.List","elemIndex") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]))))) (Rule [] (Var 0)),Func ("Data.List","elemIndices") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [] (Var 0)),Func ("Data.List","find") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","findIndex") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("Data.List","findIndices") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("Data.List","findIndices._#lambda3") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [] (Var 0)),Func ("Data.List","nub") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","nubBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","nubBy._#lambda5") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Data.List","delete") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","deleteBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","\\\\") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","union") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","unionBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","intersect") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","intersectBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","intersectBy._#lambda6") 3 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","intersperse") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","intercalate") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","transpose") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","diagonal") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","diagonal.merge'.76") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","diagonal.diags.76") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","permutations") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","permutations.perms.90") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","permutations.perms.90.interleave'.95") 5 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]))))))) (Rule [] (Var 0)),Func ("Data.List","permutations.perms.90.interleave'.95._#selFP2#us") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Data.List","permutations.perms.90.interleave'.95._#selFP3#zs") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","permutations.perms.90.interleave.95") 4 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))))) (Rule [] (Var 0)),Func ("Data.List","permutations.perms.90.interleave.95._#selFP5#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","partition") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","partition.select.109") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))))) (Rule [] (Var 0)),Func ("Data.List","group") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","groupBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","groupBy._#selFP7#ys") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","groupBy._#selFP8#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","splitOn") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))))) (Rule [] (Var 0)),Func ("Data.List","splitOn.go.129") 4 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))))) (Rule [] (Var 0)),Func ("Data.List","splitOn.go.129._#selFP10#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","splitOn.go.129._#selFP11#zss") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","split") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","split._#selFP13#ys") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","split._#selFP14#yss") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","inits") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","tails") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Data.List","replace") 3 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","isPrefixOf") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Data.List","isSuffixOf") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Data.List","isInfixOf") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Data.List","sort") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","sortBy") 0 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","mergeSortBy") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","mergeSortBy.genRuns.177") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","mergeSortBy.mergePairs.177") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Data.List","mergeSortBy.mergeLists.177") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","merge") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","insertBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Data.List","last") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Data.List","init") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","sum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.List","product") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.List","maximum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.List","maximumBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.List","maximumBy.maxBy.234") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Data.List","minimum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.List","minimumBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.List","minimumBy.minBy.249") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Data.List","scanl") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [] (Var 0)),Func ("Data.List","scanl1") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","scanr") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [] (Var 0)),Func ("Data.List","scanr._#selFP16#qs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","scanr._#selFP17#q") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Data.List","scanr1") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.List","scanr1._#selFP19#qs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","scanr1._#selFP20#q") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Data.List","mapAccumL") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 2,TVar 0]))) (FuncType (TVar 2) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TVar 0]]))))) (Rule [] (Var 0)),Func ("Data.List","mapAccumL._#selFP25#s'") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 1))) (Rule [] (Var 0)),Func ("Data.List","mapAccumL._#selFP26#y") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Data.List","mapAccumL._#selFP23#s''") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TVar 1))) (Rule [] (Var 0)),Func ("Data.List","mapAccumL._#selFP24#ys") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","mapAccumR") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 2,TVar 0]))) (FuncType (TVar 2) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TVar 0]]))))) (Rule [] (Var 0)),Func ("Data.List","mapAccumR._#selFP31#s'") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TVar 1))) (Rule [] (Var 0)),Func ("Data.List","mapAccumR._#selFP32#ys") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","mapAccumR._#selFP29#s''") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 1))) (Rule [] (Var 0)),Func ("Data.List","mapAccumR._#selFP30#y") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Data.List","cycle") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.List","unfoldr") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])) (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0))] []