Prog "Data.Maybe" ["Prelude"] [] [Func ("Data.Maybe","isJust") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Data.Maybe","isNothing") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Data.Maybe","fromJust") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Data.Maybe","fromMaybe") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Data.Maybe","listToMaybe") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.Maybe","maybeToList") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.Maybe","catMaybes") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Data.Maybe","catMaybes._#lambda3") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Data.Maybe","mapMaybe") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [] (Var 0))] []