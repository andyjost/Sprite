Prog "Data.Maybe" ["Prelude"] [] [Func ("Data.Maybe","isJust") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Data.Maybe","isNothing") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [2]) (Comb ConsCall ("Prelude","False") [])])),Func ("Data.Maybe","fromJust") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Just") [2]) (Var 2),Branch (Pattern ("Prelude","Nothing") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("Data.Maybe","fromMaybe") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TVar 0)))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Var 1),Branch (Pattern ("Prelude","Just") [3]) (Var 3)])),Func ("Data.Maybe","listToMaybe") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude","Just") [Var 2])])),Func ("Data.Maybe","maybeToList") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","Just") [2]) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []])])),Func ("Data.Maybe","catMaybes") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Maybe","catMaybes._#lambda3") [],Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("Data.Maybe","catMaybes._#lambda3") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","Just") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("Prelude","Nothing") []) (Var 2)])),Func ("Data.Maybe","mapMaybe") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Data.Maybe","catMaybes") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]]))] []