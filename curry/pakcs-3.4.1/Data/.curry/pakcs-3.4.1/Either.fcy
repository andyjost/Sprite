Prog "Data.Either" ["Prelude"] [] [Func ("Data.Either","lefts") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 1,TVar 0]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Either","lefts._#lambda3") [],Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("Data.Either","lefts._#lambda3") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","Left") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("Prelude","Right") [4]) (Var 2)])),Func ("Data.Either","rights") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Either","rights._#lambda7") [],Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("Data.Either","rights._#lambda7") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","Right") [3]) (Comb ConsCall ("Prelude",":") [Var 3,Var 2]),Branch (Pattern ("Prelude","Left") [4]) (Var 2)])),Func ("Data.Either","isLeft") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Left") [2]) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Right") [3]) (Comb ConsCall ("Prelude","False") [])])),Func ("Data.Either","isRight") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Left") [2]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Right") [3]) (Comb ConsCall ("Prelude","True") [])])),Func ("Data.Either","fromLeft") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TVar 1))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Left") [2]) (Var 2)])),Func ("Data.Either","fromRight") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TVar 1))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Right") [2]) (Var 2)])),Func ("Data.Either","partitionEithers") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 1,TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 1) ("Prelude","either") [Comb (FuncPartCall 2) ("Data.Either","partitionEithers.left.24") [],Comb (FuncPartCall 2) ("Data.Either","partitionEithers.right.24") []],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]])),Func ("Data.Either","partitionEithers.left.24") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 3],Var 4])])),Func ("Data.Either","partitionEithers.right.24") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Var 4]])]))] []