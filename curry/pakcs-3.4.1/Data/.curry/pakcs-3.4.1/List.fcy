Prog "Data.List" ["Prelude","Data.Maybe"] [] [Func ("Data.List","elemIndex") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]))))) (Rule [1,2] (Comb FuncCall ("Data.List","findIndex") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2]])),Func ("Data.List","elemIndices") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [1,2] (Comb (FuncPartCall 1) ("Data.List","findIndices") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2]])),Func ("Data.List","find") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Data.Maybe","listToMaybe") [],Comb (FuncPartCall 1) ("Prelude","filter") [Var 1]])),Func ("Data.List","findIndex") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []])))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Data.Maybe","listToMaybe") [],Comb (FuncPartCall 1) ("Data.List","findIndices") [Var 1]])),Func ("Data.List","findIndices") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.List","findIndices._#lambda3") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","zip") [Var 2,Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") [Lit (Intc 0)]]])),Func ("Data.List","findIndices._#lambda3") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 3])])),Func ("Data.List","nub") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Comb FuncCall ("Data.List","nubBy") [Comb FuncCall ("Prelude","==") [Var 1],Var 2])),Func ("Data.List","nubBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Data.List","nubBy") [Var 1,Comb FuncCall ("Prelude","filter") [Comb (FuncPartCall 1) ("Data.List","nubBy._#lambda5") [Var 3,Var 1],Var 4]]])])),Func ("Data.List","nubBy._#lambda5") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 1],Var 3]])),Func ("Data.List","delete") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1] (Comb (FuncPartCall 2) ("Data.List","deleteBy") [Comb FuncCall ("Prelude","==") [Var 1]])),Func ("Data.List","deleteBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4]) [Branch (Pattern ("Prelude","True") []) (Var 5),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","deleteBy") [Var 1,Var 2,Var 5]])])])),Func ("Data.List","\\\\") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldl") [Comb (FuncPartCall 2) ("Prelude","flip") [Comb FuncCall ("Data.List","delete") [Var 1]],Var 2,Var 3])),Func ("Data.List","union") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1,Var 4],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Data.List","union") [Var 1,Var 5,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","union") [Var 1,Var 5,Var 3]])])])),Func ("Data.List","unionBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","foldl") [Comb (FuncPartCall 2) ("Prelude","flip") [Comb (FuncPartCall 2) ("Data.List","deleteBy") [Var 1]],Comb FuncCall ("Data.List","nubBy") [Var 1,Var 3],Var 2]])),Func ("Data.List","intersect") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Var 1,Var 4],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","intersect") [Var 1,Var 5,Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Data.List","intersect") [Var 1,Var 5,Var 3])])])),Func ("Data.List","intersectBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Data.List","intersectBy._#lambda6") [Var 3,Var 1]],Var 2])])])),Func ("Data.List","intersectBy._#lambda6") 3 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3]],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("Data.List","intersperse") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Data.List","intersperse") [Var 1,Var 4]]])])])),Func ("Data.List","intercalate") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concat") [],Comb FuncCall ("Data.List","intersperse") [Var 1,Var 2]])),Func ("Data.List","transpose") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Data.List","transpose") [Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","head") [],Var 3]],Comb FuncCall ("Data.List","transpose") [Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","tail") [],Var 3]]]])])])),Func ("Data.List","diagonal") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","concat") [],Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.List","diagonal.diags.76") [],Comb ConsCall ("Prelude","[]") []]])),Func ("Data.List","diagonal.merge'.76") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") [],Comb ConsCall ("Prelude","[]") []],Var 1]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Var 5],Comb FuncCall ("Data.List","diagonal.merge'.76") [Var 4,Var 6]])])])),Func ("Data.List","diagonal.diags.76") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Data.List","diagonal.merge'.76") [Var 4,Var 2]])])),Func ("Data.List","permutations") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Data.List","permutations.perms.90") [Var 1,Comb ConsCall ("Prelude","[]") []]])),Func ("Data.List","permutations.perms.90") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.List","permutations.perms.90.interleave.95") [Var 3,Var 4],Comb FuncCall ("Data.List","permutations.perms.90") [Var 4,Comb ConsCall ("Prelude",":") [Var 3,Var 2]],Comb FuncCall ("Data.List","permutations") [Var 2]])])),Func ("Data.List","permutations.perms.90.interleave'.95") 5 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Data.List","permutations.perms.90.interleave'.95") [Var 1,Var 2,Comb FuncCall ("Prelude",".") [Var 3,Comb (ConsPartCall 1) ("Prelude",":") [Var 6]],Var 7,Var 5]),(9,Comb FuncCall ("Data.List","permutations.perms.90.interleave'.95._#selFP2#us") [Var 8]),(10,Comb FuncCall ("Data.List","permutations.perms.90.interleave'.95._#selFP3#zs") [Var 8])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 6,Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 3,Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 6,Var 9]]],Var 10]]))])),Func ("Data.List","permutations.perms.90.interleave'.95._#selFP2#us") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Data.List","permutations.perms.90.interleave'.95._#selFP3#zs") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","permutations.perms.90.interleave.95") 4 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Data.List","permutations.perms.90.interleave'.95") [Var 1,Var 2,Comb (FuncPartCall 1) ("Prelude","id") [],Var 3,Var 4])] (Comb FuncCall ("Data.List","permutations.perms.90.interleave.95._#selFP5#zs") [Var 5]))),Func ("Data.List","permutations.perms.90.interleave.95._#selFP5#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","partition") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.List","partition.select.109") [Var 1],Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Var 2])),Func ("Data.List","partition.select.109") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 4],Var 5]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","(,)") [Var 4,Comb ConsCall ("Prelude",":") [Var 2,Var 5]])])])),Func ("Data.List","group") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1] (Comb (FuncPartCall 1) ("Data.List","groupBy") [Comb FuncCall ("Prelude","==") [Var 1]])),Func ("Data.List","groupBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Prelude","span") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4]),(6,Comb FuncCall ("Data.List","groupBy._#selFP7#ys") [Var 5]),(7,Comb FuncCall ("Data.List","groupBy._#selFP8#zs") [Var 5])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Comb FuncCall ("Data.List","groupBy") [Var 1,Var 7]]))])),Func ("Data.List","groupBy._#selFP7#ys") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Data.List","groupBy._#selFP8#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","splitOn") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Data.List","split") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Let [(8,Comb FuncCall ("Prelude","length") [Var 2])] (Comb FuncCall ("Data.List","splitOn.go.129") [Var 8,Var 2,Var 1,Var 3]))])])),Func ("Data.List","splitOn.go.129") 4 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Data.List","isPrefixOf") [Var 3,Var 2,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Data.List","splitOn.go.129") [Var 1,Var 2,Var 3,Comb FuncCall ("Prelude","drop") [Var 1,Var 4]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(7,Comb FuncCall ("Data.List","splitOn.go.129") [Var 1,Var 2,Var 3,Var 6]),(8,Comb FuncCall ("Data.List","splitOn.go.129._#selFP10#zs") [Var 7]),(9,Comb FuncCall ("Data.List","splitOn.go.129._#selFP11#zss") [Var 7])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 5,Var 8],Var 9])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Data.List","splitOn.go.129._#selFP10#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("Data.List","splitOn.go.129._#selFP11#zss") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("Data.List","split") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Data.List","split") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("Data.List","split") [Var 1,Var 4]),(6,Comb FuncCall ("Data.List","split._#selFP13#ys") [Var 5]),(7,Comb FuncCall ("Data.List","split._#selFP14#yss") [Var 5])] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7])),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Data.List","split._#selFP13#ys") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("Data.List","split._#selFP14#yss") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("Data.List","inits") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","map") [Comb (ConsPartCall 1) ("Prelude",":") [Var 2],Comb FuncCall ("Data.List","inits") [Var 3]]])])),Func ("Data.List","tails") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Data.List","tails") [Var 3]])])),Func ("Data.List","replace") 3 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 2,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Var 5]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","replace") [Var 1,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)],Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Data.List","isPrefixOf") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [6,7]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Var 6],Comb FuncCall ("Data.List","isPrefixOf") [Var 1,Var 5,Var 7]])])])),Func ("Data.List","isSuffixOf") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Comb FuncCall ("Data.List","isPrefixOf") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reverse") [],Var 3]])),Func ("Data.List","isInfixOf") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","any") [Comb (FuncPartCall 1) ("Data.List","isPrefixOf") [Var 1,Var 2]],Comb FuncCall ("Data.List","tails") [Var 3]])),Func ("Data.List","sort") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Data.List","sortBy") [],Comb FuncCall ("Prelude","<=") [Var 1]])),Func ("Data.List","sortBy") 0 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Comb (FuncPartCall 2) ("Data.List","mergeSortBy") [])),Func ("Data.List","mergeSortBy") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Comb FuncCall ("Data.List","mergeSortBy.mergeLists.177") [Var 1,Comb FuncCall ("Data.List","mergeSortBy.genRuns.177") [Var 1,Var 2]])),Func ("Data.List","mergeSortBy.genRuns.177") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Data.List","mergeSortBy.genRuns.177") [Var 1,Var 6]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Data.List","mergeSortBy.genRuns.177") [Var 1,Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Data.List","mergeSortBy.mergePairs.177") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Data.List","merge") [Var 1,Var 3,Var 5],Comb FuncCall ("Data.List","mergeSortBy.mergePairs.177") [Var 1,Var 6]])])])),Func ("Data.List","mergeSortBy.mergeLists.177") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Data.List","mergeSortBy.mergeLists.177") [Var 1,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Data.List","merge") [Var 1,Var 3,Var 5],Comb FuncCall ("Data.List","mergeSortBy.mergePairs.177") [Var 1,Var 6]]])])])),Func ("Data.List","merge") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 4,Var 5]),Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","merge") [Var 1,Var 5,Comb ConsCall ("Prelude",":") [Var 6,Var 7]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 6,Comb FuncCall ("Data.List","merge") [Var 1,Comb ConsCall ("Prelude",":") [Var 4,Var 5],Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Data.List","insertBy") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 4,Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","insertBy") [Var 1,Var 2,Var 5]])])])),Func ("Data.List","last") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Data.List","last") [Var 3])])])),Func ("Data.List","init") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("Data.List","init") [Var 3]])])])),Func ("Data.List","sum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [1,2] (Comb FuncCall ("Prelude","foldl") [Comb FuncCall ("Prelude","+") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)],Var 2])),Func ("Data.List","product") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [1,2] (Comb FuncCall ("Prelude","foldl") [Comb FuncCall ("Prelude","*") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)],Var 2])),Func ("Data.List","maximum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldl1") [Comb FuncCall ("Prelude","max") [Var 1],Var 2])])),Func ("Data.List","maximumBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldl1") [Comb (FuncPartCall 2) ("Data.List","maximumBy.maxBy.234") [Var 1],Var 2])])),Func ("Data.List","maximumBy.maxBy.234") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]) [Branch (Pattern ("Prelude","GT") []) (Var 2),Branch (Pattern ("Prelude","LT") []) (Var 3),Branch (Pattern ("Prelude","EQ") []) (Var 3)])),Func ("Data.List","minimum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldl1") [Comb FuncCall ("Prelude","min") [Var 1],Var 2])])),Func ("Data.List","minimumBy") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldl1") [Comb (FuncPartCall 2) ("Data.List","minimumBy.minBy.249") [Var 1],Var 2])])),Func ("Data.List","minimumBy.minBy.249") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 3]) [Branch (Pattern ("Prelude","GT") []) (Var 3),Branch (Pattern ("Prelude","LT") []) (Var 2),Branch (Pattern ("Prelude","EQ") []) (Var 2)])),Func ("Data.List","scanl") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [1,2,3] (Comb ConsCall ("Prelude",":") [Var 2,Case Rigid (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Data.List","scanl") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4],Var 5])]])),Func ("Data.List","scanl1") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Data.List","scanl") [Var 1,Var 3,Var 4])])),Func ("Data.List","scanr") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Data.List","scanr") [Var 1,Var 2,Var 5]),(7,Comb FuncCall ("Data.List","scanr._#selFP16#qs") [Var 6]),(8,Comb FuncCall ("Data.List","scanr._#selFP17#q") [Var 6])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 8],Var 7]))])),Func ("Data.List","scanr._#selFP16#qs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 1)])),Func ("Data.List","scanr._#selFP17#q") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("Data.List","scanr1") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [5,6]) (Let [(7,Comb FuncCall ("Data.List","scanr1") [Var 1,Var 4]),(8,Comb FuncCall ("Data.List","scanr1._#selFP19#qs") [Var 7]),(9,Comb FuncCall ("Data.List","scanr1._#selFP20#q") [Var 7])] (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 9],Var 8]))])])),Func ("Data.List","scanr1._#selFP19#qs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 1)])),Func ("Data.List","scanr1._#selFP20#q") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("Data.List","mapAccumL") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 2,TVar 0]))) (FuncType (TVar 2) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TVar 0]]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4]),(7,Comb FuncCall ("Data.List","mapAccumL._#selFP25#s'") [Var 6]),(8,Comb FuncCall ("Data.List","mapAccumL._#selFP26#y") [Var 6]),(9,Comb FuncCall ("Data.List","mapAccumL") [Var 1,Var 7,Var 5]),(10,Comb FuncCall ("Data.List","mapAccumL._#selFP23#s''") [Var 9]),(11,Comb FuncCall ("Data.List","mapAccumL._#selFP24#ys") [Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Comb ConsCall ("Prelude",":") [Var 8,Var 11]]))])),Func ("Data.List","mapAccumL._#selFP25#s'") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 1))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Data.List","mapAccumL._#selFP26#y") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","mapAccumL._#selFP23#s''") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TVar 1))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Data.List","mapAccumL._#selFP24#ys") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","mapAccumR") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 2,TVar 0]))) (FuncType (TVar 2) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TVar 0]]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Data.List","mapAccumR") [Var 1,Var 2,Var 5]),(7,Comb FuncCall ("Data.List","mapAccumR._#selFP31#s'") [Var 6]),(8,Comb FuncCall ("Data.List","mapAccumR._#selFP32#ys") [Var 6]),(9,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 7],Var 4]),(10,Comb FuncCall ("Data.List","mapAccumR._#selFP29#s''") [Var 9]),(11,Comb FuncCall ("Data.List","mapAccumR._#selFP30#y") [Var 9])] (Comb ConsCall ("Prelude","(,)") [Var 10,Comb ConsCall ("Prelude",":") [Var 11,Var 8]]))])),Func ("Data.List","mapAccumR._#selFP31#s'") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TVar 1))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Data.List","mapAccumR._#selFP32#ys") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","mapAccumR._#selFP29#s''") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 1))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Data.List","mapAccumR._#selFP30#y") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Data.List","cycle") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","++") [Var 1,Var 4])] (Var 4))])),Func ("Data.List","unfoldr") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TCons ("Prelude","Maybe") [TCons ("Prelude","(,)") [TVar 0,TVar 1]])) (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("Prelude","Just") [3]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Data.List","unfoldr") [Var 1,Var 5]])]),Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","[]") [])]))] []