(IProg "Data.Either" ["Prelude"] [] [(IFunction ("Data.Either","lefts",0) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","foldr",703) [(IFPCall ("Data.Either","lefts._#lambda3",7) 2 []),(ICCall ("Prelude","[]",0) []),(IVar 1)]))))),(IFunction ("Data.Either","lefts._#lambda3",7) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Prelude","Left",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Prelude",":",1) [(IVar 3),(IVar 2)])))),(IConsBranch ("Prelude","Right",1) 1 (IBlock [] [] (IReturn (IVar 2))))])))),(IFunction ("Data.Either","rights",1) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","foldr",703) [(IFPCall ("Data.Either","rights._#lambda7",8) 2 []),(ICCall ("Prelude","[]",0) []),(IVar 1)]))))),(IFunction ("Data.Either","rights._#lambda7",8) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Prelude","Left",0) 1 (IBlock [] [] (IReturn (IVar 2)))),(IConsBranch ("Prelude","Right",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (ICCall ("Prelude",":",1) [(IVar 3),(IVar 2)]))))])))),(IFunction ("Data.Either","isLeft",2) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","Left",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Prelude","Right",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Data.Either","isRight",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","Left",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Prelude","Right",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("Data.Either","fromLeft",4) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","Left",0) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2)))),(IConsBranch ("Prelude","Right",1) 1 (IBlock [] [] IExempt))])))),(IFunction ("Data.Either","fromRight",5) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","Left",0) 1 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","Right",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("Data.Either","partitionEithers",6) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","foldr",703) 1 [(IFPCall ("Prelude","either",733) 1 [(IFPCall ("Data.Either","partitionEithers.left.24",9) 2 []),(IFPCall ("Data.Either","partitionEithers.right.24",10) 2 [])]),(ICCall ("Prelude","(,)",0) [(ICCall ("Prelude","[]",0) []),(ICCall ("Prelude","[]",0) [])])]))))),(IFunction ("Data.Either","partitionEithers.left.24",9) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 2 [0])),(IVarAssign 4 (IVarAccess 2 [1]))] (IReturn (ICCall ("Prelude","(,)",0) [(ICCall ("Prelude",":",1) [(IVar 1),(IVar 3)]),(IVar 4)]))))])))),(IFunction ("Data.Either","partitionEithers.right.24",10) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 2 [0])),(IVarAssign 4 (IVarAccess 2 [1]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 3),(ICCall ("Prelude",":",1) [(IVar 1),(IVar 4)])]))))]))))])