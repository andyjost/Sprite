Prog "Data.Functor.Identity" ["Prelude"] [TypeNew ("Data.Functor.Identity","Identity") Public [(0,KStar)] (NewCons ("Data.Functor.Identity","Identity") Public (TVar 0))] [Func ("Data.Functor.Identity","_inst#Prelude.Functor#Data.Functor.Identity.Identity") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TCons ("Data.Functor.Identity","Identity") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Functor") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#fmap#Prelude.Functor#Data.Functor.Identity.Identity") [],Comb FuncCall ("Data.Functor.Identity","_impl#<$#Prelude.Functor#Data.Functor.Identity.Identity") []])])),Func ("Data.Functor.Identity","_impl#fmap#Prelude.Functor#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 1]) (TCons ("Data.Functor.Identity","Identity") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Data.Functor.Identity","Identity") [3]) (Comb FuncCall ("Prelude","$") [Comb (ConsPartCall 1) ("Data.Functor.Identity","Identity") [],Comb FuncCall ("Prelude","apply") [Var 1,Var 3]])])),Func ("Data.Functor.Identity","_impl#<$#Prelude.Functor#Data.Functor.Identity.Identity") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Data.Functor.Identity","Identity") [TVar 1])))) (Rule [] (Comb FuncCall ("Prelude","_def#<$#Prelude.Functor") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Functor#Data.Functor.Identity.Identity") []])),Func ("Data.Functor.Identity","_inst#Prelude.Applicative#Data.Functor.Identity.Identity") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TCons ("Data.Functor.Identity","Identity") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Applicative") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Functor#Data.Functor.Identity.Identity") [],Comb FuncCall ("Data.Functor.Identity","_impl#pure#Prelude.Applicative#Data.Functor.Identity.Identity") [],Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#<*>#Prelude.Applicative#Data.Functor.Identity.Identity") [],Comb FuncCall ("Data.Functor.Identity","_impl#*>#Prelude.Applicative#Data.Functor.Identity.Identity") [],Comb FuncCall ("Data.Functor.Identity","_impl#<*#Prelude.Applicative#Data.Functor.Identity.Identity") [],Comb FuncCall ("Data.Functor.Identity","_impl#liftA2#Prelude.Applicative#Data.Functor.Identity.Identity") []])])),Func ("Data.Functor.Identity","_impl#pure#Prelude.Applicative#Data.Functor.Identity.Identity") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Data.Functor.Identity","Identity") [TVar 0]))) (Rule [] (Comb (ConsPartCall 1) ("Data.Functor.Identity","Identity") [])),Func ("Data.Functor.Identity","_impl#<*>#Prelude.Applicative#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Data.Functor.Identity","Identity") [FuncType (TVar 1) (TVar 0)]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 1]) (TCons ("Data.Functor.Identity","Identity") [TVar 0])))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Data.Functor.Identity","Identity") [3]) (Case Flex (Var 2) [Branch (Pattern ("Data.Functor.Identity","Identity") [4]) (Comb ConsCall ("Data.Functor.Identity","Identity") [Comb FuncCall ("Prelude","apply") [Var 3,Var 4]])])])),Func ("Data.Functor.Identity","_impl#*>#Prelude.Applicative#Data.Functor.Identity.Identity") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 1]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Data.Functor.Identity","Identity") [TVar 0])))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#*>#Prelude.Applicative") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Applicative#Data.Functor.Identity.Identity") []])),Func ("Data.Functor.Identity","_impl#<*#Prelude.Applicative#Data.Functor.Identity.Identity") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 1]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Data.Functor.Identity","Identity") [TVar 1])))) (Rule [] (Comb FuncCall ("Prelude","_def#<*#Prelude.Applicative") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Applicative#Data.Functor.Identity.Identity") []])),Func ("Data.Functor.Identity","_impl#liftA2#Prelude.Applicative#Data.Functor.Identity.Identity") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 2]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 1]) (TCons ("Data.Functor.Identity","Identity") [TVar 0]))))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#liftA2#Prelude.Applicative") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Applicative#Data.Functor.Identity.Identity") []])),Func ("Data.Functor.Identity","_inst#Prelude.Monad#Data.Functor.Identity.Identity") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TCons ("Data.Functor.Identity","Identity") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Monad") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Applicative#Data.Functor.Identity.Identity") [],Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#>>=#Prelude.Monad#Data.Functor.Identity.Identity") [],Comb FuncCall ("Data.Functor.Identity","_impl#>>#Prelude.Monad#Data.Functor.Identity.Identity") [],Comb (FuncPartCall 1) ("Data.Functor.Identity","_impl#return#Prelude.Monad#Data.Functor.Identity.Identity") []])])),Func ("Data.Functor.Identity","_impl#>>=#Prelude.Monad#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Data.Functor.Identity","Identity") [TVar 1])) (TCons ("Data.Functor.Identity","Identity") [TVar 1])))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Var 2,Comb FuncCall ("Data.Functor.Identity","runIdentity") [Var 1]])),Func ("Data.Functor.Identity","_impl#>>#Prelude.Monad#Data.Functor.Identity.Identity") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 1]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Data.Functor.Identity","Identity") [TVar 0])))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>>#Prelude.Monad") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Monad#Data.Functor.Identity.Identity") []])),Func ("Data.Functor.Identity","_impl#return#Prelude.Monad#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Data.Functor.Identity","Identity") [TVar 0]))) (Rule [1] (Comb ConsCall ("Data.Functor.Identity","Identity") [Var 1])),Func ("Data.Functor.Identity","_inst#Prelude.Data#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Data.Functor.Identity","Identity") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#===#Prelude.Data#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#aValue#Prelude.Data#Data.Functor.Identity.Identity") [Var 1]])])),Func ("Data.Functor.Identity","_impl#===#Prelude.Data#Data.Functor.Identity.Identity") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Data.Functor.Identity","Identity") [4]) (Case Flex (Var 3) [Branch (Pattern ("Data.Functor.Identity","Identity") [5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","===") [Var 1],Var 4],Var 5])])])),Func ("Data.Functor.Identity","_impl#aValue#Prelude.Data#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Data.Functor.Identity","Identity") [TVar 0]))) (Rule [1] (Comb ConsCall ("Data.Functor.Identity","Identity") [Comb FuncCall ("Prelude","aValue") [Var 1]])),Func ("Data.Functor.Identity","_inst#Prelude.Eq#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Data.Functor.Identity","Identity") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#==#Prelude.Eq#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#/=#Prelude.Eq#Data.Functor.Identity.Identity") [Var 1]])])),Func ("Data.Functor.Identity","_impl#==#Prelude.Eq#Data.Functor.Identity.Identity") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Data.Functor.Identity","Identity") [4]) (Case Flex (Var 3) [Branch (Pattern ("Data.Functor.Identity","Identity") [5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Var 5])])])),Func ("Data.Functor.Identity","_impl#/=#Prelude.Eq#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Eq#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Data.Functor.Identity","Identity") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Eq#Data.Functor.Identity.Identity") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Comb FuncCall ("Data.Functor.Identity","_impl#compare#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#<#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#>#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1],Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#<=#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#>=#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#min#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#max#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])])),Func ("Data.Functor.Identity","_impl#compare#Prelude.Ord#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Ordering") []))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_impl#<#Prelude.Ord#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_impl#>#Prelude.Ord#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_impl#<=#Prelude.Ord#Data.Functor.Identity.Identity") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Data.Functor.Identity","Identity") [4]) (Case Flex (Var 3) [Branch (Pattern ("Data.Functor.Identity","Identity") [5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 4],Var 5])])])),Func ("Data.Functor.Identity","_impl#>=#Prelude.Ord#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_impl#min#Prelude.Ord#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Data.Functor.Identity","Identity") [TVar 0]))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_impl#max#Prelude.Ord#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Data.Functor.Identity","Identity") [TVar 0]))))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Ord#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_inst#Prelude.Read#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Data.Functor.Identity","Identity") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#readList#Prelude.Read#Data.Functor.Identity.Identity") [Var 1]])])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2") [Var 1]],Var 3])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 6],Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 8],Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 10],Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 12],Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 14],Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 16],Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 18],Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 20],Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 6],Lit (Charc '{')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 6],Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 8],Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 10],Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 12],Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 14],Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 16],Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 18],Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 20],Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 22],Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 24],Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 26],Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13._#lambda17") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13._#lambda17") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 6],Lit (Charc '=')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13._#lambda17._#lambda21") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 0)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13._#lambda17._#lambda21") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13._#lambda17._#lambda21._#lambda25") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 4]],Var 2])])),Func ("Data.Functor.Identity","_impl#readsPrec#Prelude.Read#Data.Functor.Identity.Identity._#lambda2._#lambda5._#lambda9._#lambda13._#lambda17._#lambda21._#lambda25") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Data.Functor.Identity","Identity") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Char") [],Var 6],Lit (Charc '}')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Data.Functor.Identity","Identity") [Var 1],Var 5],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Data.Functor.Identity","_impl#readList#Prelude.Read#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Data.Functor.Identity","Identity") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Read#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_inst#Prelude.Show#Data.Functor.Identity.Identity") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Data.Functor.Identity","Identity") [TVar 0]])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Data.Functor.Identity","_impl#show#Prelude.Show#Data.Functor.Identity.Identity") [Var 1],Comb (FuncPartCall 2) ("Data.Functor.Identity","_impl#showsPrec#Prelude.Show#Data.Functor.Identity.Identity") [Var 1],Comb FuncCall ("Data.Functor.Identity","_impl#showList#Prelude.Show#Data.Functor.Identity.Identity") [Var 1]])])),Func ("Data.Functor.Identity","_impl#show#Prelude.Show#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Show#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","_impl#showsPrec#Prelude.Show#Data.Functor.Identity.Identity") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Data.Functor.Identity","Identity") [4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 0)],Var 4],Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("Data.Functor.Identity","_impl#showList#Prelude.Show#Data.Functor.Identity.Identity") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Data.Functor.Identity","Identity") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1] (Comb FuncCall ("Prelude","_def#showList#Prelude.Show") [Comb (FuncPartCall 1) ("Data.Functor.Identity","_inst#Prelude.Show#Data.Functor.Identity.Identity") [Var 1]])),Func ("Data.Functor.Identity","runIdentity") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Data.Functor.Identity","Identity") [TVar 0]) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Data.Functor.Identity","Identity") [2]) (Var 2)]))] []