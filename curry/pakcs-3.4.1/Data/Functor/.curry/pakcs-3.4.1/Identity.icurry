interface Data.Functor.Identity where {
import Prelude;
newtype Identity a = Identity { runIdentity :: a };
instance Prelude.Applicative Identity {
  (<*>) 2;
  pure 0
};
instance Prelude.Data a => Prelude.Data (Identity a) {
  (===) 2;
  aValue 0
};
instance Prelude.Eq a => Prelude.Eq (Identity a) {
  (==) 2
};
instance Prelude.Functor Identity {
  fmap 2
};
instance Prelude.Monad Identity {
  return 1;
  (>>=) 2
};
instance Prelude.Ord a => Prelude.Ord (Identity a) {
  (<=) 2
};
instance Prelude.Read a => Prelude.Read (Identity a) {
  readsPrec 2
};
instance Prelude.Show a => Prelude.Show (Identity a) {
  showsPrec 2
};
hiding class Prelude.Functor a => (Prelude.Applicative :: * ->
                                                          *) a;
hiding class Prelude.Data a;
hiding class Prelude.Eq a;
hiding class (Prelude.Functor :: * -> *) a;
hiding class Prelude.Applicative a => (Prelude.Monad :: * -> *) a;
hiding class Prelude.Eq a => Prelude.Ord a;
hiding class Prelude.Read a;
hiding class Prelude.Show a;
instance Prelude.Applicative ((->) a) {
  liftA2 4;
  (<*>) 3;
  pure 0
} {-# MODULE Prelude #-};
instance Prelude.Applicative [] {
  liftA2 3;
  (*>) 2;
  (<*>) 2;
  pure 1
} {-# MODULE Prelude #-};
instance Prelude.Applicative (Prelude.Either a) {
  (<*>) 0;
  pure 0
} {-# MODULE Prelude #-};
instance Prelude.Applicative Prelude.IO {
  liftA2 0;
  (<*>) 0;
  (*>) 2;
  pure 0
} {-# MODULE Prelude #-};
instance Prelude.Applicative Prelude.Maybe {
  liftA2 3;
  (*>) 2;
  (<*>) 2;
  pure 0
} {-# MODULE Prelude #-};
instance Prelude.Data () {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b) => Prelude.Data (a, b) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b,
          Prelude.Data c) => Prelude.Data (a, b, c) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d) => Prelude.Data (a, b, c, d) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e) => Prelude.Data (a, b, c, d, e) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e, Prelude.Data f) => Prelude.Data (a,
                                                                           b, c, d, e, f) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e, Prelude.Data f,
          Prelude.Data g) => Prelude.Data (a, b, c, d, e, f, g) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance Prelude.Data a => Prelude.Data [a] {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Bool {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Char {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance (Prelude.Data a,
          Prelude.Data b) => Prelude.Data (Prelude.Either a b) {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Float {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.IOError {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Int {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance Prelude.Data a => Prelude.Data (Prelude.Maybe a) {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Ordering {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Eq () {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) => Prelude.Eq (a, b) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b,
          Prelude.Eq c) => Prelude.Eq (a, b, c) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
          Prelude.Eq d) => Prelude.Eq (a, b, c, d) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e) => Prelude.Eq (a, b, c, d, e) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a,
          Prelude.Eq b) => Prelude.Eq (Prelude.Either a b) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.IOError {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq (Prelude.Maybe a) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Functor ((->) a) {
  fmap 0
} {-# MODULE Prelude #-};
instance Prelude.Functor [] {
  fmap 0
} {-# MODULE Prelude #-};
instance Prelude.Functor (Prelude.Either a) {
  fmap 2
} {-# MODULE Prelude #-};
instance Prelude.Functor Prelude.IO {
  fmap 2
} {-# MODULE Prelude #-};
instance Prelude.Functor Prelude.Maybe {
  fmap 2
} {-# MODULE Prelude #-};
instance Prelude.Monad ((->) a) {
  (>>=) 2
} {-# MODULE Prelude #-};
instance Prelude.Monad [] {
  (>>) 0;
  (>>=) 2
} {-# MODULE Prelude #-};
instance Prelude.Monad (Prelude.Either a) {
  (>>=) 2;
  return 0
} {-# MODULE Prelude #-};
instance Prelude.Monad Prelude.IO {
  (>>) 0;
  (>>=) 0
} {-# MODULE Prelude #-};
instance Prelude.Monad Prelude.Maybe {
  (>>) 0;
  (>>=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord () {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b) => Prelude.Ord (a, b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b,
          Prelude.Ord c) => Prelude.Ord (a, b, c) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d) => Prelude.Ord (a, b, c, d) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d, Prelude.Ord e) => Prelude.Ord (a, b, c, d, e) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord [a] {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Bool {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Char {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a,
          Prelude.Ord b) => Prelude.Ord (Prelude.Either a b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Float {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Int {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord (Prelude.Maybe a) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Ordering {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Read () {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b) => Prelude.Read (a, b) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b,
          Prelude.Read c) => Prelude.Read (a, b, c) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b, Prelude.Read c,
          Prelude.Read d) => Prelude.Read (a, b, c, d) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b, Prelude.Read c,
          Prelude.Read d, Prelude.Read e) => Prelude.Read (a, b, c, d, e) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b, Prelude.Read c,
          Prelude.Read d, Prelude.Read e, Prelude.Read f) => Prelude.Read (a,
                                                                           b, c, d, e, f) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read a => Prelude.Read [a] {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Bool {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Char {
  readList 1;
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a,
          Prelude.Read b) => Prelude.Read (Prelude.Either a b) {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Float {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Int {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read a => Prelude.Read (Prelude.Maybe a) {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Ordering {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show () {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b) => Prelude.Show (a, b) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b,
          Prelude.Show c) => Prelude.Show (a, b, c) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
          Prelude.Show d) => Prelude.Show (a, b, c, d) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
          Prelude.Show d, Prelude.Show e) => Prelude.Show (a, b, c, d, e) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
          Prelude.Show d, Prelude.Show e, Prelude.Show f) => Prelude.Show (a,
                                                                           b, c, d, e, f) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show a => Prelude.Show [a] {
  showsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Bool {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Char {
  showList 1;
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a,
          Prelude.Show b) => Prelude.Show (Prelude.Either a b) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Float {
  showsPrec 0
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.IOError {
  show 1
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Int {
  showsPrec 0
} {-# MODULE Prelude #-};
instance Prelude.Show a => Prelude.Show (Prelude.Maybe a) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Ordering {
  showsPrec 2
} {-# MODULE Prelude #-};
hiding data Prelude.Either a b;
hiding data Prelude.IO a;
hiding data Prelude.Maybe a;
hiding data Prelude.Bool;
hiding data Prelude.Char;
hiding data Prelude.Float;
hiding data Prelude.IOError;
hiding data Prelude.Int;
hiding data Prelude.Ordering
}