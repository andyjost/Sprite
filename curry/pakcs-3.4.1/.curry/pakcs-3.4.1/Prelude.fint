Prog "Prelude" [] [Type ("Prelude","()") Public [] [Cons ("Prelude","()") 0 Public []],Type ("Prelude","(,)") Public [(0,KStar),(1,KStar)] [Cons ("Prelude","(,)") 2 Public [TVar 0,TVar 1]],Type ("Prelude","(,,)") Public [(0,KStar),(1,KStar),(2,KStar)] [Cons ("Prelude","(,,)") 3 Public [TVar 0,TVar 1,TVar 2]],Type ("Prelude","(,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] [Cons ("Prelude","(,,,)") 4 Public [TVar 0,TVar 1,TVar 2,TVar 3]],Type ("Prelude","(,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] [Cons ("Prelude","(,,,,)") 5 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],Type ("Prelude","(,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] [Cons ("Prelude","(,,,,,)") 6 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]],Type ("Prelude","(,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar)] [Cons ("Prelude","(,,,,,,)") 7 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]],Type ("Prelude","(,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar)] [Cons ("Prelude","(,,,,,,,)") 8 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]],Type ("Prelude","(,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar)] [Cons ("Prelude","(,,,,,,,,)") 9 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8]],Type ("Prelude","(,,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar),(9,KStar)] [Cons ("Prelude","(,,,,,,,,,)") 10 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9]],Type ("Prelude","(,,,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar),(9,KStar),(10,KStar)] [Cons ("Prelude","(,,,,,,,,,,)") 11 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10]],Type ("Prelude","(,,,,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar),(9,KStar),(10,KStar),(11,KStar)] [Cons ("Prelude","(,,,,,,,,,,,)") 12 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11]],Type ("Prelude","(,,,,,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar),(9,KStar),(10,KStar),(11,KStar),(12,KStar)] [Cons ("Prelude","(,,,,,,,,,,,,)") 13 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12]],Type ("Prelude","(,,,,,,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar),(9,KStar),(10,KStar),(11,KStar),(12,KStar),(13,KStar)] [Cons ("Prelude","(,,,,,,,,,,,,,)") 14 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13]],Type ("Prelude","(,,,,,,,,,,,,,,)") Public [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar),(7,KStar),(8,KStar),(9,KStar),(10,KStar),(11,KStar),(12,KStar),(13,KStar),(14,KStar)] [Cons ("Prelude","(,,,,,,,,,,,,,,)") 15 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13,TVar 14]],Type ("Prelude","(->)") Public [(0,KStar),(1,KStar)] [],Type ("Prelude","Bool") Public [] [Cons ("Prelude","False") 0 Public [],Cons ("Prelude","True") 0 Public []],Type ("Prelude","Char") Public [] [],Type ("Prelude","Either") Public [(0,KStar),(1,KStar)] [Cons ("Prelude","Left") 1 Public [TVar 0],Cons ("Prelude","Right") 1 Public [TVar 1]],Type ("Prelude","Float") Public [] [],Type ("Prelude","IO") Public [(0,KStar)] [],Type ("Prelude","IOError") Public [] [Cons ("Prelude","IOError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","UserError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","FailError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","NondetError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Prelude","Int") Public [] [],Type ("Prelude","Maybe") Public [(0,KStar)] [Cons ("Prelude","Nothing") 0 Public [],Cons ("Prelude","Just") 1 Public [TVar 0]],Type ("Prelude","Ordering") Public [] [Cons ("Prelude","LT") 0 Public [],Cons ("Prelude","EQ") 0 Public [],Cons ("Prelude","GT") 0 Public []],Type ("Prelude","[]") Public [(0,KStar)] [Cons ("Prelude","[]") 0 Public [],Cons ("Prelude",":") 2 Public [TVar 0,TCons ("Prelude","[]") [TVar 0]]],Type ("Prelude","_Dict#Alternative") Public [(0,KArrow KStar KStar)] [Cons ("Prelude","_Dict#Alternative") 5 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0]),ForallType [(1,KStar)] (TCons ("Prelude","Apply") [TVar 0,TVar 1]),ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))),ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])),ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))]],Type ("Prelude","_Dict#Applicative") Public [(0,KArrow KStar KStar)] [Cons ("Prelude","_Dict#Applicative") 6 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 0]),ForallType [(1,KStar)] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])),ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,FuncType (TVar 1) (TVar 2)]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))),ForallType [(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3))) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))]],Type ("Prelude","_Dict#Bounded") Public [(0,KStar)] [Cons ("Prelude","_Dict#Bounded") 2 Public [TVar 0,TVar 0]],Type ("Prelude","_Dict#Data") Public [(0,KStar)] [Cons ("Prelude","_Dict#Data") 2 Public [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),TVar 0]],Type ("Prelude","_Dict#Enum") Public [(0,KStar)] [Cons ("Prelude","_Dict#Enum") 8 Public [FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0),FuncType (TVar 0) (TCons ("Prelude","Int") []),FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))]],Type ("Prelude","_Dict#Eq") Public [(0,KStar)] [Cons ("Prelude","_Dict#Eq") 2 Public [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))]],Type ("Prelude","_Dict#Floating") Public [(0,KStar)] [Cons ("Prelude","_Dict#Floating") 19 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0]),TVar 0,FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0)]],Type ("Prelude","_Dict#Fractional") Public [(0,KStar)] [Cons ("Prelude","_Dict#Fractional") 4 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Float") []) (TVar 0)]],Type ("Prelude","_Dict#Functor") Public [(0,KArrow KStar KStar)] [Cons ("Prelude","_Dict#Functor") 2 Public [ForallType [(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [(1,KStar),(2,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))]],Type ("Prelude","_Dict#Integral") Public [(0,KStar)] [Cons ("Prelude","_Dict#Integral") 9 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0]),FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])),FuncType (TVar 0) (TCons ("Prelude","Int") [])]],Type ("Prelude","_Dict#Monad") Public [(0,KArrow KStar KStar)] [Cons ("Prelude","_Dict#Monad") 4 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0]),ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [(1,KStar)] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))]],Type ("Prelude","_Dict#MonadFail") Public [(0,KArrow KStar KStar)] [Cons ("Prelude","_Dict#MonadFail") 2 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0]),ForallType [(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))]],Type ("Prelude","_Dict#Monoid") Public [(0,KStar)] [Cons ("Prelude","_Dict#Monoid") 3 Public [TVar 0,FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)]],Type ("Prelude","_Dict#Num") Public [(0,KStar)] [Cons ("Prelude","_Dict#Num") 7 Public [FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0)]],Type ("Prelude","_Dict#Ord") Public [(0,KStar)] [Cons ("Prelude","_Dict#Ord") 8 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))]],Type ("Prelude","_Dict#Read") Public [(0,KStar)] [Cons ("Prelude","_Dict#Read") 2 Public [FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])]],Type ("Prelude","_Dict#Real") Public [(0,KStar)] [Cons ("Prelude","_Dict#Real") 3 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0]),FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0]),FuncType (TVar 0) (TCons ("Prelude","Float") [])]],Type ("Prelude","_Dict#RealFrac") Public [(0,KStar)] [Cons ("Prelude","_Dict#RealFrac") 7 Public [FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0]),FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0]),ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0]))),ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1))),ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1))),ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1))),ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))]],Type ("Prelude","_Dict#Show") Public [(0,KStar)] [Cons ("Prelude","_Dict#Show") 3 Public [FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))),FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))]]] [Func ("Prelude","_def#===#Prelude.Data") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#aValue#Prelude.Data") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Char") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Float") 0 Public (TCons ("Prelude","Float") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#[]") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#()") 0 Public (TCons ("Prelude","()") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#(,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#(,,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#(,,,,,)") 8 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#(,,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#(,,,,,,)") 8 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 6])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","(,,,,,,)") [TVar 6,TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#(,,,,,,)") 9 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 6])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 6,TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 6,TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#(,,,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar),(6,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 6])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","(,,,,,,)") [TVar 6,TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))))) (Rule [] (Var 0)),Func ("Prelude","_def#==#Prelude.Eq") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#/=#Prelude.Eq") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#[]") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_def#compare#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#<#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#>#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#<=#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#>=#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_def#min#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#max#Prelude.Ord") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Ordering") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Ordering") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Ordering") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Ordering") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#[]") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_def#show#Prelude.Show") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_def#showsPrec#Prelude.Show") 4 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_def#showList#Prelude.Show") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Float") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#()") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,,)") 8 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_def#readsPrec#Prelude.Read") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_def#readList#Prelude.Read") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda1._#lambda4") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda1._#lambda4._#lambda8") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda10._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda10._#lambda13._#lambda17") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda19") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda19._#lambda22") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda19._#lambda22._#lambda26") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.1058") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.1058._#lambda30") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda32") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda32._#lambda35") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda32._#lambda35._#lambda39") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Float") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda41") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda41._#lambda44") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda41._#lambda44._#lambda48") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#()") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50") 3 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53") 4 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57") 3 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61") 4 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65") 3 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65._#lambda69") 4 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71") 4 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78") 4 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 2) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86") 4 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 2) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94") 4 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94._#lambda98") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 3) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 3) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131") 5 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131._#lambda135") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176") 6 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176._#lambda180") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 5])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 5])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (TCons ("Prelude","(,)") [TVar 5,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209._#lambda213") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209._#lambda213._#lambda217") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209._#lambda213._#lambda217._#lambda221") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209._#lambda213._#lambda217._#lambda221._#lambda225") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209._#lambda213._#lambda217._#lambda221._#lambda225._#lambda229") 7 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,,)._#lambda182._#lambda185._#lambda189._#lambda193._#lambda197._#lambda201._#lambda205._#lambda209._#lambda213._#lambda217._#lambda221._#lambda225._#lambda229._#lambda233") 8 Private (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TVar 5) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar),(5,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 5])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,,,)") [TVar 5,TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#[]") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#[]") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda235") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda235._#lambda238") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda240") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda240._#lambda243") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda245") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda245._#lambda248") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda250") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda250._#lambda253") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda255") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda255._#lambda258") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_def#minBound#Prelude.Bounded") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#maxBound#Prelude.Bounded") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") 0 Public (TCons ("Prelude","Char") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#()") 0 Public (TCons ("Prelude","()") []) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#()") 0 Public (TCons ("Prelude","()") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") 0 Public (TCons ("Prelude","Ordering") []) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") 0 Public (TCons ("Prelude","Ordering") []) (Rule [] (Var 0)),Func ("Prelude","_def#succ#Prelude.Enum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#pred#Prelude.Enum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#pred#Prelude.Enum._#lambda260") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_def#toEnum#Prelude.Enum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#fromEnum#Prelude.Enum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Int") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFrom#Prelude.Enum") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFromThen#Prelude.Enum") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFromTo#Prelude.Enum") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFromThenTo#Prelude.Enum") 4 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int.p.1233") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") 3 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])))) (Rule [] (Var 0)),Func ("Prelude","_def#+#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#-#Prelude.Num") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#*#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#negate#Prelude.Num") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#abs#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#signum#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#fromInt#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_def#/#Prelude.Fractional") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#recip#Prelude.Fractional") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#fromFloat#Prelude.Fractional") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_def#toFloat#Prelude.Real") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Float") [])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Real#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#toFloat#Prelude.Real#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Real#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#toFloat#Prelude.Real#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_def#div#Prelude.Integral") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#div#Prelude.Integral._#selFP2#q") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#mod#Prelude.Integral") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#mod#Prelude.Integral._#selFP4#r") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#quot#Prelude.Integral") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#quot#Prelude.Integral._#selFP6#q") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#rem#Prelude.Integral") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#rem#Prelude.Integral._#selFP8#r") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#divMod#Prelude.Integral") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#quotRem#Prelude.Integral") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#toInt#Prelude.Integral") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Int") [])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Integral#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#toInt#Prelude.Integral#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_def#properFraction#Prelude.RealFrac") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_def#truncate#Prelude.RealFrac") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#truncate#Prelude.RealFrac._#selFP10#m") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#round#Prelude.RealFrac") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","_def#round#Prelude.RealFrac._#selFP12#n") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","_def#round#Prelude.RealFrac._#selFP13#r") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#ceiling#Prelude.RealFrac") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#ceiling#Prelude.RealFrac._#selFP15#n") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#ceiling#Prelude.RealFrac._#selFP16#r") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","_def#floor#Prelude.RealFrac") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#floor#Prelude.RealFrac._#selFP18#n") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#floor#Prelude.RealFrac._#selFP19#r") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.RealFrac#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#properFraction#Prelude.RealFrac#Prelude.Float") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","Float") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#truncate#Prelude.RealFrac#Prelude.Float") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_impl#round#Prelude.RealFrac#Prelude.Float") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_impl#ceiling#Prelude.RealFrac#Prelude.Float") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_impl#floor#Prelude.RealFrac#Prelude.Float") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#pi#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#exp#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#log#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#sqrt#Prelude.Floating") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#**#Prelude.Floating") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#logBase#Prelude.Floating") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#sin#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#cos#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#tan#Prelude.Floating") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#asin#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#acos#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#atan#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#sinh#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#cosh#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#tanh#Prelude.Floating") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#asinh#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#acosh#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#atanh#Prelude.Floating") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Floating#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TCons ("Prelude","Float") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#pi#Prelude.Floating#Prelude.Float") 0 Public (TCons ("Prelude","Float") []) (Rule [] (Var 0)),Func ("Prelude","_impl#exp#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#log#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#sqrt#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#**#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#logBase#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#sin#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#cos#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#tan#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#asin#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#acos#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#atan#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#sinh#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#cosh#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#tanh#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#asinh#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#acosh#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#atanh#Prelude.Floating#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_def#mempty#Prelude.Monoid") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#mappend#Prelude.Monoid") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_def#mconcat#Prelude.Monoid") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#()") 0 Public (TCons ("Prelude","()") []) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#()") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#(,)") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#(,)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#(,)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (TCons ("Prelude","(,)") [TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#(,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#(,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#(,,)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]]) (TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#(,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#(,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#(,,,)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]]) (TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#(,,,,)") 6 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#(,,,,)") 7 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#(,,,,)") 5 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar),(4,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 4])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 3])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 2])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0]]) (TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#[]") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#[]") 0 Public (ForallType [(0,KStar)] (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#[]") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#[]") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#[]._#lambda262") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#[]._#lambda262._#lambda263") 1 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#(->)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [FuncType (TVar 1) (TVar 0)])))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#(->)") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TVar 1) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#(->)") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TVar 1) (TVar 0)))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#(->)") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [FuncType (TVar 1) (TVar 0)]) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#Prelude.Ordering") 0 Public (TCons ("Prelude","Ordering") []) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_def#fmap#Prelude.Functor") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 2])) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (TCons ("Prelude","Apply") [TVar 2,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#<$#Prelude.Functor") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 2])) (FuncType (TVar 1) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 0]) (TCons ("Prelude","Apply") [TVar 2,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Functor#[]") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","[]") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#fmap#Prelude.Functor#[]") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<$#Prelude.Functor#[]") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Functor#(->)") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","(->)") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#fmap#Prelude.Functor#(->)") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (FuncType (TVar 0) (TVar 2)) (FuncType (TVar 0) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<$#Prelude.Functor#(->)") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 1) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","_def#pure#Prelude.Applicative") 1 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_def#<*>#Prelude.Applicative") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 2])) (FuncType (TCons ("Prelude","Apply") [TVar 2,FuncType (TVar 1) (TVar 0)]) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (TCons ("Prelude","Apply") [TVar 2,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#*>#Prelude.Applicative") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 2])) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 0]) (TCons ("Prelude","Apply") [TVar 2,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#<*#Prelude.Applicative") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 2])) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 0]) (TCons ("Prelude","Apply") [TVar 2,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_def#liftA2#Prelude.Applicative") 3 Public (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 1])) (FuncType (FuncType (TVar 0) (FuncType (TVar 3) (TVar 2))) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 3]) (TCons ("Prelude","Apply") [TVar 1,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Applicative#[]") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TCons ("Prelude","[]") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#pure#Prelude.Applicative#[]") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#[]") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [FuncType (TVar 1) (TVar 0)]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#[]._#lambda264") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TVar 0)) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#[]._#lambda264._#lambda265") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TVar 1) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#[]") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#[]._#lambda266") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#[]._#lambda266._#lambda267") 1 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*#Prelude.Applicative#[]") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#[]") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#[]._#lambda268") 3 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 2) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#[]._#lambda268._#lambda269") 3 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 2) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Applicative#(->)") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TCons ("Prelude","(->)") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#pure#Prelude.Applicative#(->)") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#(->)") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TVar 1))) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#(->)") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*#Prelude.Applicative#(->)") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#(->)") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TVar 1))) (FuncType (FuncType (TVar 3) (TVar 2)) (FuncType (FuncType (TVar 3) (TVar 0)) (FuncType (TVar 3) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","_def#empty#Prelude.Alternative") 1 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (TCons ("Prelude","Apply") [TVar 1,TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_def#<|>#Prelude.Alternative") 1 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#some#Prelude.Alternative") 2 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_def#some#Prelude.Alternative.many_.765") 2 Private (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_def#some#Prelude.Alternative.some_.765") 2 Private (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_def#many#Prelude.Alternative") 2 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_def#many#Prelude.Alternative.many_.771") 2 Private (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_def#many#Prelude.Alternative.some_.771") 2 Private (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Alternative#[]") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TCons ("Prelude","[]") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#empty#Prelude.Alternative#[]") 0 Public (ForallType [(0,KStar)] (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#<|>#Prelude.Alternative#[]") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#some#Prelude.Alternative#[]") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#many#Prelude.Alternative#[]") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_def#>>=#Prelude.Monad") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 2])) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 2,TVar 0])) (TCons ("Prelude","Apply") [TVar 2,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_def#>>#Prelude.Monad") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 2])) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (TCons ("Prelude","Apply") [TVar 2,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_def#>>#Prelude.Monad._#lambda270") 2 Private (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 2,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_def#return#Prelude.Monad") 1 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#[]") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","[]") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#[]") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 0])) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda271") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 0])) (FuncType (TVar 1) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda271._#lambda272") 1 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#[]") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#[]") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#(->)") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","(->)") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#(->)") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 0))) (FuncType (TVar 2) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#(->)._#lambda273") 3 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 0))) (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TVar 2) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#(->)") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#(->)") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#fail#Prelude.MonadFail") 1 Public (ForallType [(0,KStar),(1,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#MonadFail") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.MonadFail#[]") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#MonadFail") [TCons ("Prelude","[]") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#fail#Prelude.MonadFail#[]") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","Maybe") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#Prelude.Maybe") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Functor#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","Maybe") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#fmap#Prelude.Functor#Prelude.Maybe") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<$#Prelude.Functor#Prelude.Maybe") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Applicative#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TCons ("Prelude","Maybe") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#pure#Prelude.Applicative#Prelude.Maybe") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#Prelude.Maybe") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Maybe") [FuncType (TVar 1) (TVar 0)]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#Prelude.Maybe") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*#Prelude.Applicative#Prelude.Maybe") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#Prelude.Maybe") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 0))) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 2]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Alternative#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TCons ("Prelude","Maybe") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#empty#Prelude.Alternative#Prelude.Maybe") 0 Public (ForallType [(0,KStar)] (TCons ("Prelude","Maybe") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#<|>#Prelude.Alternative#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#some#Prelude.Alternative#Prelude.Maybe") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#many#Prelude.Alternative#Prelude.Maybe") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","Maybe") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 1])) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.MonadFail#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#MonadFail") [TCons ("Prelude","Maybe") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#fail#Prelude.MonadFail#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Functor#Prelude.Either") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","Either") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#fmap#Prelude.Functor#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 2]) (TCons ("Prelude","Either") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<$#Prelude.Functor#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 0]) (TCons ("Prelude","Either") [TVar 2,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Applicative#Prelude.Either") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TCons ("Prelude","Either") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#pure#Prelude.Applicative#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 2,FuncType (TVar 1) (TVar 0)]) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 1]) (TCons ("Prelude","Either") [TVar 2,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 0]) (TCons ("Prelude","Either") [TVar 2,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*#Prelude.Applicative#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 0]) (TCons ("Prelude","Either") [TVar 2,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TCons ("Prelude","Either") [TVar 3,TVar 2]) (FuncType (TCons ("Prelude","Either") [TVar 3,TVar 1]) (TCons ("Prelude","Either") [TVar 3,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#Prelude.Either") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","Either") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Either") [TVar 0,TVar 2])) (TCons ("Prelude","Either") [TVar 0,TVar 2])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 2,TVar 0]) (TCons ("Prelude","Either") [TVar 2,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.Either") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 0) (TCons ("Prelude","Either") [TVar 1,TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monoid#Prelude.IO") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TCons ("Prelude","IO") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#mempty#Prelude.Monoid#Prelude.IO") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#mappend#Prelude.Monoid#Prelude.IO") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#mconcat#Prelude.Monoid#Prelude.IO") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Functor#Prelude.IO") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","IO") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#fmap#Prelude.Functor#Prelude.IO") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<$#Prelude.Functor#Prelude.IO") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Applicative#Prelude.IO") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TCons ("Prelude","IO") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#pure#Prelude.Applicative#Prelude.IO") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*>#Prelude.Applicative#Prelude.IO") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [FuncType (TVar 1) (TVar 0)]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#Prelude.IO") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#*>#Prelude.Applicative#Prelude.IO._#lambda274") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 1]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<*#Prelude.Applicative#Prelude.IO") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 1]) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#liftA2#Prelude.Applicative#Prelude.IO") 0 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TCons ("Prelude","IO") [TVar 2]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Alternative#Prelude.IO") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TCons ("Prelude","IO") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#empty#Prelude.Alternative#Prelude.IO") 0 Public (ForallType [(0,KStar)] (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#<|>#Prelude.Alternative#Prelude.IO") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#some#Prelude.Alternative#Prelude.IO") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#many#Prelude.Alternative#Prelude.IO") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#Prelude.IO") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","IO") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0])) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") 0 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 1]) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.MonadFail#Prelude.IO") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#MonadFail") [TCons ("Prelude","IO") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#fail#Prelude.MonadFail#Prelude.IO") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.IOError") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","IOError") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IOError") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Bool") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Ordering") 0 Public (TCons ("Prelude","Ordering") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Maybe") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Maybe") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.Either") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","Either") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.Either") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TCons ("Prelude","Either") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Data#Prelude.IOError") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Prelude","IOError") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#===#Prelude.Data#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#aValue#Prelude.Data#Prelude.IOError") 0 Public (TCons ("Prelude","IOError") []) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Maybe") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Maybe") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Maybe") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Maybe") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Maybe") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda275") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda275._#lambda278") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda280") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda280._#lambda283") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda280._#lambda283._#lambda287") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Either") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Either") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Either") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Either") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Ordering") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Either") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","Either") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Either") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Either") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 1,TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Either") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Either") [TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda289") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda289._#lambda292") 3 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda289._#lambda292._#lambda296") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda298") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda298._#lambda301") 3 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda298._#lambda301._#lambda305") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 1,TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.IOError") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","IOError") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","/==") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","aValueInt") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("Prelude","aValueInt.genPos.4") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","aValueChar") 0 Private (TCons ("Prelude","Char") []) (Rule [] (Var 0)),Func ("Prelude","aValueFloat") 0 Private (TCons ("Prelude","Float") []) (Rule [] (Var 0)),Func ("Prelude","eqChar") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","eqInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","eqFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","ltEqChar") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","ltEqInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","ltEqFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","shows") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","showChar") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showString") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showListDefault") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","showListDefault.showl.20") 3 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","showParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","showSigned") 4 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","showTuple") 1 Public (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showTuple._#lambda307") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","showCharLiteral") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","prim_showCharLiteral") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","showStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","prim_showStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","showIntLiteral") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","prim_showIntLiteral") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","showFloatLiteral") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","prim_showFloatLiteral") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","reads") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault") 1 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.43") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.43._#lambda322") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.43._#lambda326") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.43._#lambda326._#lambda330") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.43._#lambda326._#lambda330._#lambda334") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.43") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.43._#lambda310") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.43._#lambda314") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.43._#lambda314._#lambda318") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readListDefault._#lambda336") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault._#lambda336._#lambda339") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readListDefault._#lambda336._#lambda339._#lambda341") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("Prelude","readParen") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readParen.optional.59") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.59") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.59._#lambda344") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.59._#lambda344._#lambda348") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.59._#lambda344._#lambda348._#lambda352") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readSigned") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read''.68") 2 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read''.68._#lambda364") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read''.68._#lambda364._#lambda368") 3 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read'.68") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read'.68._#lambda356") 4 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read'.68._#lambda356._#lambda360") 3 Private (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","read") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","read._#lambda372") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","read._#lambda372._#lambda376") 3 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","lex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.isSingle.84") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lex.isSymbol.84") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lex.isIdChar.84") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.84") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.84._#lambda392") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.84._#lambda392._#lambda396") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.84._#lambda400") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex.lexFracExp.84") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexFracExp.84._#lambda382") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex.lexFracExp.84._#lambda382._#lambda386") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex.lexStringItem.84") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexStringItem.84._#lambda415") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex.lexString.84") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexString.84._#lambda406") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex.lexString.84._#lambda406._#lambda410") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda422") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda426") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda430") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda434") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda438") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda438._#lambda442") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda446") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda450") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda454") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda458") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda462") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda462._#lambda466") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","lexCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lexCharLiteral.isCharName.146") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lexCharLiteral.prefix.146") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","lexCharLiteral.lexEsc.146") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lexDigits") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lexDigits._#lambda487") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","readStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","readNatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readNatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","readFloatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readFloatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","plusInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","minusInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","timesInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","plusFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_plusFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","minusFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_minusFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","timesFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_timesFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","negateFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","intToFloat") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_intToFloat") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","divFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_divFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","even") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","odd") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","fromIntegral") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 1])) (FuncType (TVar 0) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","realToFrac") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 1])) (FuncType (TVar 0) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","divInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","modInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","quotInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","remInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","truncateFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","prim_truncateFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","roundFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","prim_roundFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","logFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_logFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","expFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_expFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","sqrtFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_sqrtFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","sinFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_sinFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","cosFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_cosFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","tanFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_tanFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","asinFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_asinFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","acosFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_acosFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","atanFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_atanFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","sinhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_sinhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","coshFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_coshFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","tanhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_tanhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","asinhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_asinhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","acoshFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_acoshFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","atanhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_atanhFloat") 1 Private (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","^") 4 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","^.g.244") 5 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))))))) (Rule [] (Var 0)),Func ("Prelude","^.f.244") 4 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","<$>") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 2])) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Apply") [TVar 2,TVar 1]) (TCons ("Prelude","Apply") [TVar 2,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","ap") 3 Private (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (TCons ("Prelude","Apply") [TVar 1,FuncType (TVar 2) (TVar 0)]) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 2]) (TCons ("Prelude","Apply") [TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","ap._#lambda491") 3 Private (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 2]) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (FuncType (TVar 2) (TVar 0)) (TCons ("Prelude","Apply") [TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","ap._#lambda491._#lambda493") 3 Private (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","liftM2") 4 Public (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (FuncType (TVar 3) (FuncType (TVar 2) (TVar 0))) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 3]) (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 2]) (TCons ("Prelude","Apply") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","liftM2._#lambda497") 4 Private (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar),(3,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 1,TVar 2]) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (FuncType (TVar 3) (FuncType (TVar 2) (TVar 0))) (FuncType (TVar 3) (TCons ("Prelude","Apply") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","liftM2._#lambda497._#lambda499") 4 Private (ForallType [(0,KStar),(1,KArrow KStar KStar),(2,KStar),(3,KStar)] (FuncType (TVar 3) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 1])) (FuncType (FuncType (TVar 3) (FuncType (TVar 2) (TVar 0))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","sequence") 2 Public (ForallType [(0,KArrow KStar KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [] (Var 0)),Func ("Prelude","sequence._#lambda503") 3 Private (ForallType [(0,KArrow KStar KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","sequence._#lambda503._#lambda505") 3 Private (ForallType [(0,KArrow KStar KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","sequence_") 1 Public (ForallType [(0,KArrow KStar KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","mapM") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 2])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 2,TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Apply") [TVar 2,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","mapM_") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 2])) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 2,TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Apply") [TVar 2,TCons ("Prelude","()") []]))))) (Rule [] (Var 0)),Func ("Prelude","isUpper") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isLower") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isAlpha") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isAlphaNum") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isBinDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isOctDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isHexDigit") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isSpace") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","ord") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","prim_ord") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","chr") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","prim_chr") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","lines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","lines.splitLine.298") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","lines.splitLine.298._#selFP21#ds") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","lines.splitLine.298._#selFP22#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","lines._#selFP24#l") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","lines._#selFP25#bs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","unlines") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","words") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","words._#selFP27#w") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","words._#selFP28#s2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","unwords") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","unwords._#lambda507") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","$") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TVar 1) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","$!") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","$!!") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","$#") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TVar 1) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","$##") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","seq") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","ensureNotFree") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","ensureSpine") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","ensureSpine.ensureList.325") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","normalForm") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","groundNormalForm") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude",".") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude",".._#lambda508") 3 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","id") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","const") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","asTypeOf") 0 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","curry") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 1]) (TVar 0)) (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","uncurry") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TCons ("Prelude","(,)") [TVar 2,TVar 1]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","flip") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 0))) (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","until") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","&&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","||") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","not") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","otherwise") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","ifThenElse") 3 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","fst") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","snd") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TVar 1,TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","head") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","tail") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","null") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","++") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","length") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","!!") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","map") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","foldl") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","foldl1") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","foldr") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","foldr1") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","filter") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","zip") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","zip3") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]]))))) (Rule [] (Var 0)),Func ("Prelude","zipWith") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","zipWith3") 4 Public (ForallType [(0,KStar),(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TVar 3) (FuncType (TVar 2) (FuncType (TVar 1) (TVar 0)))) (FuncType (TCons ("Prelude","[]") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","unzip") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","unzip._#selFP30#xs") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","unzip._#selFP31#ys") 1 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","unzip3") 1 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 2],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","unzip3._#selFP33#xs") 1 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 2],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 2]))) (Rule [] (Var 0)),Func ("Prelude","unzip3._#selFP34#ys") 1 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 2],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","unzip3._#selFP35#zs") 1 Private (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 2],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","concat") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","concatMap") 1 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","iterate") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","repeat") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","replicate") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","take") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","take.takep.510") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","drop") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","splitAt") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","splitAt.splitAtp.524") 2 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","splitAt.splitAtp.524._#selFP37#ys") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","splitAt.splitAtp.524._#selFP38#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","takeWhile") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","dropWhile") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","span") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","span._#selFP40#ys") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","span._#selFP41#zs") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","break") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","reverse") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","and") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","or") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","any") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","all") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","elem") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","notElem") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","lookup") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (TCons ("Prelude","Maybe") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","maybe") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","either") 3 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TCons ("Prelude","Either") [TVar 1,TVar 2]) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","bindIO") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","returnIO") 1 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","getChar") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","getLine") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("Prelude","getLine._#lambda512") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","getLine._#lambda512._#lambda516") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("Prelude","putChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","prim_putChar") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","putStr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","putStrLn") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","print") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","readFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","prim_readFile") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","prim_readFileContents") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","writeFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","prim_writeFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","appendFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","prim_appendFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","userError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IOError") [])) (Rule [] (Var 0)),Func ("Prelude","ioError") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","prim_ioError") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","catch") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","success") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","solve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","doSolve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","=:=") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","constrEq") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","=:<=") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","nonstrictEq") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","=:<<=") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","unifEqLinear") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","ifVar") 3 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 1) (TVar 1))))) (Rule [] (Var 0)),Func ("Prelude","&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","&>") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","?") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","anyOf") 0 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","unknown") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","failed") 0 Public (ForallType [(0,KStar)] (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","error") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","prim_error") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","apply") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","cond") 2 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","letrec") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","failure") 2 Public (ForallType [(0,KStar),(1,KStar),(2,KStar)] (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2)))) (Rule [] (Var 0)),Func ("Prelude","PEVAL") 1 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","===") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","===._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Data") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","aValue") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","aValue._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Data") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","==") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","==._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","/=") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","/=._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Ord#Prelude.Eq") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Ord#Prelude.Eq._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","compare") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","compare._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","<") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","<._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude",">") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude",">._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","<=") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","<=._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude",">=") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude",">=._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","min") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","min._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","max") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","max._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","show") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","show._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","showsPrec") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","showsPrec._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","showList") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","showList._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","readsPrec") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readsPrec._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readList") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Read") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readList._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","minBound") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","minBound._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","maxBound") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Bounded") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","maxBound._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","succ") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","succ._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","pred") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","pred._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","toEnum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","toEnum._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","fromEnum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Int") [])))) (Rule [] (Var 0)),Func ("Prelude","fromEnum._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") [])))) (Rule [] (Var 0)),Func ("Prelude","enumFrom") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","enumFrom._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","enumFromThen") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","enumFromThen._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","enumFromTo") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","enumFromTo._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","enumFromThenTo") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","enumFromThenTo._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","+") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","+._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","-") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","-._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","*") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","*._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","negate") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","negate._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","abs") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","abs._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","signum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","signum._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","fromInt") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","fromInt._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Fractional#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Fractional#Prelude.Num._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","/") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","/._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","recip") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","recip._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","fromFloat") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","fromFloat._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Real#Prelude.Num") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Real#Prelude.Num._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Real#Prelude.Ord") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Real#Prelude.Ord._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","toFloat") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Float") [])))) (Rule [] (Var 0)),Func ("Prelude","toFloat._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Float") [])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Integral#Prelude.Enum") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Integral#Prelude.Enum._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Integral#Prelude.Real") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Integral#Prelude.Real._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","div") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","div._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","mod") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","mod._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","quot") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","quot._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","rem") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","rem._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","divMod") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","divMod._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","quotRem") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","quotRem._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","toInt") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Int") [])))) (Rule [] (Var 0)),Func ("Prelude","toInt._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") [])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.RealFrac#Prelude.Fractional") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.RealFrac#Prelude.Fractional._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.RealFrac#Prelude.Real") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.RealFrac#Prelude.Real._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Real") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","properFraction") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","properFraction._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))))) (Rule [] (Var 0)),Func ("Prelude","truncate") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","truncate._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","round") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","round._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","ceiling") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","ceiling._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","floor") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#RealFrac") [TVar 0])) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","floor._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#RealFrac") [TVar 0]) (ForallType [(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (TVar 0) (TVar 1)))))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Floating#Prelude.Fractional") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Floating#Prelude.Fractional._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","pi") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","pi._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","exp") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","exp._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","log") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","log._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","sqrt") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","sqrt._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","**") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","**._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","logBase") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","logBase._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","sin") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","sin._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","cos") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","cos._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","tan") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","tan._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","asin") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","asin._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","acos") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","acos._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","atan") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","atan._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","sinh") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","sinh._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","cosh") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","cosh._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","tanh") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","tanh._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","asinh") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","asinh._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","acosh") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","acosh._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","atanh") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Floating") [TVar 0])) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","atanh._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Floating") [TVar 0]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","mempty") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","mempty._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Monoid") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","mappend") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","mappend._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Monoid") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))))) (Rule [] (Var 0)),Func ("Prelude","mconcat") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monoid") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","mconcat._#lambda") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","_Dict#Monoid") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","fmap") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","fmap._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","<$") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (TVar 2) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","<$._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (TVar 2) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Applicative#Prelude.Functor") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Applicative#Prelude.Functor._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Applicative") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Functor") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","pure") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])) (ForallType [(1,KStar)] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","pure._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Applicative") [TVar 0]) (ForallType [(1,KStar)] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","<*>") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,FuncType (TVar 2) (TVar 1)]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","<*>._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Applicative") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,FuncType (TVar 2) (TVar 1)]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","*>") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","*>._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Applicative") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","<*") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","<*._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Applicative") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","liftA2") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])) (ForallType [(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TVar 3) (FuncType (TVar 2) (TVar 1))) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 3]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))))) (Rule [] (Var 0)),Func ("Prelude","liftA2._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Applicative") [TVar 0]) (ForallType [(1,KStar),(2,KStar),(3,KStar)] (FuncType (FuncType (TVar 3) (FuncType (TVar 2) (TVar 1))) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 3]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Alternative#Prelude.Applicative") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Alternative#Prelude.Applicative._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Alternative") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","empty") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 0])) (ForallType [(1,KStar)] (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","empty._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Alternative") [TVar 0]) (ForallType [(1,KStar)] (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","<|>") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 0])) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","<|>._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Alternative") [TVar 0]) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","some") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 0])) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","some._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Alternative") [TVar 0]) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","many") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Alternative") [TVar 0])) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","many._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Alternative") [TVar 0]) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Monad#Prelude.Applicative") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Monad#Prelude.Applicative._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Applicative") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude",">>=") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1])) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude",">>=._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1])) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude",">>") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude",">>._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [(1,KStar),(2,KStar)] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))))) (Rule [] (Var 0)),Func ("Prelude","return") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])) (ForallType [(1,KStar)] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","return._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [(1,KStar)] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.MonadFail#Prelude.Monad") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#MonadFail") [TVar 0])) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.MonadFail#Prelude.Monad._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#MonadFail") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Monad") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","fail") 1 Public (ForallType [(0,KArrow KStar KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#MonadFail") [TVar 0])) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","fail._#lambda") 1 Private (ForallType [(0,KArrow KStar KStar)] (FuncType (TCons ("Prelude","_Dict#MonadFail") [TVar 0]) (ForallType [(1,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0))] []