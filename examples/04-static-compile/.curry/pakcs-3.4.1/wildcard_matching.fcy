Prog "wildcard_matching" ["Prelude","Control.SetFunctions"] [] [Func ("wildcard_matching","tails") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","?") [Var 1,Comb FuncCall ("wildcard_matching","tails") [Var 3]])])),Func ("wildcard_matching","match") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Control.SetFunctions","notEmpty") [],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("wildcard_matching","match.aux.7") [],Var 1,Var 2]])),Func ("wildcard_matching","match.aux.7") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude",":") [3,4]) (Or (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [5,6]) (Or (Case Flex (Var 3) [Branch (LPattern (Charc '?')) (Comb FuncCall ("wildcard_matching","match.aux.7") [Var 6,Var 4])]) (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") [],Var 5,Var 3],Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Var 5],Lit (Charc '?')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") [],Var 5],Lit (Charc '*')]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("wildcard_matching","match.aux.7") [Var 6,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))]) (Case Flex (Var 3) [Branch (LPattern (Charc '*')) (Comb FuncCall ("wildcard_matching","match.aux.7") [Comb FuncCall ("wildcard_matching","tails") [Var 1],Var 4])]))])),Func ("wildcard_matching","main") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Comb FuncCall ("wildcard_matching","match") [Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude","[]") []]]]]]],Comb ConsCall ("Prelude","True") []]]]]]]]]]]))] []