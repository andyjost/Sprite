(IProg "Nat" ["Prelude"] [(IDataType ("Nat","Nat",0) [(("Nat","O",0),0),(("Nat","I",1),1)])] [(IFunction ("Nat","_inst#Prelude.Data#Nat.Nat",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("Nat","_impl#===#Prelude.Data#Nat.Nat",1) 2 []),(IFCall ("Nat","_impl#aValue#Prelude.Data#Nat.Nat",2) [])]))))])))),(IFunction ("Nat","_impl#===#Prelude.Data#Nat.Nat",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("Nat","O",0) 0 (IBlock [] [] (IReturn (IFCall ("Nat","_impl#===#Prelude.Data#Nat.Nat_CASE0",10) [(IVar 2)])))),(IConsBranch ("Nat","I",1) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 1 [0]))] (IReturn (IFCall ("Nat","_impl#===#Prelude.Data#Nat.Nat_CASE1",9) [(IVar 2),(IVar 4)]))))])))),(IFunction ("Nat","_impl#===#Prelude.Data#Nat.Nat_CASE1",9) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Nat","O",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Nat","I",1) 1 (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 2 [0]))] (IReturn (IFCall ("Nat","_impl#===#Prelude.Data#Nat.Nat",1) [(IVar 4),(IVar 5)]))))])))),(IFunction ("Nat","_impl#===#Prelude.Data#Nat.Nat_CASE0",10) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Nat","O",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("Nat","I",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("Nat","_impl#aValue#Prelude.Data#Nat.Nat",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (ICCall ("Nat","O",0) []) (ICCall ("Nat","I",1) [(IFCall ("Nat","_impl#aValue#Prelude.Data#Nat.Nat",2) [])])))))),(IFunction ("Nat","_inst#Prelude.Show#Nat.Nat",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("Nat","_impl#show#Prelude.Show#Nat.Nat",4) []),(IFPCall ("Nat","_impl#showsPrec#Prelude.Show#Nat.Nat",5) 2 []),(IFCall ("Nat","_impl#showList#Prelude.Show#Nat.Nat",6) [])]))))])))),(IFunction ("Nat","_impl#show#Prelude.Show#Nat.Nat",4) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFPCall ("Nat","_inst#Prelude.Show#Nat.Nat",3) 1 [])]))))),(IFunction ("Nat","_impl#showsPrec#Prelude.Show#Nat.Nat",5) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Nat","O",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'O')),(ICCall ("Prelude","[]",0) [])])])))),(IConsBranch ("Nat","I",1) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","showParen",637) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(ILit (IInt 10))]),(IVar 1)]),(IFCall ("Prelude",".",679) [(IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'I')),(ICCall ("Prelude",":",1) [(ILit (IChar ' ')),(ICCall ("Prelude","[]",0) [])])])]),(IFCall ("Nat","_impl#showsPrec#Prelude.Show#Nat.Nat",5) [(ILit (IInt 11)),(IVar 3)])])]))))])))),(IFunction ("Nat","_impl#showList#Prelude.Show#Nat.Nat",6) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFPCall ("Nat","_inst#Prelude.Show#Nat.Nat",3) 1 [])]))))),(IFunction ("Nat","natToInt",7) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Nat","O",0) 0 (IBlock [] [] (IReturn (ILit (IInt 0))))),(IConsBranch ("Nat","I",1) 1 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) [(ILit (IInt 1)),(IFCall ("Nat","natToInt",7) [(IVar 2)])]))))])))),(IFunction ("Nat","natFromInt",8) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Nat","natFromInt_COMPLEXCASE0",11) [(IVar 1),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int",41) [(IVar 1),(ILit (IInt 0))])]))))),(IFunction ("Nat","natFromInt_COMPLEXCASE0",11) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("Nat","natFromInt_COMPLEXCASE1",12) [(IVar 1),(IFCall ("Prelude","otherwise",690) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Nat","O",0) []))))])))),(IFunction ("Nat","natFromInt_COMPLEXCASE1",12) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Nat","I",1) [(IFCall ("Nat","natFromInt",8) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",342) [(IVar 1),(ILit (IInt 1))])])]))))]))))])