Prog "Nat" ["Prelude"] [Type ("Nat","Nat") Public [] [Cons ("Nat","O") 0 Public [],Cons ("Nat","I") 1 Public [TCons ("Nat","Nat") []]]] [Func ("Nat","_inst#Prelude.Data#Nat.Nat") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("Nat","Nat") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("Nat","_impl#===#Prelude.Data#Nat.Nat") [],Comb FuncCall ("Nat","_impl#aValue#Prelude.Data#Nat.Nat") []])])),Func ("Nat","_impl#===#Prelude.Data#Nat.Nat") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","O") []) (Case Flex (Var 2) [Branch (Pattern ("Nat","O") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Nat","I") [3]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Nat","I") [4]) (Case Flex (Var 2) [Branch (Pattern ("Nat","O") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Nat","I") [5]) (Comb FuncCall ("Nat","_impl#===#Prelude.Data#Nat.Nat") [Var 4,Var 5])])])),Func ("Nat","_impl#aValue#Prelude.Data#Nat.Nat") 0 Public (TCons ("Nat","Nat") []) (Rule [] (Or (Comb ConsCall ("Nat","O") []) (Comb ConsCall ("Nat","I") [Comb FuncCall ("Nat","_impl#aValue#Prelude.Data#Nat.Nat") []]))),Func ("Nat","_inst#Prelude.Show#Nat.Nat") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("Nat","Nat") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Nat","_impl#show#Prelude.Show#Nat.Nat") [],Comb (FuncPartCall 2) ("Nat","_impl#showsPrec#Prelude.Show#Nat.Nat") [],Comb FuncCall ("Nat","_impl#showList#Prelude.Show#Nat.Nat") []])])),Func ("Nat","_impl#show#Prelude.Show#Nat.Nat") 0 Public (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb (FuncPartCall 1) ("Nat","_inst#Prelude.Show#Nat.Nat") []])),Func ("Nat","_impl#showsPrec#Prelude.Show#Nat.Nat") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Nat","O") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Nat","I") [3]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]],Comb FuncCall ("Nat","_impl#showsPrec#Prelude.Show#Nat.Nat") [Lit (Intc 11),Var 3]]])])),Func ("Nat","_impl#showList#Prelude.Show#Nat.Nat") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Nat","Nat") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb FuncCall ("Prelude","_def#showList#Prelude.Show") [Comb (FuncPartCall 1) ("Nat","_inst#Prelude.Show#Nat.Nat") []])),Func ("Nat","natToInt") 1 Public (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","O") []) (Lit (Intc 0)),Branch (Pattern ("Nat","I") [2]) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Lit (Intc 1),Comb FuncCall ("Nat","natToInt") [Var 2]])])),Func ("Nat","natFromInt") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Nat","Nat") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Nat","O") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Nat","I") [Comb FuncCall ("Nat","natFromInt") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))] []