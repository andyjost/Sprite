1. Overview
-----------

Sprite is an implementation of the Curry programming language
(https://curry.pages.ps.informatik.uni-kiel.de/curry-lang.org/).  It is based
on an evaluation strategy called the Fair Scheme.  You can read about it at
http://web.cecs.pdx.edu/~antoy/homepage/publications/lopstr13/long.pdf.

In addition to command-line tools for compiling and running Curry programs, the
Python API provides access to a Curry interpreter, (JIT) compiler, and runtime.
Curry code modules can thus be imported directly into Python, enabling
hybrid applications that leverage the strengths of both languages.


2. Build, Testing, and Installation
-----------------------------------

* Make sure you have the prerequisites listed in EXTERNAL_SOFTWARE.rst.

* Short instructions:

    ./configure
    make
    make install PREFIX=<install-dir>


* Long instructions:

Run the ./configure script first.  Say `./configure -h` for help.

Say `make help` for details concerning available targets and options.

See `INSTALLATION.rst` for more details.


3. Getting Started
------------------

Build and read the documentation:

    make docs

See the examples/ subdirectory.

To run a Curry program use a command such as:

    sprite-exec myprogram.curry

To use the Python API, start Python from Sprite's bin/ directory and say
`import curry`.


4. Contact and Bug Reporting
----------------------------

Sprite was developed and is maintained by Andy Jost (andy.m.jost@gmail.com).
Feel free to contact him with questions, bug reports, feature requests, and
other miscellania.  Direct general questions about Curry to the Curry mailing
list (curry@lists.RWTH-Aachen.DE).

If you find a bug, please report it.  The easiest way is to create a minimal
unit test decorated with ``unittest.expectedFailure``.  Further instructions on
developing and running tests can be found under tests/README.  Once you have
written the test, submit a pull request or send the diff by email.


5. Contributing to Sprite
-------------------------

Contributions are welcome!  For more information, see README.contrib.

