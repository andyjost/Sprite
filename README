1. Contact Information
----------------------

Sprite was developed and is maintained by Andy Jost (ajost@synopsys.com).  Feel
free to contact him with questions, bug reports, feature requests, and other
miscellania.  Direct general questions about Curry to the Curry mailing list
(curry@lists.RWTH-Aachen.DE).


2. Dependencies
---------------

External software is listed in Make.config.  Edit the paths in that file so
that the build system can find dependencies.

Sprite was developed and tested with the following software.

    - Ubuntu 16.04.1 LTS (xenial); 4.4.0-72-generic #93-Ubuntu
    - GCC 7.2.0
		- Python 2.7.12
    - PAKCS 1.15.0
    - LLVM 5.0.1
    - Boost 1.66 (www.boost.org)
    - MPS 1.116.0 (www.ravenbrook.com/project/mps)
    - GNU make 4.1

This project also requires the Curry Meta-Compiler (CMC).  If it is not already
there, you should place CMC in the project root directory.  Assuming you have
access to PSU computer systems, the following command can be used:

    git clone https://yourusername@projects.cecs.pdx.edu/git/antoy-cmc CMC


3. Build and Installation
-------------------------

To see makefile targets:

    make help

To compile all objects and executables:

    make all

To make a local installation for testing or development (placed under ./install):

    make install

To run tests on the local installation:

    cd tests
    ./run_tests

To install Sprite into another directory:

    make install PREFIX=<your-prefix-dir>

To test the installation:

    cd tests
    export SPRITE_HOME=<your-prefix-dir>
    ./run_tests

To build and install documentation:

    make all WITHDOC=1      # or cd doc; make all
    make install WITHDOC=1


4. Getting Started
------------------

To run a Curry program found in file "myprogram.curry", use the following:

    $(SPRITE_HOME)/bin/curryexec myprogram.curry

This is equivalent to the following application of Python's -m command-line argument:

    $(SPRITE_HOME)/bin/python -m curry myprogram.curry

If the program uses import statements, then you must ensure CURRYPATH is set properly.

To view the computation trace, you may set SPRITE_INTERPRETER_FLAGS=trace:True
in the environment.


5. Environment Variables
------------------------

    - SPRITE_HOME
        Used by test scripts to find out where Sprite is installed.  Generally
        speaking, when using a local installation (i.e., without specifying
        PREFIX), this variable can be left unset.  Otherwise, it should name
        the directory where Sprite is installed.

    - CURRYPATH

        Default: ''
        Used at: src/python/importer.py

        A colon-separated list of paths use to search for Curry code.

    - SPRITE_LOG_LEVEL

        Default: WARNING
        Used at: src/python/interpreter/__init__.py

        Produce more or less output.  This may be set to any of
        'DEBUG', 'INFO', 'WARNING', 'ERROR', or 'CRITICAL' (see the
        Python "logging" module documentation for details).  Setting
        this to 'DEBUG' will output detailed information about each
        function compiled.

    - SPRITE_LOG_FILE

        Default: '-' (stdout)
        Used at: src/python/interpreter/__init__.py

        The file to which logging output is directed.

    - SPRITE_INTERPRETER_FLAGS

        Default: ''
        Used at: src/python/__init__.py

        Overrides default flags in `curry.interpreter.Interpreter``.  A
        comma-separated list of colon-separated pairs.  Use the following
        command to see a list of all flags:

            % python -c 'import curry; help(curry.interpreter.Interpreter)'

        Example: SPRITE_INTERPRETER_FLAGS=trace:True,debug:True

    - SPRITE_CACHE_FILE

        Default: $HOME/.sprite/cache.db
        Used at: src/python/cache.py

        Specifies the cache database file.  Expensive conversions, such as from
        ICurry-JSON to Python, are cached.  Can be used to specify the cache
        file.  If set to the empty string, caching is disabled.

    - SPRITE_DEBUG

        Enables features to debug Sprite itself.

6. Bug Reporting
----------------

If you find a bug, please report it.  The easiest way is to create a minimal
unit test decorated with ``unittest.expectedFailure``.  Further instructions on
developing and running tests can be found under tests/README.  Once you have
written the test, submit a pull request or send the diff to ajost@synopsys.com.


7. Contributing to Sprite
-------------------------

Contributions to Sprite are welcome!  For more information, see README.contrib.

