1. Overview
-----------

Sprite is an implementation of the Curry programming language
(https://curry.pages.ps.informatik.uni-kiel.de/curry-lang.org/).  It is based
on an evaluation strategy called the Fair Scheme.  You can read about it at
http://web.cecs.pdx.edu/~antoy/homepage/publications/lopstr13/long.pdf.

In addition to command-line tools for compiling and running Curry programs, the
Python API provides access to a Curry interpreter, (JIT) compiler, and runtime.
Curry code modules can thus be imported directly into Python, enabling
hybrid applications that leverage the strengths of both languages.


2. Build, Testing, and Installation
-----------------------------------

* Short instructions:

    make
    make install PREFIX=<install-dir>

* Configuration:

See Make.config for editable configuration options.  You may edit that file, or
supply options to `make` on the command line.  The following options could be
useful:

    PREFIX=<install-dir>
        Specifies the directory under which to install Sprite.

    PYTHON_EXECUTABLE=<full-path-to-python-exe>
        Selects the Python version.  By default, your PATH is searched for
        Python.

    PAKCS=<full-path-to-pakcs-exe>
        Selects the PAKCS version.  By default, your PATH is searched for
        PAKCS.

    CC=<full-path-to-C-compiler>
    CXX=<full-path-to-C++-compiler>
        Selects the C and C++ compilers.

When reconfiguring, first remove everything by saying:

    rm -rf install object_root

* Long instructions:

Say `make help` for details concerning available targets and options.

The default target builds Sprite, installs it to a staging area, and runs the
tests.  If you prefer to do things one step at a time, follow the instructions
below.

You must first initialize the GIT submodules:

    git submodule init
    git submodule update

To use pre-built ICurry files say `make overlay`.  This avoids having to
compile the Curry libraries and accelerates the first invocation of the tests.
For most people, running the tests will be impractical without this.  To use
this, your version of PACKS must match one of the overlay*.tgz files.

To build object files say `make objs`.  To build static and shared libraries
say `make libs` and `make shlibs`, respectively.

To stage the programs and libraries, run `make stage`.  This is needed to run
tests.  A mock installation will be created under 'install/'.  This step also
builds the necessary objects and libraries, so you can skip those steps if you
like.

To run the tests, say `make test`.  You can also `cd tests` and then say
`./run_tests`.  See tests/README for details on how to run a subset of tests.

To install Sprite to a directory of your choosing run:

    make install PREFIX=<install-dir>

To build PDF and HTML documentation, run `make docs`.  Many formats are
available; say `make -C docs help` for details.


3. Getting Started
------------------

Refer to the examples/ subdirectory and see the "Getting-Started Guide" in the
documentation.

To run a Curry program found in file "myprogram.curry", issue the following
command:

    sprite-exec myprogram.curry

To use the Python API, say `import curry` from Python.


4. Environment Variables
------------------------

    - SPRITE_HOME
        Used by test scripts to find out where Sprite is installed.  Generally
        speaking, when using a local installation (i.e., without specifying
        PREFIX), this variable can be left unset.  Otherwise, it should name
        the directory where Sprite is installed.

    - CURRYPATH

        Default: ''

        A colon-separated list of paths use to search for Curry code.

    - SPRITE_LOG_LEVEL

        Default: WARNING

        Produce more or less output.  This may be set to any of
        'DEBUG', 'INFO', 'WARNING', 'ERROR', or 'CRITICAL' (see the
        Python "logging" module documentation for details).  Setting
        this to 'DEBUG' will output detailed information about each
        function compiled.

    - SPRITE_LOG_FILE

        Default: '-' (stdout)

        The file to which logging output is directed.

    - SPRITE_INTERPRETER_FLAGS

        Default: ''

        Overrides default flags in `curry.interpreter.Interpreter``.  A
        comma-separated list of colon-separated pairs.  Use the following
        command to see a list of all flags:

            % python -c 'import curry; help(curry.interpreter.Interpreter)'

        Example: SPRITE_INTERPRETER_FLAGS=trace:True,debug:True


5. Contact and Bug Reporting
----------------------------

Sprite was developed and is maintained by Andy Jost (andy.m.jost@gmail.com).
Feel free to contact him with questions, bug reports, feature requests, and
other miscellania.  Direct general questions about Curry to the Curry mailing
list (curry@lists.RWTH-Aachen.DE).

If you find a bug, please report it.  The easiest way is to create a minimal
unit test decorated with ``unittest.expectedFailure``.  Further instructions on
developing and running tests can be found under tests/README.  Once you have
written the test, submit a pull request or send the diff by email.


6. Contributing to Sprite
-------------------------

Contributions are welcome!  For more information, see README.contrib.

