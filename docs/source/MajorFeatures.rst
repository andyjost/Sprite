Major Features of Sprite
========================

Multiple Backends
-----------------

Sprite is organized to target a variety of programming environments.  Each
environment corresponds to a software component in Sprite called a backend.
A backend consists of a compiler, which translates Sprite IR to target IR,
and a runtime library to support running Curry programs.  The available
backends are found under ``src/python/backends``.

The chosen backend determines the characteristics of the code generated by
Sprite.  The compilation speed, execution speed, resource usage,
parallelizability, the ease with which one can inspect and debug the generated
code, and the ability to integrate with other environments are all affected by
this choice.

Cross-platform portability is provided by the programming environment.  For
example, if the target environment is Python, then the cross-platform nature of
Python makes code generated by Sprite as portable as Python is.  Alternatively,
the ability of LLVM to target multiple architectures provides the portability
of the LLVM backend.

Sprite currently supports the following backends:

Python
......

The Python backend is not the most efficient, but it is extremely useful for
development.  When the focus is on inspecting, debugging, or analyzing Curry
computations or the compilation process, then this is likely the best choice.

LLVM
....

The LLVM backend aims for maximal efficiency.  Compiled Curry code is emitted
as LLVM-IR and then converted to native object code (e.g., x86_64) by the LLVM
toolchain.  This code is linked to a runtime written in C++ with efficiency as
the goal.

.. note::
   The LLVM backend is currently under development.  Though it is documented
   here, it is not yet available for use.


Python API
----------

All the features of Sprite are available through the Python API.  Say ``import
curry`` from Python to access it.  Using the Python API, it is possible to
compile and run Curry programs, inspect intermediates, build goals, dynamically
generate Curry modules, and much more.

Important aspects of this API include the following:

- The barriers to entry for developers that may be unfamiliar with Curry,
  Functional-Logic Programming, or Haskell are greatly lowered.  Since Sprite
  is presented as a Python extension, any user already familiar with Python can
  start using Curry with only the slighest effort.

- Hybrid applications can be written seamlessly.  Curry code can be imported
  directly into Python via the ``import`` keyword.  Sprite installs import
  hooks to search CURRYPATH for Curry source files and compile and load them
  upon request.  Curry and Python interoperate in this environment.

- Curry computations are represented in Python as generators.  These are lazy
  objects, whose only method is a function ``next`` that produces the next
  result.  As such, the inherent laziness of Curry computations can be
  perfectly encapsulated.

- Every Curry computation is logicaly separate, and any number of them can
  exist simultaneously.  Python's normal garbage collection is used to reclaim
  resources.

- Tasks that may be unfamiliar, tedious, or difficult to explain to certain
  users can be done in Python.  This significantly lowers the average barrier
  to entry, since Python is orders-of-magnitude more widely used than either
  Curry or Haskell.  In particular, there is no need to perform any I/O actions
  in encapsulated Curry code, since the values of any program can be obtained
  in Python and I/O performed there.


Command-Line Tools
------------------

Executable programs are located under the ``bin`` directory of the installation
tree.  For example, after saying ``make stage``, these programs can be found
under ``./install/bin/`` relative to the repository root.

Sprite provides the following tools:


``python``

A link to the Python that Sprite was configured to use at build time.  Python
is invoked under ``sprite-invoke`` to ensure the environment is set up
so that ``import curry`` succeeds.


``sprite-invoke``

A wrapper script that configures the runtime environment for Sprite before
running another program.  Environment variables such as PYTHONPATH, CURRYPATH,
and LD_LIBRARY_PATH are set.

To start an interactive shell with the environment set up for Sprite, you might
say ``sprite-invoke $SHELL``.


``sprite-exec``

Executes a Curry script.  The argument is a Curry source file or module name.
Needed Curry modules are located via the CURRYPATH environment variable.  This
program compiles the Curry, evaluates its ``main`` goal (or another goal
specified by the ``-g`` option) and prints all values obtained.


``sprite-make``

Invokes the Sprite compilation pipeline.  This command can be used to convert
Curry code into any of the intermediate formats used during compilation.

