
The Curry Compilation Pipeline
==============================

Sprite compiles Curry programs via a series of transformations.  Each
transformation is called a stage of the compilation, and is associated with
certain type of intermediate file.  A transformation might be implemented by
Sprite or performed by an external program.  Taken in order, the stages form
the compilation pipeline.

Intermediate files are used to checkpoint the build process (so that it does
not need to start from the beginning if something goes wrong), and for
debugging.  In general, Sprite will choose the newest prerequisite among a
Curry source file and all its intermediates along the pipeline as the
starting point for compilation.

The following setions discuss the compilation stages in detail.


Curry to ICurry
---------------

In the first stage, Curry source code is transformed into a format called
`ICurry`_ by an external program called `icurry`.  This process involves
sub-transformations and additional intermediate files, which are managed by
`icurry`.  One of these is a representation called `FlatCurry`_, which desugars
and otherwise simplifies the source material.

Sprite uses PAKCS to drive `icurry`.  This affects where certain
intermediate files are placed.  For details refer to the `PAKCS
manual`_.  In short, intermediate files generated by PAKCS will be placed under
``.curry/pakcs-<ver>/``, relative to the original Curry source files, where
``<ver>`` is replaced with the numeric PAKCS version.  Among other files, PAKCS
will place the FlatCurry intermediate here, with extension ``.fcy``.

Sprite uses a similar scheme to store intermediate files.  The intermediate
directory used by Sprite is named ``.curry/sprite-pakcs-<ver>``.  The
ICurry file is placed here with extension ``.icy``.

.. note::
   The PAKCS subdirectory may contain a file with extension ``.icurry``.  That
   file does `not` contain ICurry (it contains a Curry `interface`).


ICurry to JSON
--------------

The `.icy` files generated by `icurry` are formatted using a subset of the
Curry syntax.  To facilitate the use of ICurry in other programming
environments, which may not have a Curry parser, Sprite converts this to
`JSON`_.  This conversion is handled by a pure-Python Curry parser in Sprite
that implements a subset of Curry sufficient to parse `.icy` files.

To compensate for the space inefficiency of JSON, Sprite compacts and
compresses JSON files.  Compaction is performed by the `jq`_ program, if it is
available, and compression with `zlib`_.  Compressed ICurry-JSON files use
suffix `.json.z`.


JSON to In-Memory IR
--------------------

The in-memory representation of ICurry in Sprite closely reflects the standard
`ICurry package`_ available from the `Curry Package Manager`_.  This is
implemented in Sprite by Python module ``curry.icurry``.  That module also
implements functions to load ICurry from ICurry-JSON (`.json`) or native ICurry
(`.icy`), and to dump ICurry in human-readable format or as ICurry-JSON.

The in-memory representation is suitable for viewing and transforming ICurry.
Using the Python API, one can inspect ICurry interactively from Python, or
manipulate it with Python scripts.


In-Memory IR to Target IR
-------------------------

The target IR depends on the backend selected.  The LLVM backend, for instance,
generates LLVM IR, whereas the Python backend generates Python.  This stage
performs a straight-line translation of the in-memory IR to target IR.  


Target IR to Executable Code
----------------------------

Depending on the backend, additional conversions may be needed to produce
executable code.  LLVM IR is at this stage converted first into assembly and
then machine-specific binary code such as x86-64.  The Python backend on the
other hand does not require this stage, since the Python code emitted in the
previous stage can be run directly under a Python interpreter.  In the future,
a package such as `PyPy`_ could be used to post-process Python code into a more
efficient, but Sprite does not currently do so.


.. _ICurry: http://web.cecs.pdx.edu/~antoy/homepage/publications/wflp19/paper.pdf
.. _FlatCurry: http://www.informatik.uni-kiel.de/âˆ¼curry/flat
.. _PAKCS manual: https://www.informatik.uni-kiel.de/~pakcs/Manual.pdf
.. _JSON: https://www.json.org/
.. _jq: https://stedolan.github.io/jq/
.. _zlib: https://zlib.net/
.. _ICurry package: https://www-ps.informatik.uni-kiel.de/~cpm/pkgs/icurry.html
.. _Curry Package Manager: https://www-ps.informatik.uni-kiel.de/currywiki/tools/cpm
.. _PyPy: https://www.pypy.org/
