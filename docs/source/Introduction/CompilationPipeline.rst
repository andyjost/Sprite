
.. _compilation-pipeline:

The Curry Compilation Pipeline
==============================

Sprite compiles Curry programs via a series of transformations.  Each
transformation, called a `stage`, is associated with certain type of
intermediate file.  Intermediate files are used to checkpoint, debug, and
inspect the build process.  A transformation might be implemented by Sprite or
performed by an external program.  Taken in order, the stages form the
compilation pipeline.  Sprite chooses as its starting point the newest
among a Curry source file and all its intermediates along the pipeline.

The following sections discuss the compilation stages in detail.


Curry to ICurry
---------------

Sprite first translates Curry source code into a format called `ICurry
<http://arxiv.org/abs/1908.11101>`__.  For this it relies on the external
program `icurry
<https://www-ps.informatik.uni-kiel.de/~cpm/pkgs/icurry.html>`__, available
through the `Curry Package Manager`_.  This stage involves sub-transformations
and additional intermediate files, which are managed by ``icurry``.  An
important intermediate called `FlatCurry`_, contains the desugared and
otherwise simplified program.

Sprite uses PAKCS to drive ``icurry``.  This affects where certain
intermediate files are placed.  For details refer to the `PAKCS
manual`_.  In short, intermediate files generated by PAKCS will be placed under
``.curry/pakcs-<ver>/``, relative to the original Curry source files, where
``<ver>`` is replaced with the numeric PAKCS version.  Among other files, PAKCS
will place the FlatCurry intermediate here, with extension ``.fcy``.

Sprite uses a similar scheme to store intermediate files.  The intermediate
directory used by Sprite is named ``.curry/sprite-pakcs-<ver>``.  The
ICurry file is placed here with extension ``.icy``.

.. note::
   The PAKCS subdirectory may contain a file with extension ``.icurry``.  That
   file does `not` contain ICurry (it contains a Curry `interface`).


ICurry to JSON
--------------

``.icy`` files are formatted using a subset of Curry.  To facilitate their use
in other programming environments, which may not have a Curry parser, Sprite
converts them to `JSON`_.  This conversion is handled by a pure-Python parser
that implements a sufficient subset of Curry.

To compensate for the space inefficiency of JSON, Sprite compacts and
compresses JSON files.  Compaction is performed by the `jq`_ program, if it is
available, and compression with `zlib`_.  Compressed ICurry-JSON files use
suffix ``.json.z``.


JSON to Sprite IR
-----------------

Sprite's in-memory IR closely reflects `ICurry`.  This is implemented in Python
under :mod:`curry.icurry`.  That module also provides functions to load ICurry
from JSON or native ICurry, and to dump ICurry into a human-readable format or
as JSON.

The in-memory representation is suitable for viewing and transforming ICurry.
Using the Python API, one can inspect ICurry interactively from Python or
manipulate it from Python scripts.


Sprite IR to Target IR
----------------------

The target IR depends on the backend selected.  The Python backend, for
instance, generates Python, whereas the LLVM backend generates LLVM IR.  This
stage performs a straight-line translation of Sprite IR to target IR.


Target IR to Executable Code
----------------------------

Depending on the backend, additional conversions may be performed to produce
executable code.  LLVM IR is at this stage converted into assembly and then
machine-executable binary code.  The Python backend, on the other hand,
requires nothing because Python can be run directly under an interpreter.  Even
so, a package such as `PyPy`_ could in principle be used to post-process Python
code into a more efficient form.


..
  .. _FlatCurry: http://www.informatik.uni-kiel.de/âˆ¼curry/flat

.. _FlatCurry: https://www-ps.informatik.uni-kiel.de/~cpm/pkgs/flatcurry.html
.. _PAKCS manual: https://www.informatik.uni-kiel.de/~pakcs/Manual.pdf
.. _JSON: https://www.json.org/
.. _jq: https://stedolan.github.io/jq/
.. _zlib: https://zlib.net/
.. _ICurry package: https://www-ps.informatik.uni-kiel.de/~cpm/pkgs/icurry.html
.. _Curry Package Manager: https://www-ps.informatik.uni-kiel.de/currywiki/tools/cpm
.. _PyPy: https://www.pypy.org/
