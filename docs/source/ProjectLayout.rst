
Project Layout
==============

The Sprite repository is organized as follows:

``configure``
    The script used to configure Sprite.  Run this before running ``make``.
    Doing so creates a file ``Make.config``.

``curry/``
    The built-in Curry library that comes with Sprite.

``docs/``
    Files used to build documentation.  Say ``cd docs &&
    make html`` to build HTML documentation.

``examples/``
    Examples demonstrating Sprite.

``extern/``
    External projects used by Sprite.  The GIT `submodules` subcommand
    populates this on the first build.

``install/`` (dynamically created)
    The staging area created by the ``make stage`` command.  Sprite is
    installed here for use in testing and building help documents.  It is safe
    to remove this directory.

    If Sprite is installed with ``make install``, then the structure of the
    instalation directory matches that of this directory.

    ``bin/``
        Executable files installed by Sprite.

    ``curry/``
        The built-in Curry library.  Sprite automatically adds this to the end
        of the search path used to locate Curry modules.

    ``lib/``
        The Sprite runtime libraries.  The contents of this directory are
        needed to run programs compiled by Sprite.

    ``python/``
        The Sprite Python API.  Contains the code loaded by the Python
        statement ``import curry``.

    ``sysconfig/``
        System variables set during configuration.

    ``tools/``
        Links to external programs used by Sprite.

``object-root/`` (dynamically created)
    The directory containing all build products such as object files,
    libraries, and help documents.  It is safe to remove this directory, for
    instance, to reclaim disk space or perform a clean build.

``overlay*.tgz``
    Contains ICurry and related files for a specific version of PAKCS.  Say
    ``make overlay`` to apply the overlay.

    .. warning::
       It is important to choose a version
       of PAKCS that matches one of the overlay files, as it reduces the time
       required to run tests from several hours to just a few minutes.  Applying
       the overlay avoids having to run the ``icurry`` command-line tool hundreds
       of times.

``spritelog.vim``
    A Vim syntax-highlighting file to aid in the analysis of Sprite debug
    output.  Consider installing this if you plan to look at computation traces
    generated by Sprite.

``src/``
    The Sprite source code.

    ``export/``
        Files exported to the installation directory.

    ``python/``
        The Python code implementing Sprite.

    ``sprite/``
        Code for the Sprite runtime libraries.

``tests/``
    The test suite.  See tests/README for details.

    ``data/``
        Test data, include Curry source files, text files, and expected results.

    ``func_*.py``
        Functional tests.  These execute whole Curry programs, checking for the
        expected behavior.

    ``lib/``
        Test support code.  The ``cytest`` subdirectory contains useful
        extensions to Python's ``unittest`` module for testing Curry programs.

    ``oracle*``
        Driver scripts for Curry oracles.  An oracle is another Curry system,
        such as PAKCS or KiCS2, the produces expected results of Curry
        programs.  The output of Sprite can be compared with that of other
        Curry systems by configuring the oracle scripts.

    ``run_tests``
        The test driver.  Used to run tests.

    ``unit_*.py``
        Unit tests.  These test isolated components of Sprite.


