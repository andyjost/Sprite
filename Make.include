# Project variables
# =================
# These have the same value in all makefiles.
ROOT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
OBJECT_ROOT := $(abspath $(ROOT_DIR)/object-root)
include $(ROOT_DIR)/Make.config
ifndef PREFIX
  PREFIX := $(abspath $(ROOT_DIR)/install)
endif
MULTIARCH := $(shell $(CC) --print-multiarch)

# Makefile debugging.  Helps trace which rules are triggered.
# OLD_SHELL := $(SHELL)
# SHELL = $(warning Building $@)$(OLD_SHELL)


# Derived variables
# =================
# Variables derived from Make.config variables.

PAKCS := $(realpath $(PAKCS_HOME)/bin/pakcs)
PAKCS_NAME := $(shell $(PAKCS) --compiler-name)
PAKCS_VER := $(shell $(PAKCS) --numeric-version)
PAKCS_SUBDIR := $(PAKCS_NAME)-$(PAKCS_VER)

# The name of the top-level Python package.  For example, if this is 'curry',
# then users can import this project by writing 'import curry'.
ifndef PYTHON_PACKAGE_NAME
  PYTHON_PACKAGE_NAME := curry
endif

# This name must match one of the subpackages under src/python/backends.
ifndef DEFAULT_BACKEND
  DEFAULT_BACKEND := py
endif

ifndef PYTHON_INCLUDE_PATH
  # Added to CFLAGS as -I$(PYTHON_INCLUDE_PATH) for certain targets.
  PYTHON_INCLUDE_PATH := $(PYTHON_HOME)/include/$(PYTHON_VERSION)
endif

ifndef PYTHON_EXECUTABLE
  # The Python executable corresponding to PYTHON_LIBRARY_PATH.
  PYTHON_EXECUTABLE := $(PYTHON_HOME)/bin/python
endif

ifndef PYTHON_COVERAGE_EXECUTABLE
  PYTHON_COVERAGE_EXECUTABLE := $(PYTHON_HOME)/bin/coverage
endif

ifndef PYTHON_LIBRARY
  # Added to LDFLAGS as -l$(PYTHON_LIBRARY) for certain targets.
  PYTHON_LIBRARY := $(PYTHON_VERSION)
endif
PYTHON_LIBRARY_NAME := lib$(PYTHON_LIBRARY).so

ifndef PYTHON_LIBRARY_PATH
  # Added to LDFLAGS as -L$(PYTHON_LIBRARY_PATH) for certain targets.
  ifeq ($(shell [ -d $(PYTHON_HOME)/lib/$(MULTIARCH) ]; echo $$?),0)
    PYTHON_LIBRARY_PATH := $(PYTHON_HOME)/lib/$(MULTIARCH)
  else
    PYTHON_LIBRARY_PATH := $(PYTHON_HOME)/lib
  endif
endif

$(PREFIX)/lib:
	mkdir -p $(PREFIX)/lib
$(PREFIX)/lib/curry : | $(PREFIX)/lib
	mkdir -p $(PREFIX)/lib/curry
$(PREFIX)/lib/curry/.curry : | $(PREFIX)/lib/curry
	mkdir -p $(PREFIX)/lib/curry/.curry

ifndef BOOST_INCLUDE_PATH
  BOOST_INCLUDE_PATH := $(BOOST_HOME)/include
endif

# ifndef BOOST_LIBRARY_PATH
#   ifeq ($(shell [ -d $(BOOST_HOME)/lib/$(MULTIARCH) ]; echo $$?),0)
#     BOOST_LIBRARY_PATH := $(BOOST_HOME)/lib/$(MULTIARCH)
#   else
#     BOOST_LIBRARY_PATH := $(BOOST_HOME)/lib
#   endif
# endif
#
# ifndef BOOST_PYTHON_LIBRARY
#   ifeq ($(shell [ -f $(BOOST_LIBRARY_PATH)/libboost_python27.so ]; echo $$?),0)
#     BOOST_PYTHON_LIBRARY := boost_python27
#   else
#     BOOST_PYTHON_LIBRARY := boost_python
#   endif
# endif

# Functions.
# ==========
define clean_files =
@for f in $1; do if [ -e $$f -o -h $$f ]; then echo $2 $$f; $2 $$f; fi; done
endef

# Compiler flags
# ==============
CFLAGS   += -I$(ROOT_DIR)/src -I$(BOOST_HOME)/include -I$(PYTHON_INCLUDE_PATH) \
            -I$(ROOT_DIR)/extern/pybind11/include

# CFLAGS   += -I$(ROOT_DIR)/src -I$(LLVM_INCLUDE_PATH) -I$(LLVM_C_INCLUDE_PATH) \
#             -I$(BOOST_HOME)/include -I$(PYTHON_INCLUDE_PATH) -I$(ROOT_DIR)/extern/pybind11/include
LDFLAGS  += -L $(PYTHON_LIBRARY_PATH) -Wl,-rpath=$(PYTHON_LIBRARY_PATH)
# LDFLAGS  += -L $(LLVM_LIBRARY_PATH) -L $(PYTHON_LIBRARY_PATH) -L $(BOOST_LIBRARY_PATH) \
#             -Wl,-rpath=$(LLVM_LIBRARY_PATH) -Wl,-rpath=$(PYTHON_LIBRARY_PATH) -Wl,-rpath=$(BOOST_LIBRARY_PATH)

# Recursion
# =========
# For defined submodules (default: all directories) and certain targets,
# recursively invoke make.  By default, all subdirectories are submodules.  To
# change this, submakefiles should set SUBMODULES before including this file.
ifeq ($(flavor SUBMODULES),undefined)
  SUBMODULES = $(dir $(wildcard */.))
endif

RECURSIVE_TARGETS := all clean install libs objs shlibs uninstall test
.PHONY: $(RECURSIVE_TARGETS) $(SUBMODULES)
$(RECURSIVE_TARGETS):: | $(SUBMODULES)
$(SUBMODULES):
	$(MAKE) -C $@ $(MAKECMDGOALS)

# Debugging
# =========
# E.g., print-ROOT_DIR
print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true

# Special rules
# =============
# Make any subdirectory needed under PREFIX or OBJECT_ROOT.
$(PREFIX)/%/ :
	mkdir -p $@
$(OBJECT_ROOT)/%/ :
	mkdir -p $@

include $(ROOT_DIR)/Make.validate
include $(ROOT_DIR)/Make.rules
