# Project variables
# =================
# These have the same value in all makefiles.
ROOT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
OBJECT_ROOT := $(abspath $(ROOT_DIR)/object-root)
include $(ROOT_DIR)/Make.config
ifndef PREFIX
  PREFIX = $(abspath $(ROOT_DIR)/install)
endif

# Derived variables
# =================
# Variables derived from Make.config variables.

ifndef PYTHON_INCLUDE_PATH
  # Added to CFLAGS as -I$(PYTHON_INCLUDE_PATH) for certain targets.
  PYTHON_INCLUDE_PATH := $(PYTHON_HOME)/include/$(PYTHON_VERSION)
endif

ifndef PYTHON_EXECUTABLE
  # The Python executable corresponding to PYTHON_LIBRARY_PATH.
  PYTHON_EXECUTABLE := $(PYTHON_HOME)/bin/python
endif

ifndef PYTHON_COVERAGE_EXECUTABLE
  PYTHON_COVERAGE_EXECUTABLE := $(PYTHON_HOME)/bin/coverage
endif

ifndef CMC_HOME
  CMC_HOME := /home/andy/CMC
endif

ifndef CURRY2JSON
  CURRY2JSON := $(CMC_HOME)/translator/bin/curry2json
endif

ifndef PYTHON_LIBRARY_PATH
  # Added to LDFLAGS as -L$(PYTHON_LIBRARY_PATH) for certain targets.
  # PYTHON_LIBRARY_PATH := /usr/lib/python2.7
  PYTHON_LIBRARY_PATH := $(PYTHON_HOME)/lib
endif

ifndef PYTHON_LIBRARY
  # Added to LDFLAGS as -l$(PYTHON_LIBRARY) for certain targets.
  PYTHON_LIBRARY := $(PYTHON_VERSION)
endif


# Compiler flags
# ==============
CFLAGS   += -I$(ROOT_DIR)/src -I$(LLVM_INCLUDE_PATH) -I$(LLVM_C_INCLUDE_PATH) \
            -I$(BOOST_HOME)/include -I$(PYTHON_INCLUDE_PATH)
LDFLAGS  += -L $(LLVM_LIBRARY_PATH) -L $(PYTHON_LIBRARY_PATH) -L $(BOOST_HOME)/lib \
            -Wl,-rpath=$(LLVM_LIBRARY_PATH) -Wl,-rpath=$(PYTHON_LIBRARY_PATH) -Wl,-rpath=$(BOOST_HOME)/lib

# Usage
# =====
.PHONY: usage
usage: # DEFAULT RULE
	@echo "Usage: make [target ...] [var=value ...]"
	@echo "Build targets:"
	@echo "    all     : compile and link all objects and executables"
	@echo "    clean   : remove generated files"
	@echo "    objs    : compile object files"
	@echo "    libs    : compile and link static libraries"
	@echo "    shlibs  : compile and link shared libraries"
	@echo ""
	@echo "Install targets:"
	@echo "    install PREFIX=<dirname>   : install files under <dirname>"
	@echo "    uninstall PREFIX=<dirname> : uninstall files under <dirname>"
	@echo ""
	@echo "Debug targets:"
	@echo "    print-<varname>: print the value of make variable <varname>"
	@echo ""
	@echo "Example:"
	@echo "    make all"
	@echo "    make install ~/sprite  --install under home directory"
	@echo ""
	@echo "For testing information, please see tests/README."


# Recursion
# =========
# For defined submodules (default: all directories) and certain targets,
# recursively invoke make.
ifndef SUBMODULES
  SUBMODULES = $(dir $(wildcard */.))
endif
RECURSIVE_TARGETS := all clean install libs objs shlibs uninstall test
.PHONY: $(RECURSIVE_TARGETS) $(SUBMODULES)
$(RECURSIVE_TARGETS): | $(SUBMODULES)
$(SUBMODULES):
	$(MAKE) -C $@ $(MAKECMDGOALS)


# Installation checks
# ===================
# Validate PREFIX.
ifndef PREFIX
  # Should never happen
  $(error PREFIX is not defined.  Please specify it when invoking make))
endif
ifneq ($(shell test -d $(PREFIX) -o \! -e $(PREFIX); echo $$?),0)
  $(error PREFIX "$(PREFIX)" exists but is not a directory)
endif
1 = $(shell echo $(PREFIX)) # expand ~
2 = $(shell python -c 'from __future__ import print_function; \
                       import os;                             \
                       print(os.path.isabs("""$1"""))         \
                       ')
ifneq ($(strip $2),True)
  $(error PREFIX must be an absolute path)
endif


# Debugging
# =========
# E.g., print-ROOT_DIR
print-% : ; $(info $* is a $(flavor $*) variable set to [$($*)]) @true

