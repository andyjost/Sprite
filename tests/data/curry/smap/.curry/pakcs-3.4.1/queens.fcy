Prog "queens" ["Prelude","Control.SetFunctions"] [] [Func ("queens","perm") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("queens","perm.ndinsert.4") [Var 2,Comb FuncCall ("queens","perm") [Var 3]])])),Func ("queens","perm.ndinsert.4") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Or (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("queens","perm.ndinsert.4") [Var 1,Var 4]])]) (Comb ConsCall ("Prelude",":") [Var 1,Var 2]))),Func ("queens","queens") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Let [(2,Comb FuncCall ("queens","perm") [Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [Lit (Intc 1),Var 1]])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("queens","queens.unsafe.10") [],Var 2]]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("queens","queens.unsafe.10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]]]]]],Var 1],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Var 4]],Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","length") [Var 3],Lit (Intc 1)]]]))),Func ("queens","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("queens","queens") [Lit (Intc 4)])),Func ("queens","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("queens","queens") [Lit (Intc 6)])),Func ("queens","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("queens","goal1") []))] []