Prog "poker_four_of_a_kind" ["Prelude","Control.SetFunctions"] [Type ("poker_four_of_a_kind","Suit") Public [] [Cons ("poker_four_of_a_kind","Club") 0 Public [],Cons ("poker_four_of_a_kind","Spade") 0 Public [],Cons ("poker_four_of_a_kind","Heart") 0 Public [],Cons ("poker_four_of_a_kind","Diamond") 0 Public []],Type ("poker_four_of_a_kind","Rank") Public [] [Cons ("poker_four_of_a_kind","Ace") 0 Public [],Cons ("poker_four_of_a_kind","King") 0 Public [],Cons ("poker_four_of_a_kind","Queen") 0 Public [],Cons ("poker_four_of_a_kind","Jack") 0 Public [],Cons ("poker_four_of_a_kind","Ten") 0 Public [],Cons ("poker_four_of_a_kind","Nine") 0 Public [],Cons ("poker_four_of_a_kind","Eight") 0 Public [],Cons ("poker_four_of_a_kind","Seven") 0 Public [],Cons ("poker_four_of_a_kind","Six") 0 Public [],Cons ("poker_four_of_a_kind","Five") 0 Public [],Cons ("poker_four_of_a_kind","Four") 0 Public [],Cons ("poker_four_of_a_kind","Three") 0 Public [],Cons ("poker_four_of_a_kind","Two") 0 Public []],Type ("poker_four_of_a_kind","Card") Public [] [Cons ("poker_four_of_a_kind","Card") 2 Public [TCons ("poker_four_of_a_kind","Rank") [],TCons ("poker_four_of_a_kind","Suit") []]]] [Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Suit") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Suit") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") []])])),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") 0 Public (TCons ("poker_four_of_a_kind","Suit") []) (Rule [] (Or (Or (Or (Comb ConsCall ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("poker_four_of_a_kind","Spade") [])) (Comb ConsCall ("poker_four_of_a_kind","Heart") [])) (Comb ConsCall ("poker_four_of_a_kind","Diamond") []))),Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") []])])),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","King") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") 0 Public (TCons ("poker_four_of_a_kind","Rank") []) (Rule [] (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Comb ConsCall ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("poker_four_of_a_kind","King") [])) (Comb ConsCall ("poker_four_of_a_kind","Queen") [])) (Comb ConsCall ("poker_four_of_a_kind","Jack") [])) (Comb ConsCall ("poker_four_of_a_kind","Ten") [])) (Comb ConsCall ("poker_four_of_a_kind","Nine") [])) (Comb ConsCall ("poker_four_of_a_kind","Eight") [])) (Comb ConsCall ("poker_four_of_a_kind","Seven") [])) (Comb ConsCall ("poker_four_of_a_kind","Six") [])) (Comb ConsCall ("poker_four_of_a_kind","Five") [])) (Comb ConsCall ("poker_four_of_a_kind","Four") [])) (Comb ConsCall ("poker_four_of_a_kind","Three") [])) (Comb ConsCall ("poker_four_of_a_kind","Two") []))),Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Card") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card") []])])),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Card") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Card") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") [Var 3,Var 5],Comb FuncCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") [Var 4,Var 6]])])])),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card") 0 Public (TCons ("poker_four_of_a_kind","Card") []) (Rule [] (Comb ConsCall ("poker_four_of_a_kind","Card") [Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Suit") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") [],Comb FuncCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit") []])])),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank") [],Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank") []])])),Func ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") []])),Func ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'k'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude","[]") []]]]])])),Func ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Rank") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb FuncCall ("Prelude","_def#showList#Prelude.Show") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank") []])])),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","King") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Card") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card") [],Comb FuncCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card") []])])),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Card") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Card") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") [Var 3,Var 5],Comb FuncCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") [Var 4,Var 6]])])])),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card") []])),Func ("poker_four_of_a_kind","rank") 1 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("poker_four_of_a_kind","Rank") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Card") [2,3]) (Var 2)])),Func ("poker_four_of_a_kind","isFour_ORGRULES") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb ConsCall ("Prelude","[]") []],Var 3]],Var 1],Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","rank") [],Comb FuncCall ("Prelude","++") [Var 2,Var 3]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))),Func ("poker_four_of_a_kind","isFour_APPLICABLE") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","()") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb ConsCall ("Prelude","[]") []],Var 3]],Var 1],Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","rank") [],Comb FuncCall ("Prelude","++") [Var 2,Var 3]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","()") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))),Func ("poker_four_of_a_kind","isFour_DEFAULT") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","isFour_APPLICABLE") [],Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("poker_four_of_a_kind","isFour") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb FuncCall ("poker_four_of_a_kind","isFour_ORGRULES") [Var 1],Comb FuncCall ("poker_four_of_a_kind","isFour_DEFAULT") [Var 1]])),Func ("poker_four_of_a_kind","main") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []],TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []]]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("poker_four_of_a_kind","isFour") [Comb FuncCall ("poker_four_of_a_kind","testYes") []],Comb FuncCall ("poker_four_of_a_kind","isFour") [Comb FuncCall ("poker_four_of_a_kind","testNo") []]])),Func ("poker_four_of_a_kind","testYes") 0 Public (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Club") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Spade") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Five") [],Comb ConsCall ("poker_four_of_a_kind","Heart") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Heart") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Diamond") []],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("poker_four_of_a_kind","testNo") 0 Public (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Club") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Ace") [],Comb ConsCall ("poker_four_of_a_kind","Spade") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Five") [],Comb ConsCall ("poker_four_of_a_kind","Heart") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Ace") [],Comb ConsCall ("poker_four_of_a_kind","Club") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Diamond") []],Comb ConsCall ("Prelude","[]") []]]]]]))] []