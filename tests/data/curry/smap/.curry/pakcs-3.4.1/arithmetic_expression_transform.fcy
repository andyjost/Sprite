Prog "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [Type ("arithmetic_expression_transform","Exp") Public [] [Cons ("arithmetic_expression_transform","Lit") 1 Public [TCons ("Prelude","Int") []],Cons ("arithmetic_expression_transform","Var") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("arithmetic_expression_transform","Add") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []],Cons ("arithmetic_expression_transform","Mul") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []]]] [Func ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("arithmetic_expression_transform","Exp") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []])])),Func ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") 2 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("arithmetic_expression_transform","Lit") [3]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 3],Var 4]),Branch (Pattern ("arithmetic_expression_transform","Var") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [6,7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [8,9]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Var") [10]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [12]) (Comb FuncCall ("Prelude","_impl#===#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") [],Var 10,Var 12]),Branch (Pattern ("arithmetic_expression_transform","Add") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [15,16]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Add") [17,18]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [21,22]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 17,Var 21],Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 18,Var 22]]),Branch (Pattern ("arithmetic_expression_transform","Mul") [23,24]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Mul") [25,26]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [29,30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [31,32]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 25,Var 31],Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 26,Var 32]])])])),Func ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Or (Or (Or (Comb ConsCall ("arithmetic_expression_transform","Lit") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") []]) (Comb ConsCall ("arithmetic_expression_transform","Var") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") []]])) (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []])) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []]))),Func ("arithmetic_expression_transform","exp1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)],Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Var") [Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)]]])),Func ("arithmetic_expression_transform","replace") 3 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 1) [Branch (Pattern ("arithmetic_expression_transform","Add") [6,7]) (Case Flex (Var 4) [Branch (LPattern (Intc 1)) (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb FuncCall ("arithmetic_expression_transform","replace") [Var 6,Var 5,Var 3],Var 7]),Branch (LPattern (Intc 2)) (Comb ConsCall ("arithmetic_expression_transform","Add") [Var 6,Comb FuncCall ("arithmetic_expression_transform","replace") [Var 7,Var 5,Var 3]])]),Branch (Pattern ("arithmetic_expression_transform","Mul") [8,9]) (Case Flex (Var 4) [Branch (LPattern (Intc 1)) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb FuncCall ("arithmetic_expression_transform","replace") [Var 8,Var 5,Var 3],Var 9]),Branch (LPattern (Intc 2)) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Var 8,Comb FuncCall ("arithmetic_expression_transform","replace") [Var 9,Var 5,Var 3]])])])])),Func ("arithmetic_expression_transform","evalTo") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)],Var 1],Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Add") [Var 1,Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)],Var 1],Comb ConsCall ("arithmetic_expression_transform","Mul") [Var 1,Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)]]]]])),Func ("arithmetic_expression_transform","simplify") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","replace") [Var 2,Var 3,Comb FuncCall ("arithmetic_expression_transform","evalTo") [Var 4]],Var 1],Comb FuncCall ("arithmetic_expression_transform","replace") [Var 2,Var 3,Var 4]]))),Func ("arithmetic_expression_transform","main0") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","simplify") [Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","simplifyAll") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Let [(2,Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","simplify") [],Var 1])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("arithmetic_expression_transform","simplifyAll") [Comb FuncCall ("Control.SetFunctions","selectValue") [Var 2]])]))),Func ("arithmetic_expression_transform","main1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","simplifyAll") [Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","varInExp") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","replace") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb ConsCall ("arithmetic_expression_transform","Var") [Var 2]],Var 1],Var 2]))),Func ("arithmetic_expression_transform","exp2") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Var") [Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","allVars") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []]],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","varInExp") [],Var 1]])),Func ("arithmetic_expression_transform","main2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","allVars") [Comb FuncCall ("arithmetic_expression_transform","exp2") []]))] []