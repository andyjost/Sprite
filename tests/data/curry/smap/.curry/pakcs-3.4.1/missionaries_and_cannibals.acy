{- AbstractCurry 3.0 -}
CurryProg "missionaries_and_cannibals"
[]
Nothing
 []
 []
 [CType ("missionaries_and_cannibals","State") Public [] [CCons ("missionaries_and_cannibals","State") Public [CTCons ("Prelude","Int"),CTCons ("Prelude","Int"),CTCons ("Prelude","Bool")]] [("Prelude","Eq")],
  CTypeSyn ("missionaries_and_cannibals","Path") Public [] (CTApply (CTCons ("Prelude","[]")) (CTCons ("missionaries_and_cannibals","State")))]
 [CFunc ("missionaries_and_cannibals","M") 0 Public (CQualType (CContext [(("Prelude","Num"),CTVar (0,"a"))]) (CTVar (0,"a"))) [CRule [] (CSimpleRhs (CLit (CIntc 2)) [])],
  CFunc ("missionaries_and_cannibals","C") 0 Public (CQualType (CContext [(("Prelude","Num"),CTVar (0,"a"))]) (CTVar (0,"a"))) [CRule [] (CSimpleRhs (CLit (CIntc 1)) [])],
  CFunc ("missionaries_and_cannibals","makeState") 3 Public (CQualType (CContext []) (CFuncType (CTCons ("Prelude","Int")) (CFuncType (CTCons ("Prelude","Int")) (CFuncType (CTCons ("Prelude","Bool")) (CTCons ("missionaries_and_cannibals","State")))))) [CRule [CPVar (0,"m"),CPVar (1,"c"),CPVar (2,"l")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","&&")) (CVar (3,"valid"))) (CVar (4,"safe")),CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","State")) (CVar (0,"m"))) (CVar (1,"c"))) (CVar (2,"l")))] [CLocalPat (CPVar (3,"valid")) (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","<=")) (CLit (CIntc 0))) (CVar (0,"m")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (0,"m"))) (CSymbol ("missionaries_and_cannibals","M")))) (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","<=")) (CLit (CIntc 0))) (CVar (1,"c")))) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (1,"c"))) (CSymbol ("missionaries_and_cannibals","C")))))) []),CLocalPat (CPVar (4,"safe")) (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","&&")) (CApply (CApply (CSymbol ("Prelude","<=")) (CVar (1,"c"))) (CVar (0,"m")))) (CApply (CApply (CSymbol ("Prelude","<=")) (CApply (CApply (CSymbol ("Prelude","-")) (CSymbol ("missionaries_and_cannibals","C"))) (CVar (1,"c")))) (CApply (CApply (CSymbol ("Prelude","-")) (CSymbol ("missionaries_and_cannibals","M"))) (CVar (0,"m"))))) [])])],
  CFunc ("missionaries_and_cannibals","start") 0 Public (CQualType (CContext []) (CTCons ("missionaries_and_cannibals","State"))) [CRule [] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CSymbol ("missionaries_and_cannibals","M"))) (CSymbol ("missionaries_and_cannibals","C"))) (CSymbol ("Prelude","True"))) [])],
  CFunc ("missionaries_and_cannibals","end") 0 Public (CQualType (CContext []) (CTCons ("missionaries_and_cannibals","State"))) [CRule [] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CLit (CIntc 0))) (CLit (CIntc 0))) (CSymbol ("Prelude","False"))) [])],
  CFunc ("missionaries_and_cannibals","move") 1 Public (CQualType (CContext []) (CFuncType (CTCons ("missionaries_and_cannibals","State")) (CTCons ("missionaries_and_cannibals","State")))) [CRule [CPComb ("missionaries_and_cannibals","State") [CPVar (0,"m"),CPVar (1,"c"),CPComb ("Prelude","True") []]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"m"))) (CLit (CIntc 1)))) (CVar (1,"c"))) (CSymbol ("Prelude","False")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"m"))) (CLit (CIntc 2)))) (CVar (1,"c"))) (CSymbol ("Prelude","False")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CVar (0,"m"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"c"))) (CLit (CIntc 1)))) (CSymbol ("Prelude","False")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CVar (0,"m"))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"c"))) (CLit (CIntc 2)))) (CSymbol ("Prelude","False")))) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (0,"m"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude","-")) (CVar (1,"c"))) (CLit (CIntc 1)))) (CSymbol ("Prelude","False"))))))) []),CRule [CPComb ("missionaries_and_cannibals","State") [CPVar (2,"m"),CPVar (3,"c"),CPComb ("Prelude","False") []]] (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"m"))) (CLit (CIntc 1)))) (CVar (3,"c"))) (CSymbol ("Prelude","True")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"m"))) (CLit (CIntc 2)))) (CVar (3,"c"))) (CSymbol ("Prelude","True")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CVar (2,"m"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"c"))) (CLit (CIntc 1)))) (CSymbol ("Prelude","True")))) (CApply (CApply (CSymbol ("Prelude","?")) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CVar (2,"m"))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"c"))) (CLit (CIntc 2)))) (CSymbol ("Prelude","True")))) (CApply (CApply (CApply (CSymbol ("missionaries_and_cannibals","makeState")) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (2,"m"))) (CLit (CIntc 1)))) (CApply (CApply (CSymbol ("Prelude","+")) (CVar (3,"c"))) (CLit (CIntc 1)))) (CSymbol ("Prelude","True"))))))) [])],
  CFunc ("missionaries_and_cannibals","makePath") 2 Public (CQualType (CContext []) (CFuncType (CTCons ("missionaries_and_cannibals","State")) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTCons ("missionaries_and_cannibals","State"))) (CTApply (CTCons ("Prelude","[]")) (CTCons ("missionaries_and_cannibals","State")))))) [CRule [CPVar (0,"s"),CPVar (1,"p")] (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","&&")) (CVar (2,"valid"))) (CVar (3,"noCycle")),CApply (CApply (CSymbol ("Prelude",":")) (CVar (0,"s"))) (CVar (1,"p")))] [CLocalPat (CPVar (2,"valid")) (CGuardedRhs [(CApply (CApply (CSymbol ("Prelude","=:=")) (CVar (0,"s"))) (CApply (CSymbol ("missionaries_and_cannibals","move")) (CApply (CSymbol ("Prelude","head")) (CVar (1,"p")))),CSymbol ("Prelude","True"))] []),CLocalPat (CPVar (3,"noCycle")) (CSimpleRhs (CApply (CApply (CSymbol ("Prelude","all")) (CApply (CSymbol ("Prelude","/=")) (CVar (0,"s")))) (CVar (1,"p"))) [])])],
  CFunc ("missionaries_and_cannibals","extend") 1 Public (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTCons ("missionaries_and_cannibals","State"))) (CTApply (CTCons ("Prelude","[]")) (CTCons ("missionaries_and_cannibals","State"))))) [CRule [CPVar (0,"p")] (CSimpleRhs (CApply (CApply (CApply (CSymbol ("Prelude","ifThenElse")) (CApply (CApply (CSymbol ("Prelude","==")) (CApply (CSymbol ("Prelude","head")) (CVar (0,"p")))) (CSymbol ("missionaries_and_cannibals","end")))) (CVar (0,"p"))) (CApply (CSymbol ("missionaries_and_cannibals","extend")) (CApply (CApply (CSymbol ("missionaries_and_cannibals","makePath")) (CSymbol ("Prelude","unknown"))) (CVar (0,"p"))))) [])],
  CFunc ("missionaries_and_cannibals","main") 0 Public (CQualType (CContext []) (CTApply (CTCons ("Prelude","[]")) (CTCons ("missionaries_and_cannibals","State")))) [CRule [] (CSimpleRhs (CApply (CSymbol ("missionaries_and_cannibals","extend")) (CApply (CApply (CSymbol ("Prelude",":")) (CSymbol ("missionaries_and_cannibals","start"))) (CSymbol ("Prelude","[]")))) [])]]
 []
