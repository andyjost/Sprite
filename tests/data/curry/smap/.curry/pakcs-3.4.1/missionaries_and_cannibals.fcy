Prog "missionaries_and_cannibals" ["Prelude"] [Type ("missionaries_and_cannibals","State") Public [] [Cons ("missionaries_and_cannibals","State") 3 Public [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Bool") []]]] [Func ("missionaries_and_cannibals","_inst#Prelude.Data#missionaries_and_cannibals.State") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("missionaries_and_cannibals","State") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("missionaries_and_cannibals","_impl#===#Prelude.Data#missionaries_and_cannibals.State") [],Comb FuncCall ("missionaries_and_cannibals","_impl#aValue#Prelude.Data#missionaries_and_cannibals.State") []])])),Func ("missionaries_and_cannibals","_impl#===#Prelude.Data#missionaries_and_cannibals.State") 2 Public (FuncType (TCons ("missionaries_and_cannibals","State") []) (FuncType (TCons ("missionaries_and_cannibals","State") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("missionaries_and_cannibals","State") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("missionaries_and_cannibals","State") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 3],Var 6],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 4],Var 7]],Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Bool") [Var 5,Var 8]])])])),Func ("missionaries_and_cannibals","_impl#aValue#Prelude.Data#missionaries_and_cannibals.State") 0 Public (TCons ("missionaries_and_cannibals","State") []) (Rule [] (Comb ConsCall ("missionaries_and_cannibals","State") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Bool") []])),Func ("missionaries_and_cannibals","_inst#Prelude.Eq#missionaries_and_cannibals.State") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("missionaries_and_cannibals","State") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("missionaries_and_cannibals","_impl#==#Prelude.Eq#missionaries_and_cannibals.State") [],Comb FuncCall ("missionaries_and_cannibals","_impl#/=#Prelude.Eq#missionaries_and_cannibals.State") []])])),Func ("missionaries_and_cannibals","_impl#==#Prelude.Eq#missionaries_and_cannibals.State") 2 Public (FuncType (TCons ("missionaries_and_cannibals","State") []) (FuncType (TCons ("missionaries_and_cannibals","State") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("missionaries_and_cannibals","State") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("missionaries_and_cannibals","State") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 3,Var 6],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 4,Var 7]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Var 5,Var 8]])])])),Func ("missionaries_and_cannibals","_impl#/=#Prelude.Eq#missionaries_and_cannibals.State") 0 Public (FuncType (TCons ("missionaries_and_cannibals","State") []) (FuncType (TCons ("missionaries_and_cannibals","State") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("missionaries_and_cannibals","_inst#Prelude.Eq#missionaries_and_cannibals.State") []])),Func ("missionaries_and_cannibals","M") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 2)])),Func ("missionaries_and_cannibals","C") 1 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)])),Func ("missionaries_and_cannibals","makeState") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("missionaries_and_cannibals","State") [])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 0),Var 1],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Comb FuncCall ("missionaries_and_cannibals","M") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Lit (Intc 0),Var 2],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 2,Comb FuncCall ("missionaries_and_cannibals","C") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]]]]),(5,Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 2,Var 1],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Comb FuncCall ("missionaries_and_cannibals","C") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Var 2],Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Comb FuncCall ("missionaries_and_cannibals","M") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Var 1]]])] (Case Rigid (Comb FuncCall ("Prelude","&&") [Var 4,Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("missionaries_and_cannibals","State") [Var 1,Var 2,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("missionaries_and_cannibals","start") 0 Public (TCons ("missionaries_and_cannibals","State") []) (Rule [] (Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("missionaries_and_cannibals","M") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb FuncCall ("missionaries_and_cannibals","C") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb ConsCall ("Prelude","True") []])),Func ("missionaries_and_cannibals","end") 0 Public (TCons ("missionaries_and_cannibals","State") []) (Rule [] (Comb FuncCall ("missionaries_and_cannibals","makeState") [Lit (Intc 0),Lit (Intc 0),Comb ConsCall ("Prelude","False") []])),Func ("missionaries_and_cannibals","move") 1 Public (FuncType (TCons ("missionaries_and_cannibals","State") []) (TCons ("missionaries_and_cannibals","State") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("missionaries_and_cannibals","State") [2,3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)],Var 3,Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 2)],Var 3,Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Var 2,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 1)],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Var 2,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 2)],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)],Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 1)],Comb ConsCall ("Prelude","False") []]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)],Var 3,Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 2)],Var 3,Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Var 2,Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 1)],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","?") [Comb FuncCall ("missionaries_and_cannibals","makeState") [Var 2,Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 2)],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("missionaries_and_cannibals","makeState") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)],Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 1)],Comb ConsCall ("Prelude","True") []]]]]])])])),Func ("missionaries_and_cannibals","makePath") 2 Public (FuncType (TCons ("missionaries_and_cannibals","State") []) (FuncType (TCons ("Prelude","[]") [TCons ("missionaries_and_cannibals","State") []]) (TCons ("Prelude","[]") [TCons ("missionaries_and_cannibals","State") []]))) (Rule [1,2] (Let [(3,Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("missionaries_and_cannibals","_inst#Prelude.Data#missionaries_and_cannibals.State") [],Var 1,Comb FuncCall ("missionaries_and_cannibals","move") [Comb FuncCall ("Prelude","head") [Var 2]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]),(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("missionaries_and_cannibals","_impl#/=#Prelude.Eq#missionaries_and_cannibals.State") [],Var 1]],Var 2])] (Case Rigid (Comb FuncCall ("Prelude","&&") [Var 3,Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 1,Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("missionaries_and_cannibals","extend") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("missionaries_and_cannibals","State") []]) (TCons ("Prelude","[]") [TCons ("missionaries_and_cannibals","State") []])) (Rule [1] (Case Rigid (Comb FuncCall ("missionaries_and_cannibals","_impl#==#Prelude.Eq#missionaries_and_cannibals.State") [Comb FuncCall ("Prelude","head") [Var 1],Comb FuncCall ("missionaries_and_cannibals","end") []]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("missionaries_and_cannibals","extend") [Comb FuncCall ("missionaries_and_cannibals","makePath") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("missionaries_and_cannibals","_inst#Prelude.Data#missionaries_and_cannibals.State") []],Var 1]])])),Func ("missionaries_and_cannibals","main") 0 Public (TCons ("Prelude","[]") [TCons ("missionaries_and_cannibals","State") []]) (Rule [] (Comb FuncCall ("missionaries_and_cannibals","extend") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("missionaries_and_cannibals","start") [],Comb ConsCall ("Prelude","[]") []]]))] []