(IProg "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [(IDataType ("arithmetic_expression_transform","Exp",0) [(("arithmetic_expression_transform","Lit",0),1),(("arithmetic_expression_transform","Var",1),1),(("arithmetic_expression_transform","Add",2),2),(("arithmetic_expression_transform","Mul",3),2)])] [(IFunction ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) 2 []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE0",17) [(IVar 2),(IVar 3)])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 1 [0]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE1",16) [(IVar 2),(IVar 10)])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 17),(IVarDecl 18)] [(IVarAssign 17 (IVarAccess 1 [0])),(IVarAssign 18 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE2",15) [(IVar 2),(IVar 17),(IVar 18)])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 25),(IVarDecl 26)] [(IVarAssign 25 (IVarAccess 1 [0])),(IVarAssign 26 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE3",14) [(IVar 2),(IVar 25),(IVar 26)]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE3",14) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 25),(IVarDecl 26)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 25 (IVarAccess 0 [1])),(IVarAssign 26 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 31),(IVarDecl 32)] [(IVarAssign 31 (IVarAccess 2 [0])),(IVarAssign 32 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 25),(IVar 31)]),(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 26),(IVar 32)])]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE2",15) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 17),(IVarDecl 18)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 17 (IVarAccess 0 [1])),(IVarAssign 18 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 21),(IVarDecl 22)] [(IVarAssign 21 (IVarAccess 2 [0])),(IVarAssign 22 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 17),(IVar 21)]),(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 18),(IVar 22)])])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE1",16) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 10)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 10 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","_impl#===#Prelude.Data#[]",12) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Char",2) 1 []),(IVar 10),(IVar 12)])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE0",17) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int",6) []),(IVar 3)]),(IVar 4)])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("arithmetic_expression_transform","Lit",0) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int",7) [])]) (ICCall ("arithmetic_expression_transform","Var",1) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#[]",13) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Char",2) 1 [])])])) (ICCall ("arithmetic_expression_transform","Add",2) [(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])])) (ICCall ("arithmetic_expression_transform","Mul",3) [(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])])))))),(IFunction ("arithmetic_expression_transform","exp1",3) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))]),(ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Var",1) [(ICCall ("Prelude",":",1) [(ILit (IChar 'x')),(ICCall ("Prelude","[]",0) [])])]),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))])])]))))),(IFunction ("arithmetic_expression_transform","replace",4) 3 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (IVar 3)))),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 2 [0])),(IVarAssign 5 (IVarAccess 2 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE0",18) [(IVar 1),(IVar 4),(IVar 5),(IVar 3)]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE0",18) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 4),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1])),(IVarAssign 5 (IVarAccess 0 [2])),(IVarAssign 3 (IVarAccess 0 [3]))] (ICaseCons 1 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] IExempt)),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] IExempt)),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 6),(IVarDecl 7)] [(IVarAssign 6 (IVarAccess 1 [0])),(IVarAssign 7 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE1",20) [(IVar 4),(IVar 6),(IVar 7),(IVar 5),(IVar 3)])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 8 (IVarAccess 1 [0])),(IVarAssign 9 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE2",19) [(IVar 4),(IVar 8),(IVar 9),(IVar 5),(IVar 3)]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE2",19) 5 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 8),(IVarDecl 9),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1])),(IVarAssign 9 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3])),(IVarAssign 3 (IVarAccess 0 [4]))] (ICaseLit 4 [(ILitBranch (IInt 1) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 8),(IVar 5),(IVar 3)]),(IVar 9)])))),(ILitBranch (IInt 2) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(IVar 8),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 9),(IVar 5),(IVar 3)])]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE1",20) 5 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 6),(IVarDecl 7),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1])),(IVarAssign 7 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3])),(IVarAssign 3 (IVarAccess 0 [4]))] (ICaseLit 4 [(ILitBranch (IInt 1) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 6),(IVar 5),(IVar 3)]),(IVar 7)])))),(ILitBranch (IInt 2) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(IVar 6),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 7),(IVar 5),(IVar 3)])]))))])))),(IFunction ("arithmetic_expression_transform","evalTo",5) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IOr (ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))]),(IVar 1)]) (IOr (ICCall ("arithmetic_expression_transform","Add",2) [(IVar 1),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))])]) (IOr (ICCall ("arithmetic_expression_transform","Mul",3) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))]),(IVar 1)]) (ICCall ("arithmetic_expression_transform","Mul",3) [(IVar 1),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))])])))))))),(IFunction ("arithmetic_expression_transform","simplify",6) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 []),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 2),(IVar 3),(IFCall ("arithmetic_expression_transform","evalTo",5) [(IVar 4)])]),(IVar 1)]),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 2),(IVar 3),(IVar 4)])]))))),(IFunction ("arithmetic_expression_transform","main0",7) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplify",6) [(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","simplifyAll",8) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("arithmetic_expression_transform","simplify",6) 1 []),(IVar 1)]))] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll_COMPLEXCASE0",21) [(IVar 2),(IVar 1),(IFCall ("Control.SetFunctions","isEmpty",20) [(IVar 2)])]))))),(IFunction ("arithmetic_expression_transform","simplifyAll_COMPLEXCASE0",21) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll",8) [(IFCall ("Control.SetFunctions","selectValue",26) [(IVar 2)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 1))))])))),(IFunction ("arithmetic_expression_transform","main1",9) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll",8) [(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","varInExp",10) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 []),(IFCall ("arithmetic_expression_transform","replace",4) [(IFCall ("Prelude","unknown",757) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(ICCall ("arithmetic_expression_transform","Var",1) [(IVar 2)])]),(IVar 1)]),(IVar 2)]))))),(IFunction ("arithmetic_expression_transform","exp2",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Var",1) [(ICCall ("Prelude",":",1) [(ILit (IChar 'y')),(ICCall ("Prelude","[]",0) [])])]),(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","allVars",12) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#[]",141) 1 [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Char",77) 1 [])])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("arithmetic_expression_transform","varInExp",10) 1 []),(IVar 1)])]))))),(IFunction ("arithmetic_expression_transform","main2",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","allVars",12) [(IFCall ("arithmetic_expression_transform","exp2",11) [])])))))])