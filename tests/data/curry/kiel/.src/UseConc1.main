def step(lhs):
  lhs.Node(ni__lp__com__com__rp_, Node(ni_goal1, Node(ni__inst_hsh_Prelude_dot_Num_hsh_Prelude_dot_Int)), Node(ni_goal2, Node(ni__inst_hsh_Prelude_dot_Num_hsh_Prelude_dot_Int)), Node(ni_goal3, Node(ni__inst_hsh_Prelude_dot_Num_hsh_Prelude_dot_Int)))
  return


# This file was created by Sprite because UseConc1.main was compiled in
# debug mode.  It exists to help PDB show the compiled code.

# Closure:
# { 'Node': <class 'curry.interpreter.runtime.Node'>,
#   'ni__inst_hsh_Prelude_dot_Num_hsh_Prelude_dot_Int': InfoTable(name=_inst#Prelude.Num#Prelude.Int, arity=0, tag=-1, _step=(<function compile_function at 0x7f39a9ec42a8>, <curry.interpreter.interpreter.Interpreter object at 0x7f39a5337c90>, IFunction(ident='Prelude._inst#Prelude.Num#Prelude.Int', arity=0, code=(Return(expr=Applic(ident='Prelude._Dict#Num', args=(PartApplic(missing=2, expr=Applic(ident='Prelude._impl#+#Prelude.Num#Prelude.Int', args=())), PartApplic(missing=2, expr=Applic(ident='Prelude._impl#-#Prelude.Num#Prelude.Int', args=())), PartApplic(missing=2, expr=Applic(ident='Prelude._impl#*#Prelude.Num#Prelude.Int', args=())), PartApplic(missing=1, expr=Applic(ident='Prelude._impl#negate#Prelude.Num#Prelude.Int', args=())), PartApplic(missing=1, expr=Applic(ident='Prelude._impl#abs#Prelude.Num#Prelude.Int', args=())), PartApplic(missing=1, expr=Applic(ident='Prelude._impl#signum#Prelude.Num#Prelude.Int', args=())), PartApplic(missing=1, expr=Applic(ident='Prelude._impl#fromInt#Prelude.Num#Prelude.Int', args=()))))),)), IModule(name='Prelude', imports=(), types=OrderedDict([('Prelude._Failure', IType(ident='Prelude._Failure', constructors=[IConstructor(ident='Prelude._Failure', arity=0)])), ('Prelude._Constraint', IType(ident='Prelude._Constraint', constructors=[IConstructor(ident='Prelude._EqVars', arity=2), IConstructor(ident='Prelude._EqChoices', arity=2), IConstructor(ident='Prelude._ChoiceConstr', arity=2)])), ('Prelude._Free', IType(ident='Prelude._Free', constructors=[IConstructor(ident='Prelude._Free', arity=2)])), ('Prelude._Fwd', IType(ident='Prelude._Fwd', constructors=[IConstructor(ident='Prelude._Fwd', arity=1)])), ('Prelude._Choice', IType(ident='Prelude._Choice', constructors=[IConstructor(ident='Prelude._Choice', arity=3)])), ('Prelude._PartApplic', IType(ident='Prelude._PartApplic', constructors=[IConstructor(ident='Prelude._PartApplic', arity=2)])), ('Prelude.Bool', IType(ident='Prelude.Bool', constructors=[IConstructor(ident='Prelude.True', arity=0), IConstructor(ident='Prelude.False', arity=0)])), ('Prelude.Char', IType(ident='Prelude.Char', constructors=[IConstructor(ident='Prelude.Char', arity=1)])), ('Prelude.Float', IType(ident='Prelude.Float', constructors=[IConstructor(ident='Prelude.Float', arity=1)])), ('Prelude.Int', IType(ident='Prelude.Int', constructors=[IConstructor(ident='Prelude.Int', arity=1)])), ('Prelude.IO', IType(ident='Prelude.IO', constructors=[IConstructor(ident='Prelude.IO', arity=1)])), ('Prelude.(->)', IType(ident='Prelude.(->)', constructors=[IConstructor(ident='Prelude.->', arity=2)])), ('Prelude.[]', IType(ident='Prelude.[]', constructors=[IConstructor(ident='Prelude.:', arity=2), IConstructor(ident='Prelude.[]', arity=0)])), ('Prelude.()', IType(ident='Prelude.()', constructors=[IConstructor(ident='Prelude.()', arity=0)])), ('Prelude.(,)', IType(ident='Prelude.(,)', constructors=[IConstructor(ident='Prelude.(,)', arity=2)])), ('Prelude.(,,)', IType(ident='Prelude.(,,)', constructors=[IConstructor(ident='Prelude.(,,)', arity=3)])), ('Prelude.(,,,)', IType(ident='Prelude.(,,,)', constructors=[IConstructor(ident='Prelude.(,,,)', arity=4)])), ('Prelude.(,,,,)', IType(ident='Prelude.(,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,)', arity=5)])), ('Prelude.(,,,,,)', IType(ident='Prelude.(,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,)', arity=6)])), ('Prelude.(,,,,,,)', IType(ident='Prelude.(,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,)', arity=7)])), ('Prelude.(,,,,,,,)', IType(ident='Prelude.(,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,)', arity=8)])), ('Prelude.(,,,,,,,,)', IType(ident='Prelude.(,,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,,)', arity=9)])), ('Prelude.(,,,,,,,,,)', IType(ident='Prelude.(,,,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,,,)', arity=10)])), ('Prelude.(,,,,,,,,,,)', IType(ident='Prelude.(,,,,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,,,,)', arity=11)])), ('Prelude.(,,,,,,,,,,,)', IType(ident='Prelude.(,,,,,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,,,,,)', arity=12)])), ('Prelude.(,,,,,,,,,,,,)', IType(ident='Prelude.(,,,,,,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,,,,,,)', arity=13)])), ('Prelude.(,,,,,,,,,,,,,)', IType(ident='Prelude.(,,,,,,,,,,,,,)', constructors=[IConstructor(ident='Prelude.(,,,,,,,,,,,,,)', arity=14)]))]), functions=OrderedDict([('Prelude._PyGenerator', IFunction(ident='Prelude._PyGenerator', arity=1, code=())), ('Prelude.+$', IFunction(ident='Prelude.+$', arity=2, code=())), ('Prelude.-$', IFunction(ident='Prelude.-$', arity=2, code=())), ('Prelude.*$', IFunction(ident='Prelude.*$', arity=2, code=())), ('Prelude.prim_Float_plus', IFunction(ident='Prelude.prim_Float_plus', arity=2, code=())), ('Prelude.prim_Float_minus', IFunction(ident='Prelude.prim_Float_minus', arity=2, code=())), ('Prelude.prim_Float_times', IFunction(ident='Prelude.prim_Float_times', arity=2, code=())), ('Prelude.prim_Float_div', IFunction(ident='Prelude.prim_Float_div', arity=2, code=())), ('Prelude.eqInt', IFunction(ident='Prelude.eqInt', arity=2, code=())), ('Prelude.eqChar', IFunction(ident='Prelude.eqChar', arity=2, code=())), ('Prelude.eqFloat', IFunction(ident='Prelude.eqFloat', arity=2, code=())), ('Prelude.ltEqInt', IFunction(ident='Prelude.ltEqInt', arity=2, code=())), ('Prelude.ltEqChar', IFunction(ident='Prelude.ltEqChar', arity=2, code=())), ('Prelude.ltEqFloat', IFunction(ident='Prelude.ltEqFloat', arity=2, code=())), ('Prelude.div_', IFunction(ident='Prelude.div_', arity=2, code=())), ('Prelude.mod_', IFunction(ident='Prelude.mod_', arity=2, code=())), ('Prelude.quot_', IFunction(ident='Prelude.quot_', arity=2, code=())), ('Prelude.rem_', IFunction(ident='Prelude.rem_', arity=2, code=())), ('Prelude.divMod_', IFunction(ident='Prelude.divMod_', arity=2, code=())), ('Prelude.quotRem_', IFunction(ident='Prelude.quotRem_', arity=2, code=())), ('Prelude.negateFloat', IFunction(ident='Prelude.negateFloat', arity=1, code=())), ('Prelude.ensureNotFree', IFunction(ident='Prelude.ensureNotFree', arity=1, code=())), ('Prelude.$!', IFunction(ident='Prelude.$!', arity=2, code=())), ('Prelude.$!!', IFunction(ident='Prelude.$!!', arity=2, code=())), ('Prelude.$##', IFunction(ident='Prelude.$##', arity=2, code=())), ('Prelude.prim_error', IFunction(ident='Prelude.prim_error', arity=1, code=())), ('Prelude.failed', IFunction(ident='Prelude.failed', arity=0, code=())), ('Prelude.=:=', IFunction(ident='Prelude.=:=', arity=2, code=())), ('Prelude.&', IFunction(ident='Prelude.&', arity=2, code=())), ('Prelude.prim_ord', IFunction(ident='Prelude.prim_ord', arity=1, code=())), ('Prelude.prim_chr', IFunction(ident='Prelude.prim_chr', arity=1, code=())), ('Prelude.prim_i2f', IFunction(ident='Prelude.prim_i2f', arity=1, code=())), ('Prelude.>>=$', IFunction(ident='Prelude.>>=$', arity=2, code=())), ('Prelude.prim_readNatLiteral', IFunction(ident='Prelude.prim_readNatLiteral', arity=1, code=())), ('Prelude.prim_readFloatLiteral', IFunction(ident='Prelude.prim_readFloatLiteral', arity=1, code=())), ('Prelude.prim_readCharLiteral', IFunction(ident='Prelude.prim_readCharLiteral', arity=1, code=())), ('Prelude.prim_readStringLiteral', IFunction(ident='Prelude.prim_readStringLiteral', arity=1, code=())), ('Prelude.returnIO', IFunction(ident='Prelude.returnIO', arity=1, code=())), ('Prelude.prim_putChar', IFunction(ident='Prelude.prim_putChar', arity=1, code=())), ('Prelude.getChar', IFunction(ident='Prelude.getChar', arity=0, code=())), ('Prelude.prim_readFile', IFunction(ident='Prelude.prim_readFile', arity=1, code=())), ('Prelude.?', IFunction(ident='Prelude.?', arity=2, code=())), ('Prelude.apply', IFunction(ident='Prelude.apply', arity=2, code=()))]))), show=<curry.interpreter.show.Show object at 0x7f39a3d9a550>, typecheck=None, typedef=None),
#   'ni__lp__com__com__rp_': InfoTable(name=(,,), arity=3, tag=0, _step=<function _no_step at 0x7f39a53065f0>, show=<curry.interpreter.show.Show object at 0x7f39a2c36e10>, typecheck=None, typedef=<weakref at 0x7f39a49ee470; to 'TypeDefinition' at 0x7f39a2c36e50>),
#   'ni_goal1': InfoTable(name=goal1, arity=1, tag=-1, _step=(<function compile_function at 0x7f39a9ec42a8>, <curry.interpreter.interpreter.Interpreter object at 0x7f39a5337c90>, IFunction(ident='UseConc1.goal1', arity=1, code=(Declare(var=Variable(vid=1, scope=ILhs(index=Successor(headsymbol='UseConc1.goal1', position=1)))), Return(expr=Applic(ident='ModConc..+.', args=(Applic(ident='Prelude.:', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))), Applic(ident='Prelude.[]', args=()))), Applic(ident='Prelude.:', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.+', args=(Reference(vid=1),)), Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))))), Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))))), Applic(ident='Prelude.[]', args=())))))))), None), show=<curry.interpreter.show.Show object at 0x7f39a50fccd0>, typecheck=None, typedef=None),
#   'ni_goal2': InfoTable(name=goal2, arity=1, tag=-1, _step=(<function compile_function at 0x7f39a9ec42a8>, <curry.interpreter.interpreter.Interpreter object at 0x7f39a5337c90>, IFunction(ident='UseConc1.goal2', arity=1, code=(Declare(var=Variable(vid=1, scope=ILhs(index=Successor(headsymbol='UseConc1.goal2', position=1)))), Return(expr=Applic(ident='ModConc..+.', args=(Applic(ident='Prelude.:', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))), Applic(ident='Prelude.[]', args=()))), Applic(ident='Prelude.:', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.+', args=(Reference(vid=1),)), Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))))), Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))))), Applic(ident='Prelude.[]', args=())))))))), None), show=<curry.interpreter.show.Show object at 0x7f39a50fdd90>, typecheck=None, typedef=None),
#   'ni_goal3': InfoTable(name=goal3, arity=1, tag=-1, _step=(<function compile_function at 0x7f39a9ec42a8>, <curry.interpreter.interpreter.Interpreter object at 0x7f39a5337c90>, IFunction(ident='UseConc1.goal3', arity=1, code=(Declare(var=Variable(vid=1, scope=ILhs(index=Successor(headsymbol='UseConc1.goal3', position=1)))), Return(expr=Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.apply', args=(Applic(ident='ModConc.conc', args=()), Applic(ident='Prelude.:', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(1,)))), Applic(ident='Prelude.[]', args=()))))), Applic(ident='Prelude.:', args=(Applic(ident='Prelude.apply', args=(Applic(ident='Prelude.fromInt', args=(Reference(vid=1),)), Applic(ident='Prelude.Int', args=(2,)))), Applic(ident='Prelude.[]', args=())))))))), None), show=<curry.interpreter.show.Show object at 0x7f39a50fde10>, typecheck=None, typedef=None)}