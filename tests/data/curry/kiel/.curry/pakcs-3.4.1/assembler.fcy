Prog "assembler" ["Prelude"] [Type ("assembler","Instruction") Public [] [Cons ("assembler","Jump") 1 Public [TCons ("assembler","LabelId") []],Cons ("assembler","Label") 1 Public [TCons ("assembler","LabelId") []]],Type ("assembler","LabelId") Public [] [Cons ("assembler","L0") 0 Public [],Cons ("assembler","L1") 0 Public [],Cons ("assembler","L2") 0 Public [],Cons ("assembler","L3") 0 Public [],Cons ("assembler","L4") 0 Public [],Cons ("assembler","L5") 0 Public [],Cons ("assembler","L6") 0 Public [],Cons ("assembler","L7") 0 Public [],Cons ("assembler","L8") 0 Public [],Cons ("assembler","L9") 0 Public []]] [Func ("assembler","_inst#Prelude.Data#assembler.Instruction") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("assembler","Instruction") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("assembler","_impl#===#Prelude.Data#assembler.Instruction") [],Comb FuncCall ("assembler","_impl#aValue#Prelude.Data#assembler.Instruction") []])])),Func ("assembler","_impl#===#Prelude.Data#assembler.Instruction") 2 Public (FuncType (TCons ("assembler","Instruction") []) (FuncType (TCons ("assembler","Instruction") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("assembler","Jump") [3]) (Case Flex (Var 2) [Branch (Pattern ("assembler","Jump") [4]) (Comb FuncCall ("assembler","_impl#===#Prelude.Data#assembler.LabelId") [Var 3,Var 4]),Branch (Pattern ("assembler","Label") [5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","Label") [6]) (Case Flex (Var 2) [Branch (Pattern ("assembler","Jump") [7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","Label") [8]) (Comb FuncCall ("assembler","_impl#===#Prelude.Data#assembler.LabelId") [Var 6,Var 8])])])),Func ("assembler","_impl#aValue#Prelude.Data#assembler.Instruction") 0 Public (TCons ("assembler","Instruction") []) (Rule [] (Or (Comb ConsCall ("assembler","Jump") [Comb FuncCall ("assembler","_impl#aValue#Prelude.Data#assembler.LabelId") []]) (Comb ConsCall ("assembler","Label") [Comb FuncCall ("assembler","_impl#aValue#Prelude.Data#assembler.LabelId") []]))),Func ("assembler","_inst#Prelude.Data#assembler.LabelId") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("assembler","LabelId") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("assembler","_impl#===#Prelude.Data#assembler.LabelId") [],Comb FuncCall ("assembler","_impl#aValue#Prelude.Data#assembler.LabelId") []])])),Func ("assembler","_impl#===#Prelude.Data#assembler.LabelId") 2 Public (FuncType (TCons ("assembler","LabelId") []) (FuncType (TCons ("assembler","LabelId") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("assembler","L0") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L1") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L2") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L3") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L4") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L5") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L6") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L7") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L8") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L9") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("assembler","_impl#aValue#Prelude.Data#assembler.LabelId") 0 Public (TCons ("assembler","LabelId") []) (Rule [] (Or (Or (Or (Or (Or (Or (Or (Or (Or (Comb ConsCall ("assembler","L0") []) (Comb ConsCall ("assembler","L1") [])) (Comb ConsCall ("assembler","L2") [])) (Comb ConsCall ("assembler","L3") [])) (Comb ConsCall ("assembler","L4") [])) (Comb ConsCall ("assembler","L5") [])) (Comb ConsCall ("assembler","L6") [])) (Comb ConsCall ("assembler","L7") [])) (Comb ConsCall ("assembler","L8") [])) (Comb ConsCall ("assembler","L9") []))),Func ("assembler","_inst#Prelude.Eq#assembler.LabelId") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("assembler","LabelId") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("assembler","_impl#==#Prelude.Eq#assembler.LabelId") [],Comb FuncCall ("assembler","_impl#/=#Prelude.Eq#assembler.LabelId") []])])),Func ("assembler","_impl#==#Prelude.Eq#assembler.LabelId") 2 Public (FuncType (TCons ("assembler","LabelId") []) (FuncType (TCons ("assembler","LabelId") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("assembler","L0") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L1") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L2") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L3") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L4") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L5") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L6") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L7") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L8") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("assembler","L9") []) (Case Flex (Var 2) [Branch (Pattern ("assembler","L0") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L1") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L3") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L4") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L5") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L6") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L7") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L8") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("assembler","L9") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("assembler","_impl#/=#Prelude.Eq#assembler.LabelId") 0 Public (FuncType (TCons ("assembler","LabelId") []) (FuncType (TCons ("assembler","LabelId") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("assembler","_inst#Prelude.Eq#assembler.LabelId") []])),Func ("assembler","assembler") 3 Public (FuncType (TCons ("Prelude","[]") [TCons ("assembler","Instruction") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("assembler","LabelId") [],TCons ("Prelude","Int") []]]) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 4) [Branch (Pattern ("assembler","Jump") [6]) (Free [7,8] (Case Rigid (Comb FuncCall ("assembler","lookupST") [Comb (FuncPartCall 1) ("assembler","_inst#Prelude.Data#assembler.LabelId") [],Comb (FuncPartCall 1) ("assembler","_inst#Prelude.Eq#assembler.LabelId") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Var 6,Var 2,Var 7,Var 8]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Lit (Intc 9),Comb ConsCall ("Prelude",":") [Var 7,Comb FuncCall ("assembler","assembler") [Var 5,Var 8,Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 3,Lit (Intc 2)]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Branch (Pattern ("assembler","Label") [9]) (Free [10] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("assembler","_inst#Prelude.Data#assembler.LabelId") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Var 10,Comb FuncCall ("assembler","insertST") [Comb (FuncPartCall 1) ("assembler","_inst#Prelude.Eq#assembler.LabelId") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Var 9,Var 3,Var 2]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("assembler","assembler") [Var 5,Var 10,Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))])])),Func ("assembler","insertST") 5 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 1) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Or (Case Rigid (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Bool") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 3],Var 8],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","=:=") [Var 2,Var 4,Var 9]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 8,Var 9],Var 7]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]) (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Bool") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 3],Var 8],Comb ConsCall ("Prelude","False") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 8,Var 9],Comb FuncCall ("assembler","insertST") [Var 1,Var 2,Var 3,Var 4,Var 7]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))])])),Func ("assembler","lookupST") 7 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Var 1,Var 3]],Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 6],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude",":") [8,9]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,)") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 4],Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Var 3,Var 6,Var 11],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Var 1,Var 3]],Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 10,Var 11],Var 9]]]),Branch (Pattern ("Prelude","False") []) (Free [12] (Comb FuncCall ("Prelude","&") [Comb FuncCall ("assembler","lookupST") [Var 1,Var 2,Var 3,Var 4,Var 9,Var 6,Var 12],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Var 1,Var 3]],Var 7,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 10,Var 11],Var 12]]]))])])])),Func ("assembler","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("assembler","assembler") [Comb ConsCall ("Prelude",":") [Comb ConsCall ("assembler","Label") [Comb ConsCall ("assembler","L0") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("assembler","Jump") [Comb ConsCall ("assembler","L1") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("assembler","Jump") [Comb ConsCall ("assembler","L0") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("assembler","Label") [Comb ConsCall ("assembler","L1") []],Comb ConsCall ("Prelude","[]") []]]]],Comb ConsCall ("Prelude","[]") [],Lit (Intc 0)]))] []