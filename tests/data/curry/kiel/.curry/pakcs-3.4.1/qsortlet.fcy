Prog "qsortlet" ["Prelude"] [] [Func ("qsortlet","split") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("qsortlet","split") [Var 1,Var 2,Var 5]),(7,Comb FuncCall ("qsortlet","split._#selFP2#l") [Var 6]),(8,Comb FuncCall ("qsortlet","split._#selFP3#r") [Var 6])] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">=") [Var 1],Var 2],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 4,Var 7],Var 8]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 2],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Var 7,Comb ConsCall ("Prelude",":") [Var 4,Var 8]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))])),Func ("qsortlet","split._#selFP2#l") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("qsortlet","split._#selFP3#r") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("qsortlet","qsort") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("qsortlet","split") [Var 1,Var 3,Var 4]),(6,Comb FuncCall ("qsortlet","qsort._#selFP5#l") [Var 5]),(7,Comb FuncCall ("qsortlet","qsort._#selFP6#r") [Var 5])] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("qsortlet","qsort") [Var 1,Var 6],Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("qsortlet","qsort") [Var 1,Var 7]]]))])),Func ("qsortlet","qsort._#selFP5#l") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("qsortlet","qsort._#selFP6#r") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("qsortlet","goal") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("qsortlet","qsort") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb ConsCall ("Prelude",":") [Lit (Intc 8),Comb ConsCall ("Prelude",":") [Lit (Intc 6),Comb ConsCall ("Prelude",":") [Lit (Intc 7),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]]]]]]]]]))] []