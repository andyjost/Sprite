interface inflists where {
import Prelude;
fibgen 2 :: Prelude.Num a => a -> a -> [a];
fibs 0 :: Prelude.Num a => [a];
from 1 :: Prelude.Num a => a -> [a];
goal1 0 :: [Prelude.Int];
goal2 0 :: [Prelude.Int];
goal3 0 :: [Prelude.Int];
hamming 0 :: (Prelude.Num a, Prelude.Ord a) => [a];
ordMerge 2 :: Prelude.Ord a => [a] -> [a] -> [a];
primes 0 :: Prelude.Integral a => [a];
sieve 1 :: Prelude.Integral a => [a] -> [a];
hiding class Prelude.Num a;
hiding data Prelude.Int;
hiding class Prelude.Eq a => Prelude.Ord a;
hiding class (Prelude.Enum a,
              Prelude.Real a) => Prelude.Integral a;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding class Prelude.Eq a;
instance Prelude.Ord () {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b) => Prelude.Ord (a, b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b,
          Prelude.Ord c) => Prelude.Ord (a, b, c) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d) => Prelude.Ord (a, b, c, d) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d, Prelude.Ord e) => Prelude.Ord (a, b, c, d, e) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord [a] {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Bool {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Char {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a,
          Prelude.Ord b) => Prelude.Ord (Prelude.Either a b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Float {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Int {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord (Prelude.Maybe a) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Ordering {
  (<=) 2
} {-# MODULE Prelude #-};
hiding class Prelude.Enum a;
hiding class (Prelude.Num a, Prelude.Ord a) => Prelude.Real a;
instance Prelude.Integral Prelude.Int {
  toInt 1;
  quotRem 2;
  divMod 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
instance Prelude.Eq () {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) => Prelude.Eq (a, b) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b,
          Prelude.Eq c) => Prelude.Eq (a, b, c) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
          Prelude.Eq d) => Prelude.Eq (a, b, c, d) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e) => Prelude.Eq (a, b, c, d, e) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a,
          Prelude.Eq b) => Prelude.Eq (Prelude.Either a b) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.IOError {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq (Prelude.Maybe a) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {
  (==) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Bool;
hiding data Prelude.Char;
hiding data Prelude.Either a b;
hiding data Prelude.Maybe a;
hiding data Prelude.Ordering;
instance Prelude.Enum () {
  enumFromThenTo 3;
  enumFromTo 2;
  enumFromThen 2;
  enumFrom 1;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Bool {
  enumFromThen 2;
  enumFrom 1;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Char {
  enumFromThen 2;
  enumFrom 1;
  fromEnum 0;
  toEnum 0;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Int {
  enumFromThenTo 3;
  enumFromThen 2;
  enumFromTo 2;
  enumFrom 1;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Ordering {
  enumFromThen 2;
  enumFrom 1;
  fromEnum 1;
  toEnum 1;
  pred 1;
  succ 1
} {-# MODULE Prelude #-};
instance Prelude.Real Prelude.Float {
  toFloat 1
} {-# MODULE Prelude #-};
instance Prelude.Real Prelude.Int {
  toFloat 1
} {-# MODULE Prelude #-};
hiding data Prelude.IOError
}