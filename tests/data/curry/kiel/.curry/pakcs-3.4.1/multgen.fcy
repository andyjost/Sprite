Prog "multgen" ["Prelude"] [] [Func ("multgen","pairs") 2 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]])))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("multgen","pairs._#lambda1") [Var 2]],Var 1])),Func ("multgen","pairs._#lambda1") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 1,TVar 0]])))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("multgen","pairs._#lambda1._#lambda2") [Var 2],Var 1])),Func ("multgen","pairs._#lambda1._#lambda2") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("multgen","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Comb FuncCall ("multgen","pairs") [Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude","[]") []]]],Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude","[]") []]]])),Func ("multgen","triangle") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("multgen","triangle._#lambda3") []],Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [Lit (Intc 1),Var 1]])),Func ("multgen","triangle._#lambda3") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]])) (Rule [1] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("multgen","triangle._#lambda3._#lambda4") [Var 1],Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [Lit (Intc 1),Var 1]])),Func ("multgen","triangle._#lambda3._#lambda4") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("multgen","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Comb FuncCall ("multgen","triangle") [Lit (Intc 3)])),Func ("multgen","pyTriple") 4 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 0,TVar 0]])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("multgen","pyTriple._#lambda5") [Var 4,Var 1,Var 2,Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","enumFromTo") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 3],Lit (Intc 2)]],Var 4]])),Func ("multgen","pyTriple._#lambda5") 5 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 0,TVar 0]]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("multgen","pyTriple._#lambda5._#lambda6") [Var 1,Var 5,Var 2,Var 3,Var 4]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","enumFromTo") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 4],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 4],Lit (Intc 1)]]],Var 1]])),Func ("multgen","pyTriple._#lambda5._#lambda6") 6 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Enum") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 0,TVar 0]])))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("multgen","pyTriple._#lambda5._#lambda6._#lambda7") [Var 2,Var 6,Var 4,Var 5]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","enumFromTo") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 5],Var 6],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 5],Lit (Intc 1)]]],Var 1]])),Func ("multgen","pyTriple._#lambda5._#lambda6._#lambda7") 5 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 0,TVar 0]]))))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Var 4],Var 1],Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Var 4],Var 2],Var 2]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Var 4],Var 5],Var 5]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("multgen","goal3") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Comb FuncCall ("multgen","pyTriple") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Enum#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Lit (Intc 20)]))] []