Prog "diamond" ["Prelude"] [] [Func ("diamond","diamond") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","diamond.lineloop1.2") [Var 3,Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Lit (Intc 1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Lit (Intc 1)]],Comb FuncCall ("diamond","diamond.lineloop2.2") [Var 3,Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Lit (Intc 1)],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Var 3],Var 3]],Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Lit (Intc 2)]]]])),Func ("diamond","diamond.line.2") 5 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","tab") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 1],Var 5]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Comb FuncCall ("diamond","size") [Var 2,Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 1],Var 1]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Lit (Intc 1)]]]],Comb FuncCall ("diamond","diamond.line.2.lineloop.8") [Var 5,Var 1,Var 2,Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Lit (Intc 1)],Var 4]])),Func ("diamond","diamond.line.2.putValue.8") 5 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 1])) (FuncType (TVar 1) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","tab") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("diamond","size") [Var 2,Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 1],Var 1]],Lit (Intc 1)],Comb FuncCall ("diamond","size") [Var 3,Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 5]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","show") [Var 4],Var 5]])),Func ("diamond","diamond.line.2.lineloop.8") 6 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Var 5],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","diamond.line.2.putValue.8") [Var 2,Var 3,Var 3,Var 4,Var 6],Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","tab") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("diamond","size") [Var 3,Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Var 2],Var 2]],Lit (Intc 1)]],Comb FuncCall ("diamond","diamond.line.2.lineloop.8") [Var 1,Var 2,Var 3,Var 4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Lit (Intc 1)]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Var 6],Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 3]]],Lit (Intc 1)]]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []])])),Func ("diamond","diamond.lineloop1.2") 5 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 4],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","diamond.line.2") [Var 1,Var 2,Var 3,Var 5,Var 4],Comb FuncCall ("diamond","diamond.lineloop1.2") [Var 1,Var 2,Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Lit (Intc 1)]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 5],Var 1]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("diamond","diamond.lineloop2.2") 5 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 4],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("diamond","diamond.line.2") [Var 1,Var 2,Var 3,Var 5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 1],Var 4]],Comb FuncCall ("diamond","diamond.lineloop2.2") [Var 1,Var 2,Var 3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Lit (Intc 1)]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Var 5],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 2]]],Lit (Intc 1)]]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("diamond","tab") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("diamond","tab") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 2],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)]]]])])),Func ("diamond","size") 3 Public (ForallType [(0,KStar),(1,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Integral") [TVar 1])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 1) (TVar 0))))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Lit (Intc 10)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 2],Comb FuncCall ("diamond","size") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","div") [Var 1],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Comb FuncCall ("Prelude","_super#Prelude.Integral#Prelude.Real") [Var 1]]],Lit (Intc 10)]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)]])])),Func ("diamond","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (Rule [] (Comb FuncCall ("diamond","diamond") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Integral#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Show#Prelude.Int") [],Lit (Intc 3)]))] []