Prog "nondetfunc" ["Prelude"] [Type ("nondetfunc","Nat") Public [] [Cons ("nondetfunc","o") 0 Public [],Cons ("nondetfunc","s") 1 Public [TCons ("nondetfunc","Nat") []]]] [Func ("nondetfunc","_inst#Prelude.Data#nondetfunc.Nat") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("nondetfunc","Nat") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("nondetfunc","_impl#===#Prelude.Data#nondetfunc.Nat") [],Comb FuncCall ("nondetfunc","_impl#aValue#Prelude.Data#nondetfunc.Nat") []])])),Func ("nondetfunc","_impl#===#Prelude.Data#nondetfunc.Nat") 2 Public (FuncType (TCons ("nondetfunc","Nat") []) (FuncType (TCons ("nondetfunc","Nat") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("nondetfunc","o") []) (Case Flex (Var 2) [Branch (Pattern ("nondetfunc","o") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("nondetfunc","s") [3]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("nondetfunc","s") [4]) (Case Flex (Var 2) [Branch (Pattern ("nondetfunc","o") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("nondetfunc","s") [5]) (Comb FuncCall ("nondetfunc","_impl#===#Prelude.Data#nondetfunc.Nat") [Var 4,Var 5])])])),Func ("nondetfunc","_impl#aValue#Prelude.Data#nondetfunc.Nat") 0 Public (TCons ("nondetfunc","Nat") []) (Rule [] (Or (Comb ConsCall ("nondetfunc","o") []) (Comb ConsCall ("nondetfunc","s") [Comb FuncCall ("nondetfunc","_impl#aValue#Prelude.Data#nondetfunc.Nat") []]))),Func ("nondetfunc","choose") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2] (Or (Var 1) (Var 2))),Func ("nondetfunc","insert") 2 Public (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("nondetfunc","choose") [Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude",":") [Var 3,Var 4]],Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("nondetfunc","insert") [Var 1,Var 4]]])])),Func ("nondetfunc","permut") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("nondetfunc","insert") [Var 2,Comb FuncCall ("nondetfunc","permut") [Var 3]])])),Func ("nondetfunc","sort") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Comb FuncCall ("nondetfunc","rId") [Comb (FuncPartCall 1) ("nondetfunc","sorted") [Var 1],Comb FuncCall ("nondetfunc","permut") [Var 2]])),Func ("nondetfunc","rId") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("nondetfunc","wheresort") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Let [(3,Comb FuncCall ("nondetfunc","permut") [Var 2])] (Case Rigid (Comb FuncCall ("nondetfunc","sorted") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("nondetfunc","strictsort") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Free [4] (Case Rigid (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Var 1],Var 4,Comb FuncCall ("nondetfunc","permut") [Var 3]],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Bool") [],Comb FuncCall ("nondetfunc","sorted") [Var 2,Var 4],Comb ConsCall ("Prelude","True") []]]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("nondetfunc","sorted") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 3],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("nondetfunc","sorted") [Var 1,Comb ConsCall ("Prelude",":") [Var 5,Var 6]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("nondetfunc","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("nondetfunc","sort") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("nondetfunc","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("nondetfunc","wheresort") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("nondetfunc","goal3") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("nondetfunc","strictsort") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Int") [],Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]]]]])),Func ("nondetfunc","coin") 0 Public (TCons ("nondetfunc","Nat") []) (Rule [] (Or (Comb ConsCall ("nondetfunc","o") []) (Comb ConsCall ("nondetfunc","s") [Comb ConsCall ("nondetfunc","o") []]))),Func ("nondetfunc","add") 2 Public (FuncType (TCons ("nondetfunc","Nat") []) (FuncType (TCons ("nondetfunc","Nat") []) (TCons ("nondetfunc","Nat") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("nondetfunc","o") []) (Var 2),Branch (Pattern ("nondetfunc","s") [3]) (Comb ConsCall ("nondetfunc","s") [Comb FuncCall ("nondetfunc","add") [Var 3,Var 2]])])),Func ("nondetfunc","double") 1 Public (FuncType (TCons ("nondetfunc","Nat") []) (TCons ("nondetfunc","Nat") [])) (Rule [1] (Comb FuncCall ("nondetfunc","add") [Var 1,Var 1])),Func ("nondetfunc","goal4") 0 Public (TCons ("nondetfunc","Nat") []) (Rule [] (Comb FuncCall ("nondetfunc","double") [Comb FuncCall ("nondetfunc","coin") []]))] []