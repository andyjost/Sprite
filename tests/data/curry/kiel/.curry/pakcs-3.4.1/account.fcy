Prog "account" ["Prelude"] [Type ("account","Message") Public [] [Cons ("account","Deposit") 1 Public [TCons ("Prelude","Int") []],Cons ("account","Withdraw") 1 Public [TCons ("Prelude","Int") []],Cons ("account","Balance") 1 Public [TCons ("Prelude","Int") []]]] [Func ("account","_inst#Prelude.Data#account.Message") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("account","Message") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("account","_impl#===#Prelude.Data#account.Message") [],Comb FuncCall ("account","_impl#aValue#Prelude.Data#account.Message") []])])),Func ("account","_impl#===#Prelude.Data#account.Message") 2 Public (FuncType (TCons ("account","Message") []) (FuncType (TCons ("account","Message") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("account","Deposit") [3]) (Case Flex (Var 2) [Branch (Pattern ("account","Deposit") [4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 3],Var 4]),Branch (Pattern ("account","Withdraw") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("account","Balance") [6]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("account","Withdraw") [7]) (Case Flex (Var 2) [Branch (Pattern ("account","Deposit") [8]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("account","Withdraw") [9]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 7],Var 9]),Branch (Pattern ("account","Balance") [10]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("account","Balance") [11]) (Case Flex (Var 2) [Branch (Pattern ("account","Deposit") [12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("account","Withdraw") [13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("account","Balance") [14]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 11],Var 14])])])),Func ("account","_impl#aValue#Prelude.Data#account.Message") 0 Public (TCons ("account","Message") []) (Rule [] (Or (Or (Comb ConsCall ("account","Deposit") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") []]) (Comb ConsCall ("account","Withdraw") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") []])) (Comb ConsCall ("account","Balance") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") []]))),Func ("account","account") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("account","Message") []]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","success") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 3) [Branch (Pattern ("account","Deposit") [5]) (Comb FuncCall ("account","account") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Var 5],Var 4]),Branch (Pattern ("account","Withdraw") [6]) (Comb FuncCall ("account","account") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Var 6],Var 4]),Branch (Pattern ("account","Balance") [7]) (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Var 7,Var 1],Comb FuncCall ("account","account") [Var 1,Var 4]])])])),Func ("account","make_account") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("account","Message") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("account","account") [Lit (Intc 0),Comb FuncCall ("Prelude","ensureSpine") [Var 1]])),Func ("account","goal1") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","&") [Comb FuncCall ("account","make_account") [Var 2],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") []],Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Deposit") [Lit (Intc 200)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Deposit") [Lit (Intc 50)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Balance") [Var 1],Comb ConsCall ("Prelude","[]") []]]]]]))),Func ("account","goal2") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","&") [Comb FuncCall ("account","make_account") [Var 2],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") []],Var 2,Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Deposit") [Lit (Intc 200)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Withdraw") [Lit (Intc 100)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Deposit") [Lit (Intc 50)],Comb ConsCall ("Prelude",":") [Comb ConsCall ("account","Balance") [Var 1],Comb ConsCall ("Prelude","[]") []]]]]]]))),Func ("account","sendMsg") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3] (Free [4] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Var 1],Var 3,Comb ConsCall ("Prelude",":") [Var 2,Var 4]]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("account","client") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("account","Message") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Free [2,3] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") []],Var 2,Comb FuncCall ("account","sendMsg") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") [],Comb ConsCall ("account","Balance") [Var 3],Var 1]]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 3,Lit (Intc 70)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") []],Var 2,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 3],Lit (Intc 50)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("account","client") [Comb FuncCall ("account","sendMsg") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") [],Comb ConsCall ("account","Withdraw") [Lit (Intc 30)],Var 2]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("account","client") [Comb FuncCall ("account","sendMsg") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") [],Comb ConsCall ("account","Deposit") [Lit (Intc 70)],Var 2]])])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("account","goal3") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("account","Message") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&") [Comb FuncCall ("account","make_account") [Var 1],Comb FuncCall ("account","client") [Comb FuncCall ("account","sendMsg") [Comb (FuncPartCall 1) ("account","_inst#Prelude.Data#account.Message") [],Comb ConsCall ("account","Deposit") [Lit (Intc 100)],Var 1]]])),Func ("account","sprite_goal3") 0 Public (TCons ("Prelude","[]") [TCons ("account","Message") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","&>") [Comb FuncCall ("account","goal3") [Var 1],Var 1])))] []