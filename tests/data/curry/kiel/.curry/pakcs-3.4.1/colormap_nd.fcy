Prog "colormap_nd" ["Prelude"] [Type ("colormap_nd","Color") Public [] [Cons ("colormap_nd","Red") 0 Public [],Cons ("colormap_nd","Green") 0 Public [],Cons ("colormap_nd","Yellow") 0 Public [],Cons ("colormap_nd","Blue") 0 Public []]] [Func ("colormap_nd","_inst#Prelude.Data#colormap_nd.Color") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("colormap_nd","Color") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("colormap_nd","_impl#===#Prelude.Data#colormap_nd.Color") [],Comb FuncCall ("colormap_nd","_impl#aValue#Prelude.Data#colormap_nd.Color") []])])),Func ("colormap_nd","_impl#===#Prelude.Data#colormap_nd.Color") 2 Public (FuncType (TCons ("colormap_nd","Color") []) (FuncType (TCons ("colormap_nd","Color") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("colormap_nd","Red") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("colormap_nd","Green") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("colormap_nd","Yellow") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("colormap_nd","Blue") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("colormap_nd","_impl#aValue#Prelude.Data#colormap_nd.Color") 0 Public (TCons ("colormap_nd","Color") []) (Rule [] (Or (Or (Or (Comb ConsCall ("colormap_nd","Red") []) (Comb ConsCall ("colormap_nd","Green") [])) (Comb ConsCall ("colormap_nd","Yellow") [])) (Comb ConsCall ("colormap_nd","Blue") []))),Func ("colormap_nd","_inst#Prelude.Eq#colormap_nd.Color") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("colormap_nd","Color") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("colormap_nd","_impl#==#Prelude.Eq#colormap_nd.Color") [],Comb FuncCall ("colormap_nd","_impl#/=#Prelude.Eq#colormap_nd.Color") []])])),Func ("colormap_nd","_impl#==#Prelude.Eq#colormap_nd.Color") 2 Public (FuncType (TCons ("colormap_nd","Color") []) (FuncType (TCons ("colormap_nd","Color") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("colormap_nd","Red") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("colormap_nd","Green") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("colormap_nd","Yellow") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("colormap_nd","Blue") []) (Case Flex (Var 2) [Branch (Pattern ("colormap_nd","Red") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Green") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Yellow") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("colormap_nd","Blue") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("colormap_nd","_impl#/=#Prelude.Eq#colormap_nd.Color") 0 Public (FuncType (TCons ("colormap_nd","Color") []) (FuncType (TCons ("colormap_nd","Color") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("colormap_nd","_inst#Prelude.Eq#colormap_nd.Color") []])),Func ("colormap_nd","diff") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Bool") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2],Var 3],Comb ConsCall ("Prelude","False") []])),Func ("colormap_nd","aColor") 0 Public (TCons ("colormap_nd","Color") []) (Rule [] (Or (Or (Or (Comb ConsCall ("colormap_nd","Red") []) (Comb ConsCall ("colormap_nd","Yellow") [])) (Comb ConsCall ("colormap_nd","Green") [])) (Comb ConsCall ("colormap_nd","Blue") []))),Func ("colormap_nd","correct") 5 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))))) (Rule [1,2,3,4,5] (Case Rigid (Comb FuncCall ("Prelude","&") [Comb FuncCall ("colormap_nd","diff") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","&") [Comb FuncCall ("colormap_nd","diff") [Var 1,Var 2,Var 4],Comb FuncCall ("Prelude","&") [Comb FuncCall ("colormap_nd","diff") [Var 1,Var 3,Var 4],Comb FuncCall ("Prelude","&") [Comb FuncCall ("colormap_nd","diff") [Var 1,Var 3,Var 5],Comb FuncCall ("colormap_nd","diff") [Var 1,Var 4,Var 5]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("colormap_nd","goal") 0 Public (TCons ("Prelude","[]") [TCons ("colormap_nd","Color") []]) (Rule [] (Comb FuncCall ("colormap_nd","correct") [Comb (FuncPartCall 1) ("colormap_nd","_inst#Prelude.Eq#colormap_nd.Color") [],Comb FuncCall ("colormap_nd","aColor") [],Comb FuncCall ("colormap_nd","aColor") [],Comb FuncCall ("colormap_nd","aColor") [],Comb FuncCall ("colormap_nd","aColor") []]))] []