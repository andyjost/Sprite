Prog "member" ["Prelude"] [] [Func ("member","append") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("member","append") [Comb ConsCall ("Prelude","(,)") [Var 5,Var 3]]])])])),Func ("member","member") 2 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","Bool") [])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Free [5,6] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Var 1],Comb FuncCall ("member","append") [Comb ConsCall ("Prelude","(,)") [Var 5,Comb ConsCall ("Prelude",":") [Var 3,Var 6]]],Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))])),Func ("member","goal1") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Comb FuncCall ("member","member") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 2)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 3)],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("member","main1") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Free [1] (Case Rigid (Comb FuncCall ("member","goal1") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("member","goal2") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TVar 0])) (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Num") [TVar 0])) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("member","member") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 1)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 2)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 3)],Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("member","member") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 3,Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 2)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 3)],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 2],Lit (Intc 4)],Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("member","main2") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Free [1] (Case Rigid (Comb FuncCall ("member","goal2") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])))] []