interface colormap_nd where {
import Prelude;
data Color = Red | Green | Yellow | Blue;
aColor 0 :: Color;
correct 4 :: Prelude.Eq a => a -> a -> a -> a -> [a];
diff 2 :: Prelude.Eq a => a -> a -> Prelude.Bool;
goal 0 :: [Color];
instance Prelude.Data Color {
  (===) 2;
  aValue 0
};
instance Prelude.Eq Color {
  (==) 2
};
hiding class Prelude.Eq a;
hiding data Prelude.Bool;
hiding class Prelude.Data a;
instance Prelude.Eq () {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) => Prelude.Eq (a, b) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b,
          Prelude.Eq c) => Prelude.Eq (a, b, c) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
          Prelude.Eq d) => Prelude.Eq (a, b, c, d) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e) => Prelude.Eq (a, b, c, d, e) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a,
          Prelude.Eq b) => Prelude.Eq (Prelude.Either a b) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.IOError {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq (Prelude.Maybe a) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Data () {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b) => Prelude.Data (a, b) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b,
          Prelude.Data c) => Prelude.Data (a, b, c) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d) => Prelude.Data (a, b, c, d) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e) => Prelude.Data (a, b, c, d, e) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e, Prelude.Data f) => Prelude.Data (a,
                                                                           b, c, d, e, f) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e, Prelude.Data f,
          Prelude.Data g) => Prelude.Data (a, b, c, d, e, f, g) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance Prelude.Data a => Prelude.Data [a] {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Bool {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Char {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance (Prelude.Data a,
          Prelude.Data b) => Prelude.Data (Prelude.Either a b) {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Float {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.IOError {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Int {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance Prelude.Data a => Prelude.Data (Prelude.Maybe a) {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Ordering {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
hiding data Prelude.Char;
hiding data Prelude.Either a b;
hiding data Prelude.Float;
hiding data Prelude.IOError;
hiding data Prelude.Int;
hiding data Prelude.Maybe a;
hiding data Prelude.Ordering
}