interface infresiduate where {
import Prelude;
append 2 :: [a] -> [a] -> [a];
conc 2 :: [a] -> [a] -> [a];
goal 1 :: Prelude.Num a => [a] -> Prelude.Bool;
main 0 :: [Prelude.Int];
rev 2 :: [a] -> [a] -> Prelude.Bool;
hiding class Prelude.Num a;
hiding data Prelude.Bool;
hiding data Prelude.Int;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float
}