
module "rigidadd"
  import
    "Prelude"
  data "rigidadd.Nat"
    constructor "rigidadd.O" 0 0
    constructor "rigidadd.S" 1 1
  function "rigidadd.add" 2
    code
      declare_var 1 ILhs (("rigidadd","add"),1)
      declare_var 2 ILhs (("rigidadd","add"),2)
      return
        Node "rigidadd.add'" (
          Node "Prelude.ensureNotFree" (
            reference_var 1 ) ,
          reference_var 2 )
  function "rigidadd.add'" 2
    code
      declare_var 1 ILhs (("rigidadd","add'"),1)
      declare_var 2 ILhs (("rigidadd","add'"),2)
      ATable 1 2 flex
        reference_var 1
        "rigidadd.O" =>
          return
            reference_var 2
        "rigidadd.S" =>
          declare_var 3 IVar 1 (("rigidadd","S"),1)
          return
            Node "rigidadd.S" (
              Node "rigidadd.add" (
                reference_var 3 ,
                reference_var 2 ) )
  function "rigidadd.isNat" 1
    code
      declare_var 1 ILhs (("rigidadd","isNat"),1)
      ATable 1 2 flex
        reference_var 1
        "rigidadd.O" =>
          return
            Node "Prelude.success"
        "rigidadd.S" =>
          declare_var 2 IVar 1 (("rigidadd","S"),1)
          return
            Node "rigidadd.isNat" (
              reference_var 2 )
  function "rigidadd.goal" 0
    code
      declare_var 1 IFree
      return
        Node "Prelude.&" (
          Node "Prelude.=:=" (
            Node "rigidadd.add" (
              reference_var 1 ,
              Node "rigidadd.O" ) ,
            Node "rigidadd.S" (
              Node "rigidadd.O" ) ) ,
          Node "rigidadd.isNat" (
            reference_var 1 ) )
