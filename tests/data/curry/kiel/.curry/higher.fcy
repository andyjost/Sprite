Prog "higher" ["Prelude"] [] [Func ("higher","map_") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("higher","map_") [Var 1,Var 4]])])),Func ("higher","foldr_") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 1)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("higher","foldr_") [Var 1,Var 2,Var 5]])])),Func ("higher","inc") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]])),Func ("higher","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("higher","inc") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb ConsCall ("Prelude",":") [Lit (Intc 0),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]]]])),Func ("higher","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [],Lit (Intc 1)],Comb ConsCall ("Prelude",":") [Lit (Intc 0),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude","[]") []]]]])),Func ("higher","goal3") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [],Lit (Intc 0),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 0),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude","[]") []]]]])),Func ("higher","goal4") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [],Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("higher","goal5") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("higher","goal5._#lambda1") [],Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude",":") [Lit (Intc 5),Comb ConsCall ("Prelude","[]") []]]]]]])),Func ("higher","goal5._#lambda1") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [Var 1,Var 2]))] []