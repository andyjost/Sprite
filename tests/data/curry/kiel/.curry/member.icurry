interface member where {
import Prelude;
append 1 :: ([a], [a]) -> [a];
goal1 1 :: Prelude.Num a => a -> Prelude.Bool;
goal2 1 :: Prelude.Num a => a -> Prelude.Bool;
main1 0 :: Prelude.Int;
main2 0 :: Prelude.Int;
member 1 :: (a, [a]) -> Prelude.Bool;
hiding class Prelude.Num a;
hiding data Prelude.Bool;
hiding data Prelude.Int;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float
}