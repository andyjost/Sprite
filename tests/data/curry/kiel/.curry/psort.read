
module "psort"
  import
    "Prelude"
  function "psort.splits" 1
    code
      declare_var 1 ILhs (("psort","splits"),1)
      ATable 1 2 flex
        reference_var 1
        "Prelude.[]" =>
          return
            Node "Prelude.:" (
              Node "Prelude.(,)" (
                Node "Prelude.[]" ,
                Node "Prelude.[]" ) ,
              Node "Prelude.[]" )
        "Prelude.:" =>
          declare_var 2 IVar 1 (("Prelude",":"),1)
          declare_var 3 IVar 1 (("Prelude",":"),2)
          return
            Node "Prelude.:" (
              Node "Prelude.(,)" (
                Node "Prelude.[]" ,
                Node "Prelude.:" (
                  reference_var 2 ,
                  reference_var 3 ) ) ,
              Node "Prelude.foldr" (
                partial 2 (
                  Node "psort.splits._#lambda3" (
                    reference_var 2 ) ) ,
                Node "Prelude.[]" ,
                Node "psort.splits" (
                  reference_var 3 ) ) )
  function "psort.splits._#lambda3" 3
    code
      declare_var 1 ILhs (("psort","splits._#lambda3"),1)
      declare_var 2 ILhs (("psort","splits._#lambda3"),2)
      declare_var 3 ILhs (("psort","splits._#lambda3"),3)
      ATable 1 1 rigid
        reference_var 2
        "Prelude.(,)" =>
          declare_var 4 IVar 2 (("Prelude","(,)"),1)
          declare_var 5 IVar 2 (("Prelude","(,)"),2)
          return
            Node "Prelude.:" (
              Node "Prelude.(,)" (
                Node "Prelude.:" (
                  reference_var 1 ,
                  reference_var 4 ) ,
                reference_var 5 ) ,
              reference_var 3 )
  function "psort.perms" 1
    code
      declare_var 1 ILhs (("psort","perms"),1)
      ATable 1 2 flex
        reference_var 1
        "Prelude.[]" =>
          return
            Node "Prelude.:" (
              Node "Prelude.[]" ,
              Node "Prelude.[]" )
        "Prelude.:" =>
          declare_var 2 IVar 1 (("Prelude",":"),1)
          declare_var 3 IVar 1 (("Prelude",":"),2)
          return
            Node "Prelude.apply" (
              Node "Prelude.concatMap" (
                partial 1 (
                  Node "psort.perms._#lambda5" (
                    reference_var 2 ) ) ) ,
              Node "psort.perms" (
                reference_var 3 ) )
  function "psort.perms._#lambda5" 2
    code
      declare_var 1 ILhs (("psort","perms._#lambda5"),1)
      declare_var 2 ILhs (("psort","perms._#lambda5"),2)
      return
        Node "Prelude.foldr" (
          partial 2 (
            Node "psort.perms._#lambda5._#lambda8" (
              reference_var 1 ) ) ,
          Node "Prelude.[]" ,
          Node "psort.splits" (
            reference_var 2 ) )
  function "psort.perms._#lambda5._#lambda8" 3
    code
      declare_var 1 ILhs (("psort","perms._#lambda5._#lambda8"),1)
      declare_var 2 ILhs (("psort","perms._#lambda5._#lambda8"),2)
      declare_var 3 ILhs (("psort","perms._#lambda5._#lambda8"),3)
      ATable 1 1 rigid
        reference_var 2
        "Prelude.(,)" =>
          declare_var 4 IVar 2 (("Prelude","(,)"),1)
          declare_var 5 IVar 2 (("Prelude","(,)"),2)
          return
            Node "Prelude.:" (
              Node "Prelude.++" (
                reference_var 4 ,
                Node "Prelude.++" (
                  Node "Prelude.:" (
                    reference_var 1 ,
                    Node "Prelude.[]" ) ,
                  reference_var 5 ) ) ,
              reference_var 3 )
  function "psort.sorted" 2
    code
      declare_var 1 ILhs (("psort","sorted"),1)
      declare_var 2 ILhs (("psort","sorted"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "Prelude.True"
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "psort.sorted_#A0" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 )
  function "psort.sorted_#A0" 3
    code
      declare_var 1 ILhs (("psort","sorted_#A0"),1)
      declare_var 3 ILhs (("psort","sorted_#A0"),2)
      declare_var 4 ILhs (("psort","sorted_#A0"),3)
      ATable 1 2 flex
        reference_var 4
        "Prelude.[]" =>
          return
            Node "Prelude.True"
        "Prelude.:" =>
          declare_var 5 IVar 4 (("Prelude",":"),1)
          declare_var 6 IVar 4 (("Prelude",":"),2)
          return
            Node "Prelude.&&" (
              Node "Prelude.apply" (
                Node "Prelude.apply" (
                  Node "Prelude.<=" (
                    reference_var 1 ) ,
                  reference_var 3 ) ,
                reference_var 5 ) ,
              Node "psort.sorted" (
                reference_var 1 ,
                Node "Prelude.:" (
                  reference_var 5 ,
                  reference_var 6 ) ) )
  function "psort.sort" 1
    code
      declare_var 1 ILhs (("psort","sort"),1)
      return
        Node "Prelude.head" (
          Node "Prelude.apply" (
            Node "Prelude.concatMap" (
              partial 1 (
                Node "psort.sort._#lambda10" ) ) ,
            Node "psort.perms" (
              reference_var 1 ) ) )
  function "psort.sort._#lambda10" 1
    code
      declare_var 1 ILhs (("psort","sort._#lambda10"),1)
      return
        Node "psort.sort._#lambda10_#B0" (
          Node "psort.sorted" (
            Node "Prelude._inst#Prelude.Ord#Prelude.Int" ,
            reference_var 1 ) ,
          reference_var 1 )
  function "psort.sort._#lambda10_#B0" 2
    code
      declare_var 2 ILhs (("psort","sort._#lambda10_#B0"),1)
      declare_var 1 ILhs (("psort","sort._#lambda10_#B0"),2)
      ATable 1 2 rigid
        reference_var 2
        "Prelude.False" =>
          return
            Node "Prelude.[]"
        "Prelude.True" =>
          return
            Node "Prelude.:" (
              reference_var 1 ,
              Node "Prelude.[]" )
  function "psort.goal" 1
    code
      declare_var 1 ILhs (("psort","goal"),1)
      return
        Node "psort.sort" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude._impl#enumFromThenTo#Prelude.Enum#Prelude.Int" ,
                reference_var 1 ) ,
              Node "Prelude._impl#-#Prelude.Num#Prelude.Int" (
                reference_var 1 ,
                int 1 ) ) ,
            int 1 ) )
