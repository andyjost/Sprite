
module "relational"
  import
    "Prelude"
  data "relational.Person"
    constructor "relational.Bob" 0 0
    constructor "relational.John" 0 1
    constructor "relational.Mary" 0 2
    constructor "relational.Sue" 0 3
    constructor "relational.Dick" 0 4
    constructor "relational.Kate" 0 5
    constructor "relational.Ned" 0 6
  function "relational.parent" 2
    code
      declare_var 1 ILhs (("relational","parent"),1)
      declare_var 2 ILhs (("relational","parent"),2)
      ATable 1 7 flex
        reference_var 1
        "relational.Bob" =>
          return
            Node "relational.parent_#A0" (
              reference_var 2 )
        "relational.John" =>
          return
            Node "relational.parent_#A1" (
              reference_var 2 )
        "relational.Mary" =>
          return
            exempt
        "relational.Sue" =>
          return
            Node "relational.parent_#A2" (
              reference_var 2 )
        "relational.Dick" =>
          return
            Node "relational.parent_#A3" (
              reference_var 2 )
        "relational.Kate" =>
          return
            exempt
        "relational.Ned" =>
          return
            exempt
  function "relational.parent_#A3" 1
    code
      declare_var 2 ILhs (("relational","parent_#A3"),1)
      ATable 1 7 flex
        reference_var 2
        "relational.Bob" =>
          return
            exempt
        "relational.John" =>
          return
            exempt
        "relational.Mary" =>
          return
            exempt
        "relational.Sue" =>
          return
            exempt
        "relational.Dick" =>
          return
            exempt
        "relational.Kate" =>
          return
            Node "Prelude.True"
        "relational.Ned" =>
          return
            exempt
  function "relational.parent_#A2" 1
    code
      declare_var 2 ILhs (("relational","parent_#A2"),1)
      ATable 1 7 flex
        reference_var 2
        "relational.Bob" =>
          return
            exempt
        "relational.John" =>
          return
            exempt
        "relational.Mary" =>
          return
            exempt
        "relational.Sue" =>
          return
            exempt
        "relational.Dick" =>
          return
            Node "Prelude.True"
        "relational.Kate" =>
          return
            exempt
        "relational.Ned" =>
          return
            exempt
  function "relational.parent_#A1" 1
    code
      declare_var 2 ILhs (("relational","parent_#A1"),1)
      ATable 1 7 flex
        reference_var 2
        "relational.Bob" =>
          return
            exempt
        "relational.John" =>
          return
            exempt
        "relational.Mary" =>
          return
            Node "Prelude.True"
        "relational.Sue" =>
          return
            exempt
        "relational.Dick" =>
          return
            exempt
        "relational.Kate" =>
          return
            exempt
        "relational.Ned" =>
          return
            exempt
  function "relational.parent_#A0" 1
    code
      declare_var 2 ILhs (("relational","parent_#A0"),1)
      ATable 1 7 flex
        reference_var 2
        "relational.Bob" =>
          return
            exempt
        "relational.John" =>
          return
            Node "Prelude.True"
        "relational.Mary" =>
          return
            exempt
        "relational.Sue" =>
          return
            exempt
        "relational.Dick" =>
          return
            Node "Prelude.True"
        "relational.Kate" =>
          return
            exempt
        "relational.Ned" =>
          return
            exempt
  function "relational.age" 2
    code
      declare_var 1 ILhs (("relational","age"),1)
      declare_var 2 ILhs (("relational","age"),2)
      ATable 1 7 flex
        reference_var 2
        "relational.Bob" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 24 )
        "relational.John" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 7 )
        "relational.Mary" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 13 )
        "relational.Sue" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 23 )
        "relational.Dick" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 53 )
        "relational.Kate" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 11 )
        "relational.Ned" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 23 )
  function "relational.mappred" 3
    code
      declare_var 1 ILhs (("relational","mappred"),1)
      declare_var 2 ILhs (("relational","mappred"),2)
      declare_var 3 ILhs (("relational","mappred"),3)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "relational.mappred_#A5" (
              reference_var 3 )
        "Prelude.:" =>
          declare_var 4 IVar 2 (("Prelude",":"),1)
          declare_var 5 IVar 2 (("Prelude",":"),2)
          return
            Node "relational.mappred_#A6" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 ,
              reference_var 5 )
  function "relational.mappred_#A6" 4
    code
      declare_var 1 ILhs (("relational","mappred_#A6"),1)
      declare_var 3 ILhs (("relational","mappred_#A6"),2)
      declare_var 4 ILhs (("relational","mappred_#A6"),3)
      declare_var 5 ILhs (("relational","mappred_#A6"),4)
      ATable 1 2 flex
        reference_var 3
        "Prelude.[]" =>
          return
            exempt
        "Prelude.:" =>
          declare_var 6 IVar 3 (("Prelude",":"),1)
          declare_var 7 IVar 3 (("Prelude",":"),2)
          return
            Node "relational.mappred_#A4" (
              reference_var 1 ,
              reference_var 4 ,
              reference_var 5 ,
              reference_var 6 ,
              reference_var 7 )
  function "relational.mappred_#A5" 1
    code
      declare_var 3 ILhs (("relational","mappred_#A5"),1)
      ATable 1 2 flex
        reference_var 3
        "Prelude.[]" =>
          return
            Node "Prelude.True"
        "Prelude.:" =>
          return
            exempt
  function "relational.mappred_#A4" 5
    code
      declare_var 1 ILhs (("relational","mappred_#A4"),1)
      declare_var 4 ILhs (("relational","mappred_#A4"),2)
      declare_var 5 ILhs (("relational","mappred_#A4"),3)
      declare_var 6 ILhs (("relational","mappred_#A4"),4)
      declare_var 7 ILhs (("relational","mappred_#A4"),5)
      return
        Node "relational.mappred_#A4_#B0" (
          Node "Prelude.&&" (
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                reference_var 1 ,
                reference_var 4 ) ,
              reference_var 6 ) ,
            Node "relational.mappred" (
              reference_var 1 ,
              reference_var 5 ,
              reference_var 7 ) ) )
  function "relational.mappred_#A4_#B0" 1
    code
      declare_var 8 ILhs (("relational","mappred_#A4_#B0"),1)
      ATable 1 2 rigid
        reference_var 8
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "Prelude.True"
  function "relational.con2bool" 1
    code
      declare_var 1 ILhs (("relational","con2bool"),1)
      ATable 1 2 rigid
        reference_var 1
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "Prelude.True"
  function "relational.forevery" 2
    code
      declare_var 1 ILhs (("relational","forevery"),1)
      declare_var 2 ILhs (("relational","forevery"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "Prelude.True"
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "relational.forevery_#A7" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 )
  function "relational.forevery_#A7" 3
    code
      declare_var 1 ILhs (("relational","forevery_#A7"),1)
      declare_var 3 ILhs (("relational","forevery_#A7"),2)
      declare_var 4 ILhs (("relational","forevery_#A7"),3)
      return
        Node "relational.forevery_#A7_#B2" (
          Node "Prelude.apply" (
            reference_var 1 ,
            reference_var 3 ) ,
          reference_var 1 ,
          reference_var 4 )
  function "relational.forevery_#A7_#B2" 3
    code
      declare_var 5 ILhs (("relational","forevery_#A7_#B2"),1)
      declare_var 1 ILhs (("relational","forevery_#A7_#B2"),2)
      declare_var 4 ILhs (("relational","forevery_#A7_#B2"),3)
      ATable 1 2 rigid
        reference_var 5
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "relational.forevery" (
              reference_var 1 ,
              reference_var 4 )
  function "relational.q1" 1
    code
      declare_var 1 ILhs (("relational","q1"),1)
      return
        Node "Prelude.map" (
          partial 1 (
            Node "relational.age" (
              reference_var 1 ) ) ,
          Node "Prelude.:" (
            Node "relational.Bob" ,
            Node "Prelude.:" (
              Node "relational.Sue" ,
              Node "Prelude.[]" ) ) )
  function "relational.q2" 1
    code
      declare_var 1 ILhs (("relational","q2"),1)
      return
        Node "relational.mappred" (
          partial 2 (
            Node "relational.parent" ) ,
          Node "Prelude.:" (
            Node "relational.Bob" ,
            Node "Prelude.:" (
              Node "relational.Dick" ,
              Node "Prelude.[]" ) ) ,
          reference_var 1 )
  function "relational.q3" 2
    code
      declare_var 1 ILhs (("relational","q3"),1)
      declare_var 2 ILhs (("relational","q3"),2)
      return
        Node "relational.mappred" (
          reference_var 2 ,
          Node "Prelude.:" (
            Node "relational.Bob" ,
            Node "Prelude.:" (
              Node "relational.Sue" ,
              Node "Prelude.[]" ) ) ,
          Node "Prelude.:" (
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 24 ) ,
            Node "Prelude.:" (
              Node "Prelude.apply" (
                Node "Prelude.fromInt" (
                  reference_var 1 ) ,
                int 23 ) ,
              Node "Prelude.[]" ) ) )
  function "relational.q4" 1
    code
      declare_var 1 ILhs (("relational","q4"),1)
      return
        Node "relational.mappred" (
          partial 2 (
            Node "relational.q4._#lambda1" ) ,
          reference_var 1 ,
          Node "Prelude.:" (
            int 24 ,
            Node "Prelude.:" (
              int 23 ,
              Node "Prelude.[]" ) ) )
  function "relational.q4._#lambda1" 2
    code
      declare_var 1 ILhs (("relational","q4._#lambda1"),1)
      declare_var 2 ILhs (("relational","q4._#lambda1"),2)
      return
        Node "relational.con2bool" (
          Node "Prelude.=:=" (
            Node "relational.age" (
              Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
              reference_var 1 ) ,
            reference_var 2 ) )
  function "relational.q5" 2
    code
      declare_var 1 ILhs (("relational","q5"),1)
      declare_var 2 ILhs (("relational","q5"),2)
      return
        Node "relational.forevery" (
          partial 1 (
            Node "relational.q5._#lambda2" (
              reference_var 2 ,
              reference_var 1 ) ) ,
          Node "Prelude.:" (
            Node "relational.Ned" ,
            Node "Prelude.:" (
              Node "relational.Bob" ,
              Node "Prelude.:" (
                Node "relational.Sue" ,
                Node "Prelude.[]" ) ) ) )
  function "relational.q5._#lambda2" 3
    code
      declare_var 1 ILhs (("relational","q5._#lambda2"),1)
      declare_var 2 ILhs (("relational","q5._#lambda2"),2)
      declare_var 3 ILhs (("relational","q5._#lambda2"),3)
      return
        Node "Prelude.=:=" (
          Node "relational.age" (
            reference_var 2 ,
            reference_var 3 ) ,
          reference_var 1 )
  function "relational.q6" 2
    code
      declare_var 1 ILhs (("relational","q6"),1)
      declare_var 2 ILhs (("relational","q6"),2)
      return
        Node "relational.forevery" (
          partial 1 (
            Node "relational.q6._#lambda3" (
              reference_var 2 ,
              reference_var 1 ) ) ,
          Node "Prelude.:" (
            Node "relational.Ned" ,
            Node "Prelude.:" (
              Node "relational.Sue" ,
              Node "Prelude.[]" ) ) )
  function "relational.q6._#lambda3" 3
    code
      declare_var 1 ILhs (("relational","q6._#lambda3"),1)
      declare_var 2 ILhs (("relational","q6._#lambda3"),2)
      declare_var 3 ILhs (("relational","q6._#lambda3"),3)
      return
        Node "Prelude.=:=" (
          Node "relational.age" (
            reference_var 2 ,
            reference_var 3 ) ,
          reference_var 1 )
  function "relational.q7" 0
    code
      return
        Node "relational.forevery" (
          partial 1 (
            Node "relational.q7._#lambda4" ) ,
          Node "Prelude.:" (
            Node "relational.Ned" ,
            Node "Prelude.:" (
              Node "relational.Bob" ,
              Node "Prelude.:" (
                Node "relational.Sue" ,
                Node "Prelude.[]" ) ) ) )
  function "relational.q7._#lambda4" 1
    code
      declare_var 1 ILhs (("relational","q7._#lambda4"),1)
      declare_var 2 IFree
      return
        Node "Prelude.=:=" (
          Node "relational.age" (
            Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
            reference_var 1 ) ,
          reference_var 2 )
