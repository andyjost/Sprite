
module "infresiduate"
  import
    "Prelude"
  function "infresiduate.conc" 2
    code
      declare_var 1 ILhs (("infresiduate","conc"),1)
      declare_var 2 ILhs (("infresiduate","conc"),2)
      return
        Node "infresiduate.append" (
          reference_var 1 ,
          reference_var 2 )
  function "infresiduate.append" 2
    code
      declare_var 1 ILhs (("infresiduate","append"),1)
      declare_var 2 ILhs (("infresiduate","append"),2)
      ATable 1 2 flex
        reference_var 1
        "Prelude.[]" =>
          return
            reference_var 2
        "Prelude.:" =>
          declare_var 3 IVar 1 (("Prelude",":"),1)
          declare_var 4 IVar 1 (("Prelude",":"),2)
          return
            Node "Prelude.:" (
              reference_var 3 ,
              Node "infresiduate.append" (
                reference_var 4 ,
                reference_var 2 ) )
  function "infresiduate.rev" 2
    code
      declare_var 1 ILhs (("infresiduate","rev"),1)
      declare_var 2 ILhs (("infresiduate","rev"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "infresiduate.rev_#A0" (
              reference_var 1 )
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "infresiduate.rev_#A1" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 )
  function "infresiduate.rev_#A1" 3
    code
      declare_var 1 ILhs (("infresiduate","rev_#A1"),1)
      declare_var 3 ILhs (("infresiduate","rev_#A1"),2)
      declare_var 4 ILhs (("infresiduate","rev_#A1"),3)
      declare_var 5 IFree
      return
        Node "Prelude.&" (
          Node "Prelude.=:=" (
            Node "infresiduate.conc" (
              reference_var 5 ,
              Node "Prelude.:" (
                reference_var 3 ,
                Node "Prelude.[]" ) ) ,
            reference_var 1 ) ,
          Node "infresiduate.rev" (
            reference_var 5 ,
            reference_var 4 ) )
  function "infresiduate.rev_#A0" 1
    code
      declare_var 1 ILhs (("infresiduate","rev_#A0"),1)
      ATable 1 2 flex
        reference_var 1
        "Prelude.[]" =>
          return
            Node "Prelude.success"
        "Prelude.:" =>
          return
            exempt
  function "infresiduate.goal" 2
    code
      declare_var 1 ILhs (("infresiduate","goal"),1)
      declare_var 2 ILhs (("infresiduate","goal"),2)
      return
        Node "infresiduate.rev" (
          Node "Prelude.:" (
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 1 ) ,
              int 0 ) ,
            Node "Prelude.[]" ) ,
          reference_var 2 )
  function "infresiduate.main" 0
    code
      declare_var 1 IFree
      return
        Node "infresiduate.main_#B0" (
          Node "infresiduate.goal" (
            Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
            reference_var 1 ) ,
          reference_var 1 )
  function "infresiduate.main_#B0" 2
    code
      declare_var 2 ILhs (("infresiduate","main_#B0"),1)
      declare_var 1 ILhs (("infresiduate","main_#B0"),2)
      ATable 1 2 rigid
        reference_var 2
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            reference_var 1
