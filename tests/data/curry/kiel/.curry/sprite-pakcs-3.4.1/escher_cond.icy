(IProg "escher_cond" ["Prelude"] [(IDataType ("escher_cond","Alpha",0) [(("escher_cond","A",0),0),(("escher_cond","B",1),0),(("escher_cond","C",2),0),(("escher_cond","D",3),0)])] [(IFunction ("escher_cond","_inst#Prelude.Data#escher_cond.Alpha",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha",1) 2 []),(IFCall ("escher_cond","_impl#aValue#Prelude.Data#escher_cond.Alpha",2) [])]))))])))),(IFunction ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE0",13) [(IVar 2)])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE1",12) [(IVar 2)])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE2",11) [(IVar 2)])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE3",10) [(IVar 2)]))))])))),(IFunction ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE3",10) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE2",11) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE1",12) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("escher_cond","_impl#===#Prelude.Data#escher_cond.Alpha_CASE0",13) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("escher_cond","_impl#aValue#Prelude.Data#escher_cond.Alpha",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("escher_cond","A",0) []) (ICCall ("escher_cond","B",1) [])) (ICCall ("escher_cond","C",2) [])) (ICCall ("escher_cond","D",3) [])))))),(IFunction ("escher_cond","_inst#Prelude.Eq#escher_cond.Alpha",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha",4) 2 []),(IFCall ("escher_cond","_impl#/=#Prelude.Eq#escher_cond.Alpha",5) [])]))))])))),(IFunction ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE0",17) [(IVar 2)])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE1",16) [(IVar 2)])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE2",15) [(IVar 2)])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE3",14) [(IVar 2)]))))])))),(IFunction ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE3",14) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE2",15) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE1",16) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha_CASE0",17) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("escher_cond","A",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("escher_cond","B",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","C",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("escher_cond","D",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("escher_cond","_impl#/=#Prelude.Eq#escher_cond.Alpha",5) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFPCall ("escher_cond","_inst#Prelude.Eq#escher_cond.Alpha",3) 1 [])]))))),(IFunction ("escher_cond","membercheck",6) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","(,)",0) 2 (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 1 [0])),(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IFCall ("escher_cond","membercheck_CASE0",18) [(IVar 3),(IVar 2)]))))])))),(IFunction ("escher_cond","membercheck_CASE0",18) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 2)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 3 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 3 [0])),(IVarAssign 5 (IVarAccess 3 [1]))] (IReturn (IFCall ("escher_cond","membercheck_COMPLEXCASE1",19) [(IVar 2),(IVar 5),(IFCall ("escher_cond","_impl#==#Prelude.Eq#escher_cond.Alpha",4) [(IVar 2),(IVar 4)])]))))])))),(IFunction ("escher_cond","membercheck_COMPLEXCASE1",19) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 5),(IVarDecl 6)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1])),(IVarAssign 6 (IVarAccess 0 [2]))] (ICaseCons 6 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("escher_cond","membercheck",6) [(ICCall ("Prelude","(,)",0) [(IVar 2),(IVar 5)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("escher_cond","goal1",7) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("escher_cond","membercheck",6) [(ICCall ("Prelude","(,)",0) [(ICCall ("escher_cond","B",1) []),(ICCall ("Prelude",":",1) [(ICCall ("escher_cond","A",0) []),(ICCall ("Prelude",":",1) [(ICCall ("escher_cond","B",1) []),(ICCall ("Prelude","[]",0) [])])])])]))))),(IFunction ("escher_cond","goal2",8) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("escher_cond","membercheck",6) [(ICCall ("Prelude","(,)",0) [(ICCall ("escher_cond","C",2) []),(ICCall ("Prelude",":",1) [(ICCall ("escher_cond","A",0) []),(ICCall ("Prelude",":",1) [(ICCall ("escher_cond","B",1) []),(ICCall ("Prelude","[]",0) [])])])])]))))),(IFunction ("escher_cond","goal3",9) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("escher_cond","membercheck",6) [(ICCall ("Prelude","(,)",0) [(IVar 1),(ICCall ("Prelude",":",1) [(ICCall ("escher_cond","A",0) []),(ICCall ("Prelude",":",1) [(ICCall ("escher_cond","B",1) []),(ICCall ("Prelude","[]",0) [])])])])])))))])