
module "nondetfunc"
  import
    "Prelude"
  data "nondetfunc.Nat"
    constructor "nondetfunc.o" 0 0
    constructor "nondetfunc.s" 1 1
  function "nondetfunc.choose" 2
    code
      declare_var 1 ILhs (("nondetfunc","choose"),1)
      declare_var 2 ILhs (("nondetfunc","choose"),2)
      return
        Or (
          reference_var 1 ,
          reference_var 2 )
  function "nondetfunc.insert" 2
    code
      declare_var 1 ILhs (("nondetfunc","insert"),1)
      declare_var 2 ILhs (("nondetfunc","insert"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "Prelude.:" (
              reference_var 1 ,
              Node "Prelude.[]" )
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "nondetfunc.choose" (
              Node "Prelude.:" (
                reference_var 1 ,
                Node "Prelude.:" (
                  reference_var 3 ,
                  reference_var 4 ) ) ,
              Node "Prelude.:" (
                reference_var 3 ,
                Node "nondetfunc.insert" (
                  reference_var 1 ,
                  reference_var 4 ) ) )
  function "nondetfunc.permut" 1
    code
      declare_var 1 ILhs (("nondetfunc","permut"),1)
      ATable 1 2 flex
        reference_var 1
        "Prelude.[]" =>
          return
            Node "Prelude.[]"
        "Prelude.:" =>
          declare_var 2 IVar 1 (("Prelude",":"),1)
          declare_var 3 IVar 1 (("Prelude",":"),2)
          return
            Node "nondetfunc.insert" (
              reference_var 2 ,
              Node "nondetfunc.permut" (
                reference_var 3 ) )
  function "nondetfunc.sort" 2
    code
      declare_var 1 ILhs (("nondetfunc","sort"),1)
      declare_var 2 ILhs (("nondetfunc","sort"),2)
      return
        Node "nondetfunc.rId" (
          partial 1 (
            Node "nondetfunc.sorted" (
              reference_var 1 ) ) ,
          Node "nondetfunc.permut" (
            reference_var 2 ) )
  function "nondetfunc.rId" 2
    code
      declare_var 1 ILhs (("nondetfunc","rId"),1)
      declare_var 2 ILhs (("nondetfunc","rId"),2)
      return
        Node "nondetfunc.rId_#B0" (
          Node "Prelude.apply" (
            reference_var 1 ,
            reference_var 2 ) ,
          reference_var 2 )
  function "nondetfunc.rId_#B0" 2
    code
      declare_var 3 ILhs (("nondetfunc","rId_#B0"),1)
      declare_var 2 ILhs (("nondetfunc","rId_#B0"),2)
      ATable 1 2 rigid
        reference_var 3
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            reference_var 2
  function "nondetfunc.wheresort" 2
    code
      declare_var 1 ILhs (("nondetfunc","wheresort"),1)
      declare_var 2 ILhs (("nondetfunc","wheresort"),2)
      comment "[(3,[])]"
      declare_var 3 IBind
      assign 3
        Node "nondetfunc.permut" (
          reference_var 2 )
      return
        Node "nondetfunc.wheresort_#A0" (
          reference_var 1 ,
          reference_var 3 )
  function "nondetfunc.wheresort_#A0" 2
    code
      declare_var 1 ILhs (("nondetfunc","wheresort_#A0"),1)
      declare_var 3 ILhs (("nondetfunc","wheresort_#A0"),2)
      return
        Node "nondetfunc.wheresort_#A0_#B2" (
          Node "nondetfunc.sorted" (
            reference_var 1 ,
            reference_var 3 ) ,
          reference_var 3 )
  function "nondetfunc.wheresort_#A0_#B2" 2
    code
      declare_var 4 ILhs (("nondetfunc","wheresort_#A0_#B2"),1)
      declare_var 3 ILhs (("nondetfunc","wheresort_#A0_#B2"),2)
      ATable 1 2 rigid
        reference_var 4
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            reference_var 3
  function "nondetfunc.strictsort" 2
    code
      declare_var 1 ILhs (("nondetfunc","strictsort"),1)
      declare_var 2 ILhs (("nondetfunc","strictsort"),2)
      declare_var 3 IFree
      return
        Node "nondetfunc.strictsort_#B4" (
          Node "Prelude.&" (
            Node "Prelude.=:=" (
              reference_var 3 ,
              Node "nondetfunc.permut" (
                reference_var 2 ) ) ,
            Node "Prelude.=:=" (
              Node "nondetfunc.sorted" (
                reference_var 1 ,
                reference_var 3 ) ,
              Node "Prelude.True" ) ) ,
          reference_var 3 )
  function "nondetfunc.strictsort_#B4" 2
    code
      declare_var 4 ILhs (("nondetfunc","strictsort_#B4"),1)
      declare_var 3 ILhs (("nondetfunc","strictsort_#B4"),2)
      ATable 1 2 rigid
        reference_var 4
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            reference_var 3
  function "nondetfunc.sorted" 2
    code
      declare_var 1 ILhs (("nondetfunc","sorted"),1)
      declare_var 2 ILhs (("nondetfunc","sorted"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "Prelude.True"
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "nondetfunc.sorted_#A2" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 )
  function "nondetfunc.sorted_#A2" 3
    code
      declare_var 1 ILhs (("nondetfunc","sorted_#A2"),1)
      declare_var 3 ILhs (("nondetfunc","sorted_#A2"),2)
      declare_var 4 ILhs (("nondetfunc","sorted_#A2"),3)
      ATable 1 2 flex
        reference_var 4
        "Prelude.[]" =>
          return
            Node "Prelude.True"
        "Prelude.:" =>
          declare_var 5 IVar 4 (("Prelude",":"),1)
          declare_var 6 IVar 4 (("Prelude",":"),2)
          return
            Node "nondetfunc.sorted_#A1" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 5 ,
              reference_var 6 )
  function "nondetfunc.sorted_#A1" 4
    code
      declare_var 1 ILhs (("nondetfunc","sorted_#A1"),1)
      declare_var 3 ILhs (("nondetfunc","sorted_#A1"),2)
      declare_var 5 ILhs (("nondetfunc","sorted_#A1"),3)
      declare_var 6 ILhs (("nondetfunc","sorted_#A1"),4)
      return
        Node "nondetfunc.sorted_#A1_#B6" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<=" (
                reference_var 1 ) ,
              reference_var 3 ) ,
            reference_var 5 ) ,
          reference_var 1 ,
          reference_var 5 ,
          reference_var 6 )
  function "nondetfunc.sorted_#A1_#B6" 4
    code
      declare_var 7 ILhs (("nondetfunc","sorted_#A1_#B6"),1)
      declare_var 1 ILhs (("nondetfunc","sorted_#A1_#B6"),2)
      declare_var 5 ILhs (("nondetfunc","sorted_#A1_#B6"),3)
      declare_var 6 ILhs (("nondetfunc","sorted_#A1_#B6"),4)
      ATable 1 2 rigid
        reference_var 7
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "nondetfunc.sorted" (
              reference_var 1 ,
              Node "Prelude.:" (
                reference_var 5 ,
                reference_var 6 ) )
  function "nondetfunc.goal1" 0
    code
      return
        Node "nondetfunc.sort" (
          Node "Prelude._inst#Prelude.Ord#Prelude.Int" ,
          Node "Prelude.:" (
            int 4 ,
            Node "Prelude.:" (
              int 3 ,
              Node "Prelude.:" (
                int 2 ,
                Node "Prelude.:" (
                  int 1 ,
                  Node "Prelude.[]" ) ) ) ) )
  function "nondetfunc.goal2" 0
    code
      return
        Node "nondetfunc.wheresort" (
          Node "Prelude._inst#Prelude.Ord#Prelude.Int" ,
          Node "Prelude.:" (
            int 4 ,
            Node "Prelude.:" (
              int 3 ,
              Node "Prelude.:" (
                int 2 ,
                Node "Prelude.:" (
                  int 1 ,
                  Node "Prelude.[]" ) ) ) ) )
  function "nondetfunc.goal3" 0
    code
      return
        Node "nondetfunc.strictsort" (
          Node "Prelude._inst#Prelude.Ord#Prelude.Int" ,
          Node "Prelude.:" (
            int 4 ,
            Node "Prelude.:" (
              int 3 ,
              Node "Prelude.:" (
                int 2 ,
                Node "Prelude.:" (
                  int 1 ,
                  Node "Prelude.[]" ) ) ) ) )
  function "nondetfunc.coin" 0
    code
      return
        Or (
          Node "nondetfunc.o" ,
          Node "nondetfunc.s" (
            Node "nondetfunc.o" ) )
  function "nondetfunc.add" 2
    code
      declare_var 1 ILhs (("nondetfunc","add"),1)
      declare_var 2 ILhs (("nondetfunc","add"),2)
      ATable 1 2 flex
        reference_var 1
        "nondetfunc.o" =>
          return
            reference_var 2
        "nondetfunc.s" =>
          declare_var 3 IVar 1 (("nondetfunc","s"),1)
          return
            Node "nondetfunc.s" (
              Node "nondetfunc.add" (
                reference_var 3 ,
                reference_var 2 ) )
  function "nondetfunc.double" 1
    code
      declare_var 1 ILhs (("nondetfunc","double"),1)
      return
        Node "nondetfunc.add" (
          reference_var 1 ,
          reference_var 1 )
  function "nondetfunc.goal4" 0
    code
      return
        Node "nondetfunc.double" (
          Node "nondetfunc.coin" )
