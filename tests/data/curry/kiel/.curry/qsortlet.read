
module "qsortlet"
  import
    "Prelude"
  function "qsortlet.split" 3
    code
      declare_var 1 ILhs (("qsortlet","split"),1)
      declare_var 2 ILhs (("qsortlet","split"),2)
      declare_var 3 ILhs (("qsortlet","split"),3)
      ATable 1 2 flex
        reference_var 3
        "Prelude.[]" =>
          return
            Node "Prelude.(,)" (
              Node "Prelude.[]" ,
              Node "Prelude.[]" )
        "Prelude.:" =>
          declare_var 4 IVar 3 (("Prelude",":"),1)
          declare_var 5 IVar 3 (("Prelude",":"),2)
          return
            Node "qsortlet.split_#A2" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 4 ,
              reference_var 5 )
  function "qsortlet.split_#A2" 4
    code
      declare_var 1 ILhs (("qsortlet","split_#A2"),1)
      declare_var 2 ILhs (("qsortlet","split_#A2"),2)
      declare_var 4 ILhs (("qsortlet","split_#A2"),3)
      declare_var 5 ILhs (("qsortlet","split_#A2"),4)
      comment "[(6,[]),(7,[]),(8,[])]"
      declare_var 6 IBind
      assign 6
        Node "qsortlet.split" (
          reference_var 1 ,
          reference_var 2 ,
          reference_var 5 )
      declare_var 7 IBind
      assign 7
        Node "qsortlet.split._#selFP2#l" (
          reference_var 6 )
      declare_var 8 IBind
      assign 8
        Node "qsortlet.split._#selFP3#r" (
          reference_var 6 )
      return
        Node "qsortlet.split_#A1" (
          reference_var 1 ,
          reference_var 2 ,
          reference_var 4 ,
          reference_var 7 ,
          reference_var 8 )
  function "qsortlet.split_#A1" 5
    code
      declare_var 1 ILhs (("qsortlet","split_#A1"),1)
      declare_var 2 ILhs (("qsortlet","split_#A1"),2)
      declare_var 4 ILhs (("qsortlet","split_#A1"),3)
      declare_var 7 ILhs (("qsortlet","split_#A1"),4)
      declare_var 8 ILhs (("qsortlet","split_#A1"),5)
      return
        Node "qsortlet.split_#A1_#B0" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.>=" (
                reference_var 1 ) ,
              reference_var 2 ) ,
            reference_var 4 ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 4 ,
          reference_var 7 ,
          reference_var 8 )
  function "qsortlet.split_#A1_#B0" 6
    code
      declare_var 9 ILhs (("qsortlet","split_#A1_#B0"),1)
      declare_var 1 ILhs (("qsortlet","split_#A1_#B0"),2)
      declare_var 2 ILhs (("qsortlet","split_#A1_#B0"),3)
      declare_var 4 ILhs (("qsortlet","split_#A1_#B0"),4)
      declare_var 7 ILhs (("qsortlet","split_#A1_#B0"),5)
      declare_var 8 ILhs (("qsortlet","split_#A1_#B0"),6)
      ATable 1 2 rigid
        reference_var 9
        "Prelude.False" =>
          return
            Node "qsortlet.split_#A0" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 4 ,
              reference_var 7 ,
              reference_var 8 )
        "Prelude.True" =>
          return
            Node "Prelude.(,)" (
              Node "Prelude.:" (
                reference_var 4 ,
                reference_var 7 ) ,
              reference_var 8 )
  function "qsortlet.split_#A0" 5
    code
      declare_var 1 ILhs (("qsortlet","split_#A0"),1)
      declare_var 2 ILhs (("qsortlet","split_#A0"),2)
      declare_var 4 ILhs (("qsortlet","split_#A0"),3)
      declare_var 7 ILhs (("qsortlet","split_#A0"),4)
      declare_var 8 ILhs (("qsortlet","split_#A0"),5)
      return
        Node "qsortlet.split_#A0_#B2" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<" (
                reference_var 1 ) ,
              reference_var 2 ) ,
            reference_var 4 ) ,
          reference_var 4 ,
          reference_var 7 ,
          reference_var 8 )
  function "qsortlet.split_#A0_#B2" 4
    code
      declare_var 9 ILhs (("qsortlet","split_#A0_#B2"),1)
      declare_var 4 ILhs (("qsortlet","split_#A0_#B2"),2)
      declare_var 7 ILhs (("qsortlet","split_#A0_#B2"),3)
      declare_var 8 ILhs (("qsortlet","split_#A0_#B2"),4)
      ATable 1 2 rigid
        reference_var 9
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "Prelude.(,)" (
              reference_var 7 ,
              Node "Prelude.:" (
                reference_var 4 ,
                reference_var 8 ) )
  function "qsortlet.split._#selFP2#l" 1
    code
      declare_var 1 ILhs (("qsortlet","split._#selFP2#l"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "qsortlet.split._#selFP3#r" 1
    code
      declare_var 1 ILhs (("qsortlet","split._#selFP3#r"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "qsortlet.qsort" 2
    code
      declare_var 1 ILhs (("qsortlet","qsort"),1)
      declare_var 2 ILhs (("qsortlet","qsort"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            Node "Prelude.[]"
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "qsortlet.qsort_#A3" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 )
  function "qsortlet.qsort_#A3" 3
    code
      declare_var 1 ILhs (("qsortlet","qsort_#A3"),1)
      declare_var 3 ILhs (("qsortlet","qsort_#A3"),2)
      declare_var 4 ILhs (("qsortlet","qsort_#A3"),3)
      comment "[(5,[]),(6,[]),(7,[])]"
      declare_var 5 IBind
      assign 5
        Node "qsortlet.split" (
          reference_var 1 ,
          reference_var 3 ,
          reference_var 4 )
      declare_var 6 IBind
      assign 6
        Node "qsortlet.qsort._#selFP5#l" (
          reference_var 5 )
      declare_var 7 IBind
      assign 7
        Node "qsortlet.qsort._#selFP6#r" (
          reference_var 5 )
      return
        Node "Prelude.++" (
          Node "qsortlet.qsort" (
            reference_var 1 ,
            reference_var 6 ) ,
          Node "Prelude.:" (
            reference_var 3 ,
            Node "qsortlet.qsort" (
              reference_var 1 ,
              reference_var 7 ) ) )
  function "qsortlet.qsort._#selFP5#l" 1
    code
      declare_var 1 ILhs (("qsortlet","qsort._#selFP5#l"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "qsortlet.qsort._#selFP6#r" 1
    code
      declare_var 1 ILhs (("qsortlet","qsort._#selFP6#r"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "qsortlet.goal" 0
    code
      return
        Node "qsortlet.qsort" (
          Node "Prelude._inst#Prelude.Ord#Prelude.Int" ,
          Node "Prelude.:" (
            int 8 ,
            Node "Prelude.:" (
              int 6 ,
              Node "Prelude.:" (
                int 7 ,
                Node "Prelude.:" (
                  int 5 ,
                  Node "Prelude.:" (
                    int 4 ,
                    Node "Prelude.:" (
                      int 2 ,
                      Node "Prelude.:" (
                        int 3 ,
                        Node "Prelude.:" (
                          int 1 ,
                          Node "Prelude.[]" ) ) ) ) ) ) ) ) )
