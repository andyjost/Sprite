Prog "infresiduate" ["Prelude"] [] [Func ("infresiduate","conc") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("infresiduate","append") [Var 1,Var 2])),Func ("infresiduate","append") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("infresiduate","append") [Var 4,Var 2]])])),Func ("infresiduate","rev") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","success") [])]),Branch (Pattern ("Prelude",":") [3,4]) (Free [5] (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("infresiduate","conc") [Var 5,Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Var 1],Comb FuncCall ("infresiduate","rev") [Var 5,Var 4]]))])),Func ("infresiduate","goal") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("infresiduate","rev") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)],Comb ConsCall ("Prelude","[]") []],Var 2]))] []