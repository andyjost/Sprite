
module "inflists"
  import
    "Prelude"
  function "inflists.from" 2
    code
      declare_var 1 ILhs (("inflists","from"),1)
      declare_var 2 ILhs (("inflists","from"),2)
      return
        Node "Prelude.:" (
          reference_var 2 ,
          Node "inflists.from" (
            reference_var 1 ,
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.+" (
                  reference_var 1 ) ,
                reference_var 2 ) ,
              Node "Prelude.apply" (
                Node "Prelude.fromInt" (
                  reference_var 1 ) ,
                int 1 ) ) ) )
  function "inflists.fibs" 1
    code
      declare_var 1 ILhs (("inflists","fibs"),1)
      return
        Node "inflists.fibgen" (
          reference_var 1 ,
          Node "Prelude.apply" (
            Node "Prelude.fromInt" (
              reference_var 1 ) ,
            int 1 ) ,
          Node "Prelude.apply" (
            Node "Prelude.fromInt" (
              reference_var 1 ) ,
            int 1 ) )
  function "inflists.fibgen" 3
    code
      declare_var 1 ILhs (("inflists","fibgen"),1)
      declare_var 2 ILhs (("inflists","fibgen"),2)
      declare_var 3 ILhs (("inflists","fibgen"),3)
      return
        Node "Prelude.:" (
          reference_var 2 ,
          Node "inflists.fibgen" (
            reference_var 1 ,
            reference_var 3 ,
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.+" (
                  reference_var 1 ) ,
                reference_var 2 ) ,
              reference_var 3 ) ) )
  function "inflists.goal1" 0
    code
      return
        Node "Prelude.take" (
          int 10 ,
          Node "inflists.fibs" (
            Node "Prelude._inst#Prelude.Num#Prelude.Int" ) )
  function "inflists.primes" 1
    code
      declare_var 1 ILhs (("inflists","primes"),1)
      return
        Node "inflists.sieve" (
          reference_var 1 ,
          Node "inflists.from" (
            Node "Prelude._super#Prelude.Real#Prelude.Num" (
              Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                reference_var 1 ) ) ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                Node "Prelude._super#Prelude.Real#Prelude.Num" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 1 ) ) ) ,
              int 2 ) ) )
  function "inflists.sieve" 2
    code
      declare_var 1 ILhs (("inflists","sieve"),1)
      declare_var 2 ILhs (("inflists","sieve"),2)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            exempt
        "Prelude.:" =>
          declare_var 3 IVar 2 (("Prelude",":"),1)
          declare_var 4 IVar 2 (("Prelude",":"),2)
          return
            Node "Prelude.:" (
              reference_var 3 ,
              Node "inflists.sieve" (
                reference_var 1 ,
                Node "Prelude.filter" (
                  partial 1 (
                    Node "inflists.sieve._#lambda1" (
                      reference_var 3 ,
                      reference_var 1 ) ) ,
                  reference_var 4 ) ) )
  function "inflists.sieve._#lambda1" 3
    code
      declare_var 1 ILhs (("inflists","sieve._#lambda1"),1)
      declare_var 2 ILhs (("inflists","sieve._#lambda1"),2)
      declare_var 3 ILhs (("inflists","sieve._#lambda1"),3)
      return
        Node "Prelude.apply" (
          Node "Prelude.apply" (
            Node "Prelude.>" (
              Node "Prelude._super#Prelude.Real#Prelude.Ord" (
                Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                  reference_var 2 ) ) ) ,
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.mod" (
                  reference_var 2 ) ,
                reference_var 3 ) ,
              reference_var 1 ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.fromInt" (
              Node "Prelude._super#Prelude.Real#Prelude.Num" (
                Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                  reference_var 2 ) ) ) ,
            int 0 ) )
  function "inflists.goal2" 0
    code
      return
        Node "Prelude.take" (
          int 5 ,
          Node "inflists.primes" (
            Node "Prelude._inst#Prelude.Integral#Prelude.Int" ) )
  function "inflists.ordMerge" 3
    code
      declare_var 1 ILhs (("inflists","ordMerge"),1)
      declare_var 2 ILhs (("inflists","ordMerge"),2)
      declare_var 3 ILhs (("inflists","ordMerge"),3)
      ATable 1 2 flex
        reference_var 2
        "Prelude.[]" =>
          return
            exempt
        "Prelude.:" =>
          declare_var 4 IVar 2 (("Prelude",":"),1)
          declare_var 5 IVar 2 (("Prelude",":"),2)
          return
            Node "inflists.ordMerge_#A3" (
              reference_var 1 ,
              reference_var 3 ,
              reference_var 4 ,
              reference_var 5 )
  function "inflists.ordMerge_#A3" 4
    code
      declare_var 1 ILhs (("inflists","ordMerge_#A3"),1)
      declare_var 3 ILhs (("inflists","ordMerge_#A3"),2)
      declare_var 4 ILhs (("inflists","ordMerge_#A3"),3)
      declare_var 5 ILhs (("inflists","ordMerge_#A3"),4)
      ATable 1 2 flex
        reference_var 3
        "Prelude.[]" =>
          return
            exempt
        "Prelude.:" =>
          declare_var 6 IVar 3 (("Prelude",":"),1)
          declare_var 7 IVar 3 (("Prelude",":"),2)
          return
            Node "inflists.ordMerge_#A2" (
              reference_var 1 ,
              reference_var 4 ,
              reference_var 5 ,
              reference_var 6 ,
              reference_var 7 )
  function "inflists.ordMerge_#A2" 5
    code
      declare_var 1 ILhs (("inflists","ordMerge_#A2"),1)
      declare_var 4 ILhs (("inflists","ordMerge_#A2"),2)
      declare_var 5 ILhs (("inflists","ordMerge_#A2"),3)
      declare_var 6 ILhs (("inflists","ordMerge_#A2"),4)
      declare_var 7 ILhs (("inflists","ordMerge_#A2"),5)
      return
        Node "inflists.ordMerge_#A2_#B0" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.==" (
                Node "Prelude._super#Prelude.Ord#Prelude.Eq" (
                  reference_var 1 ) ) ,
              reference_var 4 ) ,
            reference_var 6 ) ,
          reference_var 1 ,
          reference_var 4 ,
          reference_var 5 ,
          reference_var 6 ,
          reference_var 7 )
  function "inflists.ordMerge_#A2_#B0" 6
    code
      declare_var 8 ILhs (("inflists","ordMerge_#A2_#B0"),1)
      declare_var 1 ILhs (("inflists","ordMerge_#A2_#B0"),2)
      declare_var 4 ILhs (("inflists","ordMerge_#A2_#B0"),3)
      declare_var 5 ILhs (("inflists","ordMerge_#A2_#B0"),4)
      declare_var 6 ILhs (("inflists","ordMerge_#A2_#B0"),5)
      declare_var 7 ILhs (("inflists","ordMerge_#A2_#B0"),6)
      ATable 1 2 rigid
        reference_var 8
        "Prelude.False" =>
          return
            Node "inflists.ordMerge_#A1" (
              reference_var 1 ,
              reference_var 4 ,
              reference_var 5 ,
              reference_var 6 ,
              reference_var 7 )
        "Prelude.True" =>
          return
            Node "Prelude.:" (
              reference_var 4 ,
              Node "inflists.ordMerge" (
                reference_var 1 ,
                reference_var 5 ,
                reference_var 7 ) )
  function "inflists.ordMerge_#A1" 5
    code
      declare_var 1 ILhs (("inflists","ordMerge_#A1"),1)
      declare_var 4 ILhs (("inflists","ordMerge_#A1"),2)
      declare_var 5 ILhs (("inflists","ordMerge_#A1"),3)
      declare_var 6 ILhs (("inflists","ordMerge_#A1"),4)
      declare_var 7 ILhs (("inflists","ordMerge_#A1"),5)
      return
        Node "inflists.ordMerge_#A1_#B2" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<" (
                reference_var 1 ) ,
              reference_var 4 ) ,
            reference_var 6 ) ,
          reference_var 1 ,
          reference_var 4 ,
          reference_var 5 ,
          reference_var 6 ,
          reference_var 7 )
  function "inflists.ordMerge_#A1_#B2" 6
    code
      declare_var 8 ILhs (("inflists","ordMerge_#A1_#B2"),1)
      declare_var 1 ILhs (("inflists","ordMerge_#A1_#B2"),2)
      declare_var 4 ILhs (("inflists","ordMerge_#A1_#B2"),3)
      declare_var 5 ILhs (("inflists","ordMerge_#A1_#B2"),4)
      declare_var 6 ILhs (("inflists","ordMerge_#A1_#B2"),5)
      declare_var 7 ILhs (("inflists","ordMerge_#A1_#B2"),6)
      ATable 1 2 rigid
        reference_var 8
        "Prelude.False" =>
          return
            Node "inflists.ordMerge_#A0" (
              reference_var 1 ,
              reference_var 4 ,
              reference_var 5 ,
              reference_var 6 ,
              reference_var 7 )
        "Prelude.True" =>
          return
            Node "Prelude.:" (
              reference_var 4 ,
              Node "inflists.ordMerge" (
                reference_var 1 ,
                reference_var 5 ,
                Node "Prelude.:" (
                  reference_var 6 ,
                  reference_var 7 ) ) )
  function "inflists.ordMerge_#A0" 5
    code
      declare_var 1 ILhs (("inflists","ordMerge_#A0"),1)
      declare_var 4 ILhs (("inflists","ordMerge_#A0"),2)
      declare_var 5 ILhs (("inflists","ordMerge_#A0"),3)
      declare_var 6 ILhs (("inflists","ordMerge_#A0"),4)
      declare_var 7 ILhs (("inflists","ordMerge_#A0"),5)
      return
        Node "inflists.ordMerge_#A0_#B4" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.>" (
                reference_var 1 ) ,
              reference_var 4 ) ,
            reference_var 6 ) ,
          reference_var 1 ,
          reference_var 4 ,
          reference_var 5 ,
          reference_var 6 ,
          reference_var 7 )
  function "inflists.ordMerge_#A0_#B4" 6
    code
      declare_var 8 ILhs (("inflists","ordMerge_#A0_#B4"),1)
      declare_var 1 ILhs (("inflists","ordMerge_#A0_#B4"),2)
      declare_var 4 ILhs (("inflists","ordMerge_#A0_#B4"),3)
      declare_var 5 ILhs (("inflists","ordMerge_#A0_#B4"),4)
      declare_var 6 ILhs (("inflists","ordMerge_#A0_#B4"),5)
      declare_var 7 ILhs (("inflists","ordMerge_#A0_#B4"),6)
      ATable 1 2 rigid
        reference_var 8
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "Prelude.:" (
              reference_var 6 ,
              Node "inflists.ordMerge" (
                reference_var 1 ,
                Node "Prelude.:" (
                  reference_var 4 ,
                  reference_var 5 ) ,
                reference_var 7 ) )
  function "inflists.hamming" 2
    code
      declare_var 1 ILhs (("inflists","hamming"),1)
      declare_var 2 ILhs (("inflists","hamming"),2)
      return
        Node "Prelude.:" (
          Node "Prelude.apply" (
            Node "Prelude.fromInt" (
              reference_var 1 ) ,
            int 1 ) ,
          Node "inflists.ordMerge" (
            reference_var 2 ,
            Node "Prelude.map" (
              partial 1 (
                Node "Prelude.flip" (
                  Node "Prelude.*" (
                    reference_var 1 ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.fromInt" (
                      reference_var 1 ) ,
                    int 2 ) ) ) ,
              Node "inflists.hamming" (
                reference_var 1 ,
                reference_var 2 ) ) ,
            Node "inflists.ordMerge" (
              reference_var 2 ,
              Node "Prelude.map" (
                partial 1 (
                  Node "Prelude.flip" (
                    Node "Prelude.*" (
                      reference_var 1 ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.fromInt" (
                        reference_var 1 ) ,
                      int 3 ) ) ) ,
                Node "inflists.hamming" (
                  reference_var 1 ,
                  reference_var 2 ) ) ,
              Node "Prelude.map" (
                partial 1 (
                  Node "Prelude.flip" (
                    Node "Prelude.*" (
                      reference_var 1 ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.fromInt" (
                        reference_var 1 ) ,
                      int 5 ) ) ) ,
                Node "inflists.hamming" (
                  reference_var 1 ,
                  reference_var 2 ) ) ) ) )
  function "inflists.goal3" 0
    code
      return
        Node "Prelude.take" (
          int 10 ,
          Node "inflists.hamming" (
            Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
            Node "Prelude._inst#Prelude.Ord#Prelude.Int" ) )
