interface higher where {
import Prelude;
foldr_ 3 :: (a -> b -> b) -> b -> [a] -> b;
g1 0 :: Prelude.Num a => [a];
g2 0 :: Prelude.Num a => [a];
g3 0 :: Prelude.Num a => a;
g4 0 :: Prelude.Num a => a;
g5 0 :: Prelude.Num a => a;
inc 1 :: Prelude.Num a => a -> a;
map_ 2 :: (a -> b) -> [a] -> [b];
hiding class Prelude.Num a;
instance Prelude.Num Prelude.Float {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {
  fromInt 1;
  signum 1;
  abs 1;
  negate 1;
  (*) 2;
  (-) 2;
  (+) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Float;
hiding data Prelude.Int
}