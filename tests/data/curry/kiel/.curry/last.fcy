Prog "last" ["Prelude"] [] [Func ("last","append") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("last","append") [Var 4,Var 2]])])),Func ("last","last") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [1] (Free [2,3] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb FuncCall ("last","append") [Var 3,Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []]],Var 1]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("last","goal") 0 Public (TCons ("Prelude","Int") []) (Rule [] (Comb FuncCall ("last","last") [Comb ConsCall ("Prelude",":") [Lit (Intc 1),Comb ConsCall ("Prelude",":") [Lit (Intc 2),Comb ConsCall ("Prelude",":") [Lit (Intc 3),Comb ConsCall ("Prelude",":") [Lit (Intc 4),Comb ConsCall ("Prelude","[]") []]]]]]))] []