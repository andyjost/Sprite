
module "diamond"
  import
    "Prelude"
  function "diamond.diamond" 3
    code
      declare_var 1 ILhs (("diamond","diamond"),1)
      declare_var 2 ILhs (("diamond","diamond"),2)
      declare_var 3 ILhs (("diamond","diamond"),3)
      return
        Node "Prelude.++" (
          Node "diamond.diamond.lineloop1.2" (
            reference_var 3 ,
            reference_var 1 ,
            reference_var 2 ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                Node "Prelude._super#Prelude.Real#Prelude.Num" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 1 ) ) ) ,
              int 1 ) ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                Node "Prelude._super#Prelude.Real#Prelude.Num" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 1 ) ) ) ,
              int 1 ) ) ,
          Node "diamond.diamond.lineloop2.2" (
            reference_var 3 ,
            reference_var 1 ,
            reference_var 2 ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                Node "Prelude._super#Prelude.Real#Prelude.Num" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 1 ) ) ) ,
              int 1 ) ,
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.+" (
                  Node "Prelude._super#Prelude.Real#Prelude.Num" (
                    Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                      reference_var 1 ) ) ) ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.-" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 1 ) ) ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.apply" (
                        Node "Prelude.*" (
                          Node "Prelude._super#Prelude.Real#Prelude.Num" (
                            Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                              reference_var 1 ) ) ) ,
                        reference_var 3 ) ,
                      reference_var 3 ) ) ,
                  reference_var 3 ) ) ,
              Node "Prelude.apply" (
                Node "Prelude.fromInt" (
                  Node "Prelude._super#Prelude.Real#Prelude.Num" (
                    Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                      reference_var 1 ) ) ) ,
                int 2 ) ) ) )
  function "diamond.diamond.line.2" 5
    code
      declare_var 1 ILhs (("diamond","diamond.line.2"),1)
      declare_var 2 ILhs (("diamond","diamond.line.2"),2)
      declare_var 3 ILhs (("diamond","diamond.line.2"),3)
      declare_var 4 ILhs (("diamond","diamond.line.2"),4)
      declare_var 5 ILhs (("diamond","diamond.line.2"),5)
      return
        Node "Prelude.++" (
          Node "diamond.tab" (
            Node "Prelude._super#Prelude.Ord#Prelude.Eq" (
              Node "Prelude._super#Prelude.Real#Prelude.Ord" (
                Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                  reference_var 2 ) ) ) ,
            Node "Prelude._super#Prelude.Real#Prelude.Num" (
              Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                reference_var 2 ) ) ,
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.*" (
                  Node "Prelude._super#Prelude.Real#Prelude.Num" (
                    Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                      reference_var 2 ) ) ) ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.-" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    reference_var 1 ) ,
                  reference_var 5 ) ) ,
              Node "Prelude.apply" (
                Node "Prelude.apply" (
                  Node "Prelude.+" (
                    Node "Prelude._super#Prelude.Real#Prelude.Num" (
                      Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                        reference_var 2 ) ) ) ,
                  Node "diamond.size" (
                    reference_var 2 ,
                    Node "Prelude._super#Prelude.Real#Prelude.Num" (
                      Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                        reference_var 2 ) ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.apply" (
                        Node "Prelude.*" (
                          Node "Prelude._super#Prelude.Real#Prelude.Num" (
                            Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                              reference_var 2 ) ) ) ,
                        reference_var 1 ) ,
                      reference_var 1 ) ) ) ,
                Node "Prelude.apply" (
                  Node "Prelude.fromInt" (
                    Node "Prelude._super#Prelude.Real#Prelude.Num" (
                      Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                        reference_var 2 ) ) ) ,
                  int 1 ) ) ) ) ,
          Node "diamond.diamond.line.2.lineloop.8" (
            reference_var 5 ,
            reference_var 1 ,
            reference_var 2 ,
            reference_var 3 ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                Node "Prelude._super#Prelude.Real#Prelude.Num" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 2 ) ) ) ,
              int 1 ) ,
            reference_var 4 ) )
  function "diamond.diamond.line.2.putValue.8" 5
    code
      declare_var 1 ILhs (("diamond","diamond.line.2.putValue.8"),1)
      declare_var 2 ILhs (("diamond","diamond.line.2.putValue.8"),2)
      declare_var 3 ILhs (("diamond","diamond.line.2.putValue.8"),3)
      declare_var 4 ILhs (("diamond","diamond.line.2.putValue.8"),4)
      declare_var 5 ILhs (("diamond","diamond.line.2.putValue.8"),5)
      return
        Node "Prelude.++" (
          Node "diamond.tab" (
            Node "Prelude._inst#Prelude.Eq#Prelude.Int" ,
            Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
            Node "Prelude._impl#-#Prelude.Num#Prelude.Int" (
              Node "Prelude._impl#+#Prelude.Num#Prelude.Int" (
                Node "diamond.size" (
                  reference_var 2 ,
                  Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
                  Node "Prelude.apply" (
                    Node "Prelude.apply" (
                      Node "Prelude.*" (
                        Node "Prelude._super#Prelude.Real#Prelude.Num" (
                          Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                            reference_var 2 ) ) ) ,
                      reference_var 1 ) ,
                    reference_var 1 ) ) ,
                int 1 ) ,
              Node "diamond.size" (
                reference_var 3 ,
                Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
                reference_var 5 ) ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.show" (
              reference_var 4 ) ,
            reference_var 5 ) )
  function "diamond.diamond.line.2.lineloop.8" 6
    code
      declare_var 1 ILhs (("diamond","diamond.line.2.lineloop.8"),1)
      declare_var 2 ILhs (("diamond","diamond.line.2.lineloop.8"),2)
      declare_var 3 ILhs (("diamond","diamond.line.2.lineloop.8"),3)
      declare_var 4 ILhs (("diamond","diamond.line.2.lineloop.8"),4)
      declare_var 5 ILhs (("diamond","diamond.line.2.lineloop.8"),5)
      declare_var 6 ILhs (("diamond","diamond.line.2.lineloop.8"),6)
      return
        Node "diamond.diamond.line.2.lineloop.8_#B0" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<=" (
                Node "Prelude._super#Prelude.Real#Prelude.Ord" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 3 ) ) ) ,
              reference_var 5 ) ,
            reference_var 1 ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 3 ,
          reference_var 4 ,
          reference_var 5 ,
          reference_var 6 )
  function "diamond.diamond.line.2.lineloop.8_#B0" 7
    code
      declare_var 7 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),1)
      declare_var 1 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),2)
      declare_var 2 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),3)
      declare_var 3 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),4)
      declare_var 4 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),5)
      declare_var 5 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),6)
      declare_var 6 ILhs (("diamond","diamond.line.2.lineloop.8_#B0"),7)
      ATable 1 2 rigid
        reference_var 7
        "Prelude.False" =>
          return
            Node "Prelude.:" (
              char '\n' ,
              Node "Prelude.[]" )
        "Prelude.True" =>
          return
            Node "Prelude.++" (
              Node "diamond.diamond.line.2.putValue.8" (
                reference_var 2 ,
                reference_var 3 ,
                reference_var 3 ,
                reference_var 4 ,
                reference_var 6 ) ,
              Node "Prelude.++" (
                Node "diamond.tab" (
                  Node "Prelude._inst#Prelude.Eq#Prelude.Int" ,
                  Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
                  Node "Prelude._impl#+#Prelude.Num#Prelude.Int" (
                    Node "diamond.size" (
                      reference_var 3 ,
                      Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
                      Node "Prelude.apply" (
                        Node "Prelude.apply" (
                          Node "Prelude.*" (
                            Node "Prelude._super#Prelude.Real#Prelude.Num" (
                              Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                                reference_var 3 ) ) ) ,
                          reference_var 2 ) ,
                        reference_var 2 ) ) ,
                    int 1 ) ) ,
                Node "diamond.diamond.line.2.lineloop.8" (
                  reference_var 1 ,
                  reference_var 2 ,
                  reference_var 3 ,
                  reference_var 4 ,
                  Node "Prelude.apply" (
                    Node "Prelude.apply" (
                      Node "Prelude.+" (
                        Node "Prelude._super#Prelude.Real#Prelude.Num" (
                          Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                            reference_var 3 ) ) ) ,
                      reference_var 5 ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.fromInt" (
                        Node "Prelude._super#Prelude.Real#Prelude.Num" (
                          Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                            reference_var 3 ) ) ) ,
                      int 1 ) ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.apply" (
                      Node "Prelude.+" (
                        Node "Prelude._super#Prelude.Real#Prelude.Num" (
                          Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                            reference_var 3 ) ) ) ,
                      Node "Prelude.apply" (
                        Node "Prelude.apply" (
                          Node "Prelude.-" (
                            Node "Prelude._super#Prelude.Real#Prelude.Num" (
                              Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                                reference_var 3 ) ) ) ,
                          reference_var 6 ) ,
                        reference_var 2 ) ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.fromInt" (
                        Node "Prelude._super#Prelude.Real#Prelude.Num" (
                          Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                            reference_var 3 ) ) ) ,
                      int 1 ) ) ) ) )
  function "diamond.diamond.lineloop1.2" 5
    code
      declare_var 1 ILhs (("diamond","diamond.lineloop1.2"),1)
      declare_var 2 ILhs (("diamond","diamond.lineloop1.2"),2)
      declare_var 3 ILhs (("diamond","diamond.lineloop1.2"),3)
      declare_var 4 ILhs (("diamond","diamond.lineloop1.2"),4)
      declare_var 5 ILhs (("diamond","diamond.lineloop1.2"),5)
      return
        Node "diamond.diamond.lineloop1.2_#B2" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<=" (
                Node "Prelude._super#Prelude.Real#Prelude.Ord" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 2 ) ) ) ,
              reference_var 4 ) ,
            reference_var 1 ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 3 ,
          reference_var 4 ,
          reference_var 5 )
  function "diamond.diamond.lineloop1.2_#B2" 6
    code
      declare_var 6 ILhs (("diamond","diamond.lineloop1.2_#B2"),1)
      declare_var 1 ILhs (("diamond","diamond.lineloop1.2_#B2"),2)
      declare_var 2 ILhs (("diamond","diamond.lineloop1.2_#B2"),3)
      declare_var 3 ILhs (("diamond","diamond.lineloop1.2_#B2"),4)
      declare_var 4 ILhs (("diamond","diamond.lineloop1.2_#B2"),5)
      declare_var 5 ILhs (("diamond","diamond.lineloop1.2_#B2"),6)
      ATable 1 2 rigid
        reference_var 6
        "Prelude.False" =>
          return
            Node "Prelude.[]"
        "Prelude.True" =>
          return
            Node "Prelude.++" (
              Node "diamond.diamond.line.2" (
                reference_var 1 ,
                reference_var 2 ,
                reference_var 3 ,
                reference_var 5 ,
                reference_var 4 ) ,
              Node "diamond.diamond.lineloop1.2" (
                reference_var 1 ,
                reference_var 2 ,
                reference_var 3 ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.+" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    reference_var 4 ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.fromInt" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    int 1 ) ) ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.+" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    reference_var 5 ) ,
                  reference_var 1 ) ) )
  function "diamond.diamond.lineloop2.2" 5
    code
      declare_var 1 ILhs (("diamond","diamond.lineloop2.2"),1)
      declare_var 2 ILhs (("diamond","diamond.lineloop2.2"),2)
      declare_var 3 ILhs (("diamond","diamond.lineloop2.2"),3)
      declare_var 4 ILhs (("diamond","diamond.lineloop2.2"),4)
      declare_var 5 ILhs (("diamond","diamond.lineloop2.2"),5)
      return
        Node "diamond.diamond.lineloop2.2_#B4" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<" (
                Node "Prelude._super#Prelude.Real#Prelude.Ord" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 2 ) ) ) ,
              reference_var 4 ) ,
            reference_var 1 ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 3 ,
          reference_var 4 ,
          reference_var 5 )
  function "diamond.diamond.lineloop2.2_#B4" 6
    code
      declare_var 6 ILhs (("diamond","diamond.lineloop2.2_#B4"),1)
      declare_var 1 ILhs (("diamond","diamond.lineloop2.2_#B4"),2)
      declare_var 2 ILhs (("diamond","diamond.lineloop2.2_#B4"),3)
      declare_var 3 ILhs (("diamond","diamond.lineloop2.2_#B4"),4)
      declare_var 4 ILhs (("diamond","diamond.lineloop2.2_#B4"),5)
      declare_var 5 ILhs (("diamond","diamond.lineloop2.2_#B4"),6)
      ATable 1 2 rigid
        reference_var 6
        "Prelude.False" =>
          return
            Node "Prelude.[]"
        "Prelude.True" =>
          return
            Node "Prelude.++" (
              Node "diamond.diamond.line.2" (
                reference_var 1 ,
                reference_var 2 ,
                reference_var 3 ,
                reference_var 5 ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.-" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    reference_var 1 ) ,
                  reference_var 4 ) ) ,
              Node "diamond.diamond.lineloop2.2" (
                reference_var 1 ,
                reference_var 2 ,
                reference_var 3 ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.+" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    reference_var 4 ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.fromInt" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    int 1 ) ) ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.+" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    reference_var 5 ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.fromInt" (
                      Node "Prelude._super#Prelude.Real#Prelude.Num" (
                        Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                          reference_var 2 ) ) ) ,
                    int 1 ) ) ) )
  function "diamond.tab" 3
    code
      declare_var 1 ILhs (("diamond","tab"),1)
      declare_var 2 ILhs (("diamond","tab"),2)
      declare_var 3 ILhs (("diamond","tab"),3)
      return
        Node "diamond.tab_#B6" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.==" (
                reference_var 1 ) ,
              reference_var 3 ) ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 2 ) ,
              int 0 ) ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 3 )
  function "diamond.tab_#B6" 4
    code
      declare_var 4 ILhs (("diamond","tab_#B6"),1)
      declare_var 1 ILhs (("diamond","tab_#B6"),2)
      declare_var 2 ILhs (("diamond","tab_#B6"),3)
      declare_var 3 ILhs (("diamond","tab_#B6"),4)
      ATable 1 2 rigid
        reference_var 4
        "Prelude.False" =>
          return
            Node "Prelude.++" (
              Node "Prelude.:" (
                char ' ' ,
                Node "Prelude.[]" ) ,
              Node "diamond.tab" (
                reference_var 1 ,
                reference_var 2 ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.-" (
                      reference_var 2 ) ,
                    reference_var 3 ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.fromInt" (
                      reference_var 2 ) ,
                    int 1 ) ) ) )
        "Prelude.True" =>
          return
            Node "Prelude.[]"
  function "diamond.size" 3
    code
      declare_var 1 ILhs (("diamond","size"),1)
      declare_var 2 ILhs (("diamond","size"),2)
      declare_var 3 ILhs (("diamond","size"),3)
      return
        Node "diamond.size_#B8" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.<" (
                Node "Prelude._super#Prelude.Real#Prelude.Ord" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 1 ) ) ) ,
              reference_var 3 ) ,
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                Node "Prelude._super#Prelude.Real#Prelude.Num" (
                  Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                    reference_var 1 ) ) ) ,
              int 10 ) ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 3 )
  function "diamond.size_#B8" 4
    code
      declare_var 4 ILhs (("diamond","size_#B8"),1)
      declare_var 1 ILhs (("diamond","size_#B8"),2)
      declare_var 2 ILhs (("diamond","size_#B8"),3)
      declare_var 3 ILhs (("diamond","size_#B8"),4)
      ATable 1 2 rigid
        reference_var 4
        "Prelude.False" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.+" (
                  reference_var 2 ) ,
                Node "diamond.size" (
                  reference_var 1 ,
                  reference_var 2 ,
                  Node "Prelude.apply" (
                    Node "Prelude.apply" (
                      Node "Prelude.div" (
                        reference_var 1 ) ,
                      reference_var 3 ) ,
                    Node "Prelude.apply" (
                      Node "Prelude.fromInt" (
                        Node "Prelude._super#Prelude.Real#Prelude.Num" (
                          Node "Prelude._super#Prelude.Integral#Prelude.Real" (
                            reference_var 1 ) ) ) ,
                      int 10 ) ) ) ) ,
              Node "Prelude.apply" (
                Node "Prelude.fromInt" (
                  reference_var 2 ) ,
                int 1 ) )
        "Prelude.True" =>
          return
            Node "Prelude.apply" (
              Node "Prelude.fromInt" (
                reference_var 2 ) ,
              int 1 )
  function "diamond.main" 0
    code
      return
        Node "diamond.diamond" (
          Node "Prelude._inst#Prelude.Integral#Prelude.Int" ,
          Node "Prelude._inst#Prelude.Show#Prelude.Int" ,
          int 3 )
