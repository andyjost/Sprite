IModule "rigidadd" ["Prelude"] [(("rigidadd","Nat"),[IConstructor ("rigidadd","O") 0,IConstructor ("rigidadd","S") 1])] [IFunction ("rigidadd","add") 2 [Declare (Variable 1 (ILhs (("rigidadd","add"),1))),Declare (Variable 2 (ILhs (("rigidadd","add"),2))),Return (Applic False ("rigidadd","add'") [Applic False ("Prelude","ensureNotFree") [Reference 1],Reference 2])],IFunction ("rigidadd","add'") 2 [Declare (Variable 1 (ILhs (("rigidadd","add'"),1))),Declare (Variable 2 (ILhs (("rigidadd","add'"),2))),ATable 1 True (Reference 1) [(IConstructor ("rigidadd","O") 0,[Return (Reference 2)]),(IConstructor ("rigidadd","S") 1,[Declare (Variable 3 (IVar 1 (("rigidadd","S"),1))),Return (Applic True ("rigidadd","S") [Applic False ("rigidadd","add") [Reference 3,Reference 2]])])]],IFunction ("rigidadd","isNat") 1 [Declare (Variable 1 (ILhs (("rigidadd","isNat"),1))),ATable 1 True (Reference 1) [(IConstructor ("rigidadd","O") 0,[Return (Applic False ("Prelude","success") [])]),(IConstructor ("rigidadd","S") 1,[Declare (Variable 2 (IVar 1 (("rigidadd","S"),1))),Return (Applic False ("rigidadd","isNat") [Reference 2])])]],IFunction ("rigidadd","goal") 0 [Declare (Variable 1 IFree),Return (Applic False ("Prelude","&") [Applic False ("Prelude","=:=") [Applic False ("rigidadd","add") [Reference 1,Applic True ("rigidadd","O") []],Applic True ("rigidadd","S") [Applic True ("rigidadd","O") []]],Applic False ("rigidadd","isNat") [Reference 1]])]]