
module "multgen"
  import
    "Prelude"
  function "multgen.pairs" 2
    code
      declare_var 1 ILhs (("multgen","pairs"),1)
      declare_var 2 ILhs (("multgen","pairs"),2)
      return
        Node "Prelude.apply" (
          Node "Prelude.concatMap" (
            partial 1 (
              Node "multgen.pairs._#lambda1" (
                reference_var 2 ) ) ) ,
          reference_var 1 )
  function "multgen.pairs._#lambda1" 2
    code
      declare_var 1 ILhs (("multgen","pairs._#lambda1"),1)
      declare_var 2 ILhs (("multgen","pairs._#lambda1"),2)
      return
        Node "Prelude.map" (
          partial 1 (
            Node "multgen.pairs._#lambda1._#lambda2" (
              reference_var 2 ) ) ,
          reference_var 1 )
  function "multgen.pairs._#lambda1._#lambda2" 2
    code
      declare_var 1 ILhs (("multgen","pairs._#lambda1._#lambda2"),1)
      declare_var 2 ILhs (("multgen","pairs._#lambda1._#lambda2"),2)
      return
        Node "Prelude.(,)" (
          reference_var 1 ,
          reference_var 2 )
  function "multgen.goal1" 0
    code
      return
        Node "multgen.pairs" (
          Node "Prelude.:" (
            int 1 ,
            Node "Prelude.:" (
              int 2 ,
              Node "Prelude.:" (
                int 3 ,
                Node "Prelude.[]" ) ) ) ,
          Node "Prelude.:" (
            int 4 ,
            Node "Prelude.:" (
              int 5 ,
              Node "Prelude.[]" ) ) )
  function "multgen.triangle" 1
    code
      declare_var 1 ILhs (("multgen","triangle"),1)
      return
        Node "Prelude.apply" (
          Node "Prelude.concatMap" (
            partial 1 (
              Node "multgen.triangle._#lambda3" ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude._impl#enumFromTo#Prelude.Enum#Prelude.Int" ,
              int 1 ) ,
            reference_var 1 ) )
  function "multgen.triangle._#lambda3" 1
    code
      declare_var 1 ILhs (("multgen","triangle._#lambda3"),1)
      return
        Node "Prelude.map" (
          partial 1 (
            Node "multgen.triangle._#lambda3._#lambda4" (
              reference_var 1 ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude._impl#enumFromTo#Prelude.Enum#Prelude.Int" ,
              int 1 ) ,
            reference_var 1 ) )
  function "multgen.triangle._#lambda3._#lambda4" 2
    code
      declare_var 1 ILhs (("multgen","triangle._#lambda3._#lambda4"),1)
      declare_var 2 ILhs (("multgen","triangle._#lambda3._#lambda4"),2)
      return
        Node "Prelude.(,)" (
          reference_var 1 ,
          reference_var 2 )
  function "multgen.goal2" 0
    code
      return
        Node "multgen.triangle" (
          int 3 )
  function "multgen.pyTriple" 4
    code
      declare_var 1 ILhs (("multgen","pyTriple"),1)
      declare_var 2 ILhs (("multgen","pyTriple"),2)
      declare_var 3 ILhs (("multgen","pyTriple"),3)
      declare_var 4 ILhs (("multgen","pyTriple"),4)
      return
        Node "Prelude.apply" (
          Node "Prelude.concatMap" (
            partial 1 (
              Node "multgen.pyTriple._#lambda5" (
                reference_var 4 ,
                reference_var 1 ,
                reference_var 2 ,
                reference_var 3 ) ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.enumFromTo" (
                reference_var 1 ) ,
              Node "Prelude.apply" (
                Node "Prelude.fromInt" (
                  reference_var 3 ) ,
                int 2 ) ) ,
            reference_var 4 ) )
  function "multgen.pyTriple._#lambda5" 5
    code
      declare_var 1 ILhs (("multgen","pyTriple._#lambda5"),1)
      declare_var 2 ILhs (("multgen","pyTriple._#lambda5"),2)
      declare_var 3 ILhs (("multgen","pyTriple._#lambda5"),3)
      declare_var 4 ILhs (("multgen","pyTriple._#lambda5"),4)
      declare_var 5 ILhs (("multgen","pyTriple._#lambda5"),5)
      return
        Node "Prelude.apply" (
          Node "Prelude.concatMap" (
            partial 1 (
              Node "multgen.pyTriple._#lambda5._#lambda6" (
                reference_var 1 ,
                reference_var 5 ,
                reference_var 2 ,
                reference_var 3 ,
                reference_var 4 ) ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.enumFromTo" (
                reference_var 2 ) ,
              Node "Prelude.apply" (
                Node "Prelude.apply" (
                  Node "Prelude.+" (
                    reference_var 4 ) ,
                  reference_var 5 ) ,
                Node "Prelude.apply" (
                  Node "Prelude.fromInt" (
                    reference_var 4 ) ,
                  int 1 ) ) ) ,
            reference_var 1 ) )
  function "multgen.pyTriple._#lambda5._#lambda6" 6
    code
      declare_var 1 ILhs (("multgen","pyTriple._#lambda5._#lambda6"),1)
      declare_var 2 ILhs (("multgen","pyTriple._#lambda5._#lambda6"),2)
      declare_var 3 ILhs (("multgen","pyTriple._#lambda5._#lambda6"),3)
      declare_var 4 ILhs (("multgen","pyTriple._#lambda5._#lambda6"),4)
      declare_var 5 ILhs (("multgen","pyTriple._#lambda5._#lambda6"),5)
      declare_var 6 ILhs (("multgen","pyTriple._#lambda5._#lambda6"),6)
      return
        Node "Prelude.apply" (
          Node "Prelude.concatMap" (
            partial 1 (
              Node "multgen.pyTriple._#lambda5._#lambda6._#lambda7" (
                reference_var 2 ,
                reference_var 6 ,
                reference_var 4 ,
                reference_var 5 ) ) ) ,
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.enumFromTo" (
                reference_var 3 ) ,
              Node "Prelude.apply" (
                Node "Prelude.apply" (
                  Node "Prelude.+" (
                    reference_var 5 ) ,
                  reference_var 6 ) ,
                Node "Prelude.apply" (
                  Node "Prelude.fromInt" (
                    reference_var 5 ) ,
                  int 1 ) ) ) ,
            reference_var 1 ) )
  function "multgen.pyTriple._#lambda5._#lambda6._#lambda7" 5
    code
      declare_var 1 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7"),1)
      declare_var 2 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7"),2)
      declare_var 3 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7"),3)
      declare_var 4 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7"),4)
      declare_var 5 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7"),5)
      return
        Node "multgen.pyTriple._#lambda5._#lambda6._#lambda7_#B0" (
          Node "Prelude.apply" (
            Node "Prelude.apply" (
              Node "Prelude.==" (
                reference_var 3 ) ,
              Node "Prelude.apply" (
                Node "Prelude.apply" (
                  Node "Prelude.+" (
                    reference_var 4 ) ,
                  Node "Prelude.apply" (
                    Node "Prelude.apply" (
                      Node "Prelude.*" (
                        reference_var 4 ) ,
                      reference_var 1 ) ,
                    reference_var 1 ) ) ,
                Node "Prelude.apply" (
                  Node "Prelude.apply" (
                    Node "Prelude.*" (
                      reference_var 4 ) ,
                    reference_var 2 ) ,
                  reference_var 2 ) ) ) ,
            Node "Prelude.apply" (
              Node "Prelude.apply" (
                Node "Prelude.*" (
                  reference_var 4 ) ,
                reference_var 5 ) ,
              reference_var 5 ) ) ,
          reference_var 1 ,
          reference_var 2 ,
          reference_var 5 )
  function "multgen.pyTriple._#lambda5._#lambda6._#lambda7_#B0" 4
    code
      declare_var 6 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7_#B0"),1)
      declare_var 1 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7_#B0"),2)
      declare_var 2 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7_#B0"),3)
      declare_var 5 ILhs (("multgen","pyTriple._#lambda5._#lambda6._#lambda7_#B0"),4)
      ATable 1 2 rigid
        reference_var 6
        "Prelude.False" =>
          return
            Node "Prelude.[]"
        "Prelude.True" =>
          return
            Node "Prelude.:" (
              Node "Prelude.(,,)" (
                reference_var 1 ,
                reference_var 2 ,
                reference_var 5 ) ,
              Node "Prelude.[]" )
  function "multgen.goal3" 0
    code
      return
        Node "multgen.pyTriple" (
          Node "Prelude._inst#Prelude.Enum#Prelude.Int" ,
          Node "Prelude._inst#Prelude.Eq#Prelude.Int" ,
          Node "Prelude._inst#Prelude.Num#Prelude.Int" ,
          int 20 )
