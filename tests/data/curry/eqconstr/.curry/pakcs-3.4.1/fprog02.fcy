Prog "fprog02" ["Prelude"] [] [Func ("fprog02","f") 3 Public (ForallType [(0,KStar)] (FuncType (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Fractional") [TVar 0])) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TVar 0))))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (LPattern (Floatc 3.14)) (Case Flex (Var 3) [Branch (LPattern (Floatc 2.72)) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromFloat") [Var 1],Lit (Floatc 3.14)])])])),Func ("fprog02","main") 0 Public (TCons ("Prelude","Float") []) (Rule [] (Free [1] (Comb FuncCall ("fprog02","f") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Fractional#Prelude.Float") [],Lit (Floatc 3.14),Var 1])))] []