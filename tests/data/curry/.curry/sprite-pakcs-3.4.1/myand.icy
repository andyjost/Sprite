(IProg "myand" ["Prelude"] [] [(IFunction ("myand","and_",0) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("myand","and__COMPLEXCASE0",1) [(IFCall ("Prelude","&&",687) [(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool",65) [(IVar 1),(ICCall ("Prelude","True",1) [])]),(IFCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool",65) [(IVar 2),(ICCall ("Prelude","True",1) [])])])]))))),(IFunction ("myand","and__COMPLEXCASE0",1) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("myand","and__COMPLEXCASE1",2) [(IFCall ("Prelude","otherwise",690) [])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("myand","and__COMPLEXCASE1",2) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))]))))])