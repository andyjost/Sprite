Prog "atableFlex" ["Prelude"] [Type ("atableFlex","AB") Public [] [Cons ("atableFlex","A") 0 Public [],Cons ("atableFlex","B") 0 Public []]] [Func ("atableFlex","_inst#Prelude.Data#atableFlex.AB") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("atableFlex","AB") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("atableFlex","_impl#===#Prelude.Data#atableFlex.AB") [],Comb FuncCall ("atableFlex","_impl#aValue#Prelude.Data#atableFlex.AB") []])])),Func ("atableFlex","_impl#===#Prelude.Data#atableFlex.AB") 2 Public (FuncType (TCons ("atableFlex","AB") []) (FuncType (TCons ("atableFlex","AB") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("atableFlex","A") []) (Case Flex (Var 2) [Branch (Pattern ("atableFlex","A") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("atableFlex","B") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("atableFlex","B") []) (Case Flex (Var 2) [Branch (Pattern ("atableFlex","A") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("atableFlex","B") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("atableFlex","_impl#aValue#Prelude.Data#atableFlex.AB") 0 Public (TCons ("atableFlex","AB") []) (Rule [] (Or (Comb ConsCall ("atableFlex","A") []) (Comb ConsCall ("atableFlex","B") []))),Func ("atableFlex","f") 1 Public (FuncType (TCons ("atableFlex","AB") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("atableFlex","A") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("atableFlex","B") []) (Comb ConsCall ("Prelude","False") [])])),Func ("atableFlex","main") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb FuncCall ("atableFlex","f") [Comb ConsCall ("atableFlex","A") []]))] []