Module:
-------
  name: mergesort
  imports: Prelude

  types:
  ------

  functions:
  ----------
    sort:
      $1 <- LHS[1]
      $2 <- LHS[2]
      $3 <- LHS[3]
      $4 <- IBind
      $5 <- IBind
      return (mergesort.sort_case_#1 ((Prelude.< ((Prelude.length $2)) 2)) $2 $3 $1 $4 $5)
    sort_case_#1:
      $6 <- LHS[1]
      $2 <- LHS[2]
      $3 <- LHS[3]
      $1 <- LHS[4]
      $4 <- LHS[5]
      $5 <- LHS[6]
      case $6 of Prelude.True  -> return (Prelude.=:= $3 $2)
                 Prelude.False -> return (Prelude.& ((mergesort.sort $1 ((mergesort.firsthalf $2)) $4)) ((Prelude.& ((mergesort.sort $1 ((mergesort.secondhalf $2)) $5)) ((Prelude.apply ((Prelude.apply ((Prelude.apply $1 $4)) $5)) $3)))))
      return $6
    intMerge:
      $1 <- LHS[1]
      $2 <- LHS[2]
      $3 <- LHS[3]
      case $1 of Prelude.[] -> return (Prelude.=:= $3 $2)
                 Prelude.:  -> $4 <- $1[1]
                               $5 <- $1[2]
                               return (mergesort.intMerge_case_#1 $2 $3 $4 $5)
      return $1
    intMerge_case_#1:
      $2 <- LHS[1]
      $3 <- LHS[2]
      $4 <- LHS[3]
      $5 <- LHS[4]
      case $2 of Prelude.[] -> return (Prelude.=:= $3 ((Prelude.: $4 $5)))
                 Prelude.:  -> $6 <- $2[1]
                               $7 <- $2[2]
                               $8 <- IBind
                               $9 <- IBind
                               return (mergesort.intMerge_case_#1_case_#1 $4 $6 $5 $7 $8 $3 $9)
      return $2
    intMerge_case_#1_case_#1:
      $4 <- LHS[1]
      $6 <- LHS[2]
      $5 <- LHS[3]
      $7 <- LHS[4]
      $8 <- LHS[5]
      $3 <- LHS[6]
      $9 <- LHS[7]
      return (mergesort.intMerge_case_#1_case_#1_case_#1 ((Prelude.> $4 $6)) $4 $6 $5 $7 $8 $3 $9)
    intMerge_case_#1_case_#1_case_#1:
      $10 <- LHS[1]
      $4 <- LHS[2]
      $6 <- LHS[3]
      $5 <- LHS[4]
      $7 <- LHS[5]
      $8 <- LHS[6]
      $3 <- LHS[7]
      $9 <- LHS[8]
      case $10 of Prelude.True  -> return (Prelude.& ((mergesort.intMerge ((Prelude.: $4 $5)) $7 $8)) ((Prelude.=:= $3 ((Prelude.: $6 $8)))))
                  Prelude.False -> return (Prelude.& ((mergesort.intMerge $5 ((Prelude.: $6 $7)) $9)) ((Prelude.=:= $3 ((Prelude.: $4 $9)))))
      return $10
    firsthalf:
      $1 <- LHS[1]
      return (Prelude.take ((Prelude.div ((Prelude.length $1)) 2)) $1)
    secondhalf:
      $1 <- LHS[1]
      return (Prelude.drop ((Prelude.div ((Prelude.length $1)) 2)) $1)
    goal1:
      $1 <- LHS[1]
      return (mergesort.sort ((mergesort.intMerge)) ((Prelude.: 3 ((Prelude.: 1 ((Prelude.: 2 (Prelude.[]))))))) $1)
    goal2:
      $1 <- LHS[1]
      return (mergesort.sort ((mergesort.intMerge)) ((Prelude.: 3 ((Prelude.: 1 ((Prelude.: 2 ((Prelude.: 5 ((Prelude.: 4 ((Prelude.: 8 (Prelude.[]))))))))))))) $1)
    goal3:
      $1 <- LHS[1]
      return (mergesort.sort ((mergesort.intMerge)) ((Prelude.: 3 ((Prelude.: 1 ((Prelude.: 2 ((Prelude.: 5 ((Prelude.: 4 ((Prelude.: 8 ((Prelude.: 6 ((Prelude.: 7 ((Prelude.: 2 ((Prelude.: 9 ((Prelude.: 1 ((Prelude.: 4 ((Prelude.: 3 (Prelude.[]))))))))))))))))))))))))))) $1)