Module:
-------
  name: qsortlet
  imports: Prelude

  types:
  ------

  functions:
  ----------
    split:
      $1 <- LHS[1]
      $2 <- LHS[2]
      case $2 of Prelude.[] -> return (Prelude.(,) (Prelude.[]) (Prelude.[]))
                 Prelude.:  -> $3 <- $2[1]
                               $4 <- $2[2]
                               return (qsortlet.split_let_#1 $1 $3 $4)
      return $2
    split_let_#1:
      $1 <- LHS[1]
      $3 <- LHS[2]
      $4 <- LHS[3]
      -- [(5,[]),(6,[]),(7,[])]
      $5 <- IBind
      $5 = Applic(ident='qsortlet.split', args=(Reference(vid=1), Reference(vid=4)))
      $6 <- IBind
      $6 = Applic(ident='qsortlet.split._#selFP2#l', args=(Reference(vid=5),))
      $7 <- IBind
      $7 = Applic(ident='qsortlet.split._#selFP3#r', args=(Reference(vid=5),))
      return (qsortlet.split_case_#1 $1 $3 $6 $7)
    split_case_#1:
      $1 <- LHS[1]
      $3 <- LHS[2]
      $6 <- LHS[3]
      $7 <- LHS[4]
      return (qsortlet.split_case_#1_case_#2 ((Prelude.>= $1 $3)) $1 $3 $6 $7)
    split_case_#1_case_#2:
      $8 <- LHS[1]
      $1 <- LHS[2]
      $3 <- LHS[3]
      $6 <- LHS[4]
      $7 <- LHS[5]
      case $8 of Prelude.True  -> return (Prelude.(,) ((Prelude.: $3 $6)) $7)
                 Prelude.False -> return (qsortlet.split_case_#1_case_#1 $1 $3 $6 $7)
      return $8
    split_case_#1_case_#1:
      $1 <- LHS[1]
      $3 <- LHS[2]
      $6 <- LHS[3]
      $7 <- LHS[4]
      return (qsortlet.split_case_#1_case_#1_case_#1 ((Prelude.< $1 $3)) $1 $3 $6 $7)
    split_case_#1_case_#1_case_#1:
      $8 <- LHS[1]
      $1 <- LHS[2]
      $3 <- LHS[3]
      $6 <- LHS[4]
      $7 <- LHS[5]
      case $8 of Prelude.True  -> return (Prelude.(,) $6 ((Prelude.: $3 $7)))
                 Prelude.False -> return (Prelude.failed)
      return $8
    split._#selFP2#l:
      $1 <- LHS[1]
      case $1 of Prelude.(,) -> $2 <- $1[1]
                                $3 <- $1[2]
                                return $2
      return $1
    split._#selFP3#r:
      $1 <- LHS[1]
      case $1 of Prelude.(,) -> $2 <- $1[1]
                                $3 <- $1[2]
                                return $3
      return $1
    qsort:
      $1 <- LHS[1]
      case $1 of Prelude.[] -> return (Prelude.[])
                 Prelude.:  -> $2 <- $1[1]
                               $3 <- $1[2]
                               -- [(4,[]),(5,[]),(6,[])]
                               $4 <- IBind
                               $4 = Applic(ident='qsortlet.split', args=(Reference(vid=2), Reference(vid=3)))
                               $5 <- IBind
                               $5 = Applic(ident='qsortlet.qsort._#selFP5#l', args=(Reference(vid=4),))
                               $6 <- IBind
                               $6 = Applic(ident='qsortlet.qsort._#selFP6#r', args=(Reference(vid=4),))
                               return (Prelude.++ ((qsortlet.qsort $5)) ((Prelude.: $2 ((qsortlet.qsort $6)))))
      return $1
    qsort._#selFP5#l:
      $1 <- LHS[1]
      case $1 of Prelude.(,) -> $2 <- $1[1]
                                $3 <- $1[2]
                                return $2
      return $1
    qsort._#selFP6#r:
      $1 <- LHS[1]
      case $1 of Prelude.(,) -> $2 <- $1[1]
                                $3 <- $1[2]
                                return $3
      return $1
    goal:
      return (qsortlet.qsort ((Prelude.: 8 ((Prelude.: 6 ((Prelude.: 7 ((Prelude.: 5 ((Prelude.: 4 ((Prelude.: 2 ((Prelude.: 3 ((Prelude.: 1 (Prelude.[]))))))))))))))))))