Module:
-------
  name: qsortlet
  imports: Prelude

  types:
  ------

  functions:
  ----------
    split:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      case $3 of
        Prelude.[] -> return ICCall('Prelude.(,)', ICCall('Prelude.[]'), ICCall('Prelude.[]'))
        Prelude.: _ _ ->
          var $4
          var $5
          $4 <- $3[0]
          $5 <- $3[1]
          return IFCall('qsortlet.split_LET0', $4, $1, $2, $5)
    split_LET0:
      var $4
      var $1
      var $2
      var $5
      var $6
      var $7
      var $8
      $4 <- $0[0]
      $1 <- $0[1]
      $2 <- $0[2]
      $5 <- $0[3]
      $6 <- IFCall('qsortlet.split', $1, $2, $5)
      $7 <- IFCall('qsortlet.split._#selFP2#l', $6)
      $8 <- IFCall('qsortlet.split._#selFP3#r', $6)
      return IFCall('qsortlet.split_COMPLEXCASE1', $1, $2, $4, $7, $8, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.>=', $1), $2), $4))
    split_COMPLEXCASE1:
      var $1
      var $2
      var $4
      var $7
      var $8
      var $9
      $1 <- $0[0]
      $2 <- $0[1]
      $4 <- $0[2]
      $7 <- $0[3]
      $8 <- $0[4]
      $9 <- $0[5]
      case $9 of
        Prelude.False -> return IFCall('qsortlet.split_COMPLEXCASE2', $7, $4, $8, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.<', $1), $2), $4))
        Prelude.True -> return ICCall('Prelude.(,)', ICCall('Prelude.:', $4, $7), $8)
    split_COMPLEXCASE2:
      var $7
      var $4
      var $8
      var $9
      $7 <- $0[0]
      $4 <- $0[1]
      $8 <- $0[2]
      $9 <- $0[3]
      case $9 of
        Prelude.False -> exempt
        Prelude.True -> return ICCall('Prelude.(,)', $7, ICCall('Prelude.:', $4, $8))
    split._#selFP2#l:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.(,) _ _ ->
          var $2
          $2 <- $1[0]
          return $2
    split._#selFP3#r:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.(,) _ _ ->
          var $3
          $3 <- $1[1]
          return $3
    qsort:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $2 of
        Prelude.[] -> return ICCall('Prelude.[]')
        Prelude.: _ _ ->
          var $3
          var $4
          $3 <- $2[0]
          $4 <- $2[1]
          return IFCall('qsortlet.qsort_LET0', $1, $3, $4)
    qsort_LET0:
      var $1
      var $3
      var $4
      var $5
      var $6
      var $7
      $1 <- $0[0]
      $3 <- $0[1]
      $4 <- $0[2]
      $5 <- IFCall('qsortlet.split', $1, $3, $4)
      $6 <- IFCall('qsortlet.qsort._#selFP5#l', $5)
      $7 <- IFCall('qsortlet.qsort._#selFP6#r', $5)
      return IFCall('Prelude.++', IFCall('qsortlet.qsort', $1, $6), ICCall('Prelude.:', $3, IFCall('qsortlet.qsort', $1, $7)))
    qsort._#selFP5#l:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.(,) _ _ ->
          var $2
          $2 <- $1[0]
          return $2
    qsort._#selFP6#r:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.(,) _ _ ->
          var $3
          $3 <- $1[1]
          return $3
    goal:
      return IFCall('qsortlet.qsort', IFCall('Prelude._inst#Prelude.Ord#Prelude.Int'), ICCall('Prelude.:', (8), ICCall('Prelude.:', (6), ICCall('Prelude.:', (7), ICCall('Prelude.:', (5), ICCall('Prelude.:', (4), ICCall('Prelude.:', (2), ICCall('Prelude.:', (3), ICCall('Prelude.:', (1), ICCall('Prelude.[]'))))))))))