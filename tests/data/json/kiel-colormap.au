Module:
-------
  name: colormap
  fullname: colormap
  imports: Prelude

  types:
  ------
    data Color = Red | Green | Yellow | Blue

  functions:
  ----------
    _inst#Prelude.Data#colormap.Color:
      return ICCall('Prelude._Dict#Data', IFPCall('colormap._impl#===#Prelude.Data#colormap.Color'), IFPCall('colormap._impl#aValue#Prelude.Data#colormap.Color'))
    _impl#===#Prelude.Data#colormap.Color:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $1 of
        colormap.Red -> return IFCall('colormap._impl#===#Prelude.Data#colormap.Color_CASE0', $2)
        colormap.Green -> return IFCall('colormap._impl#===#Prelude.Data#colormap.Color_CASE1', $2)
        colormap.Yellow -> return IFCall('colormap._impl#===#Prelude.Data#colormap.Color_CASE2', $2)
        colormap.Blue -> return IFCall('colormap._impl#===#Prelude.Data#colormap.Color_CASE3', $2)
    _impl#===#Prelude.Data#colormap.Color_CASE3:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.False')
        colormap.Green -> return ICCall('Prelude.False')
        colormap.Yellow -> return ICCall('Prelude.False')
        colormap.Blue -> return ICCall('Prelude.True')
    _impl#===#Prelude.Data#colormap.Color_CASE2:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.False')
        colormap.Green -> return ICCall('Prelude.False')
        colormap.Yellow -> return ICCall('Prelude.True')
        colormap.Blue -> return ICCall('Prelude.False')
    _impl#===#Prelude.Data#colormap.Color_CASE1:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.False')
        colormap.Green -> return ICCall('Prelude.True')
        colormap.Yellow -> return ICCall('Prelude.False')
        colormap.Blue -> return ICCall('Prelude.False')
    _impl#===#Prelude.Data#colormap.Color_CASE0:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.True')
        colormap.Green -> return ICCall('Prelude.False')
        colormap.Yellow -> return ICCall('Prelude.False')
        colormap.Blue -> return ICCall('Prelude.False')
    _impl#aValue#Prelude.Data#colormap.Color:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.() -> return ICCall('colormap.Red') ? ICCall('colormap.Green') ? ICCall('colormap.Yellow') ? ICCall('colormap.Blue')
    _inst#Prelude.Eq#colormap.Color:
      return ICCall('Prelude._Dict#Eq', IFPCall('colormap._impl#==#Prelude.Eq#colormap.Color'), IFCall('colormap._impl#/=#Prelude.Eq#colormap.Color'))
    _impl#==#Prelude.Eq#colormap.Color:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $1 of
        colormap.Red -> return IFCall('colormap._impl#==#Prelude.Eq#colormap.Color_CASE0', $2)
        colormap.Green -> return IFCall('colormap._impl#==#Prelude.Eq#colormap.Color_CASE1', $2)
        colormap.Yellow -> return IFCall('colormap._impl#==#Prelude.Eq#colormap.Color_CASE2', $2)
        colormap.Blue -> return IFCall('colormap._impl#==#Prelude.Eq#colormap.Color_CASE3', $2)
    _impl#==#Prelude.Eq#colormap.Color_CASE3:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.False')
        colormap.Green -> return ICCall('Prelude.False')
        colormap.Yellow -> return ICCall('Prelude.False')
        colormap.Blue -> return ICCall('Prelude.True')
    _impl#==#Prelude.Eq#colormap.Color_CASE2:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.False')
        colormap.Green -> return ICCall('Prelude.False')
        colormap.Yellow -> return ICCall('Prelude.True')
        colormap.Blue -> return ICCall('Prelude.False')
    _impl#==#Prelude.Eq#colormap.Color_CASE1:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.False')
        colormap.Green -> return ICCall('Prelude.True')
        colormap.Yellow -> return ICCall('Prelude.False')
        colormap.Blue -> return ICCall('Prelude.False')
    _impl#==#Prelude.Eq#colormap.Color_CASE0:
      var $2
      $2 <- $0[0]
      case $2 of
        colormap.Red -> return ICCall('Prelude.True')
        colormap.Green -> return ICCall('Prelude.False')
        colormap.Yellow -> return ICCall('Prelude.False')
        colormap.Blue -> return ICCall('Prelude.False')
    _impl#/=#Prelude.Eq#colormap.Color:
      return IFPCall('Prelude._def#/=#Prelude.Eq', IFCall('colormap._inst#Prelude.Eq#colormap.Color'))
    diff:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      return IFCall('Prelude.=:=', IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.==', $1), $2), $3), ICCall('Prelude.False'))
    isColor:
      var $1
      $1 <- $0[0]
      case $1 of
        colormap.Red -> return IFCall('Prelude.success')
        colormap.Green -> return IFCall('Prelude.success')
        colormap.Yellow -> return IFCall('Prelude.success')
        colormap.Blue -> return IFCall('Prelude.success')
    coloring:
      var $1
      var $2
      var $3
      var $4
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      $4 <- $0[3]
      return IFCall('Prelude.&', IFCall('colormap.isColor', $1), IFCall('Prelude.&', IFCall('colormap.isColor', $2), IFCall('Prelude.&', IFCall('colormap.isColor', $3), IFCall('colormap.isColor', $4))))
    correct:
      var $1
      var $2
      var $3
      var $4
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      $4 <- $0[3]
      return IFCall('Prelude.&', IFCall('colormap.diff', IFCall('colormap._inst#Prelude.Eq#colormap.Color'), $1, $2), IFCall('Prelude.&', IFCall('colormap.diff', IFCall('colormap._inst#Prelude.Eq#colormap.Color'), $1, $3), IFCall('Prelude.&', IFCall('colormap.diff', IFCall('colormap._inst#Prelude.Eq#colormap.Color'), $2, $3), IFCall('Prelude.&', IFCall('colormap.diff', IFCall('colormap._inst#Prelude.Eq#colormap.Color'), $2, $4), IFCall('colormap.diff', IFCall('colormap._inst#Prelude.Eq#colormap.Color'), $3, $4)))))
    goal1:
      var $1
      var $2
      var $3
      var $4
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      $4 <- $0[3]
      return IFCall('Prelude.&', IFCall('colormap.coloring', $1, $2, $3, $4), IFCall('colormap.correct', $1, $2, $3, $4))
    main1:
      free $1
      free $2
      free $3
      free $4
      return IFCall('Prelude.&>', IFCall('colormap.goal1', $1, $2, $3, $4), ICCall('Prelude.(,,,)', $1, $2, $3, $4))
    goal2:
      var $1
      var $2
      var $3
      var $4
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      $4 <- $0[3]
      return IFCall('Prelude.&', IFCall('colormap.correct', $1, $2, $3, $4), IFCall('colormap.coloring', $1, $2, $3, $4))
    main2:
      free $1
      free $2
      free $3
      free $4
      return IFCall('Prelude.&>', IFCall('colormap.goal2', $1, $2, $3, $4), ICCall('Prelude.(,,,)', $1, $2, $3, $4))