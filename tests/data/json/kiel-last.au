Module:
-------
  name: last
  imports: Prelude

  types:
  ------

  functions:
  ----------
    append:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $1 of
        Prelude.[] -> return $2
        Prelude.: _ _ ->
          var $3
          var $4
          $3 <- $1[0]
          $4 <- $1[1]
          return ICCall('Prelude.:', $3, IFCall('last.append', $4, $2))
    last:
      var $2
      free $3
      free $4
      $2 <- $0[1]
      return IFCall('last.last_COMPLEXCASE0', $3, IFCall('Prelude.=:=', IFCall('last.append', $4, ICCall('Prelude.:', $3, ICCall('Prelude.[]'))), $2))
    last_COMPLEXCASE0:
      var $3
      var $5
      $3 <- $0[0]
      $5 <- $0[1]
      case $5 of
        Prelude.False -> exempt
        Prelude.True -> return $3
    goal:
      return IFCall('last.last', IFCall('Prelude._inst#Prelude.Data#Prelude.Int'), ICCall('Prelude.:', (1), ICCall('Prelude.:', (2), ICCall('Prelude.:', (3), ICCall('Prelude.:', (4), ICCall('Prelude.[]'))))))