Module:
-------
  name: inflists
  fullname: inflists
  imports: Prelude

  types:
  ------

  functions:
  ----------
    from:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      return ICCall('Prelude.:', $2, IFCall('inflists.from', $1, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.+', $1), $2), IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (1)))))
    fibs:
      var $1
      $1 <- $0[0]
      return IFCall('inflists.fibgen', $1, IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (1)), IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (1)))
    fibgen:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      return ICCall('Prelude.:', $2, IFCall('inflists.fibgen', $1, $3, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.+', $1), $2), $3)))
    goal1:
      return IFCall('Prelude.take', (10), IFCall('inflists.fibs', IFCall('Prelude._inst#Prelude.Num#Prelude.Int')))
    primes:
      var $1
      $1 <- $0[0]
      return IFCall('inflists.sieve', $1, IFCall('inflists.from', IFCall('Prelude._super#Prelude.Real#Prelude.Num', IFCall('Prelude._super#Prelude.Integral#Prelude.Real', $1)), IFCall('Prelude.apply', IFCall('Prelude.fromInt', IFCall('Prelude._super#Prelude.Real#Prelude.Num', IFCall('Prelude._super#Prelude.Integral#Prelude.Real', $1))), (2))))
    sieve:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $2 of
        Prelude.[] -> exempt
        Prelude.: _ _ ->
          var $3
          var $4
          $3 <- $2[0]
          $4 <- $2[1]
          return ICCall('Prelude.:', $3, IFCall('inflists.sieve', $1, IFCall('Prelude.filter', IFPCall('inflists.sieve._#lambda1', $3, $1), $4)))
    sieve._#lambda1:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      return IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.>', IFCall('Prelude._super#Prelude.Real#Prelude.Ord', IFCall('Prelude._super#Prelude.Integral#Prelude.Real', $2))), IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.mod', $2), $3), $1)), IFCall('Prelude.apply', IFCall('Prelude.fromInt', IFCall('Prelude._super#Prelude.Real#Prelude.Num', IFCall('Prelude._super#Prelude.Integral#Prelude.Real', $2))), (0)))
    goal2:
      return IFCall('Prelude.take', (5), IFCall('inflists.primes', IFCall('Prelude._inst#Prelude.Integral#Prelude.Int')))
    ordMerge:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      case $2 of
        Prelude.[] -> exempt
        Prelude.: _ _ ->
          var $4
          var $5
          $4 <- $2[0]
          $5 <- $2[1]
          return IFCall('inflists.ordMerge_CASE0', $3, $4, $1, $5)
    ordMerge_CASE0:
      var $3
      var $4
      var $1
      var $5
      $3 <- $0[0]
      $4 <- $0[1]
      $1 <- $0[2]
      $5 <- $0[3]
      case $3 of
        Prelude.[] -> exempt
        Prelude.: _ _ ->
          var $6
          var $7
          $6 <- $3[0]
          $7 <- $3[1]
          return IFCall('inflists.ordMerge_COMPLEXCASE1', $6, $4, $1, $5, $7, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.==', IFCall('Prelude._super#Prelude.Ord#Prelude.Eq', $1)), $4), $6))
    ordMerge_COMPLEXCASE1:
      var $6
      var $4
      var $1
      var $5
      var $7
      var $8
      $6 <- $0[0]
      $4 <- $0[1]
      $1 <- $0[2]
      $5 <- $0[3]
      $7 <- $0[4]
      $8 <- $0[5]
      case $8 of
        Prelude.False -> return IFCall('inflists.ordMerge_COMPLEXCASE2', $4, $1, $5, $6, $7, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.<', $1), $4), $6))
        Prelude.True -> return ICCall('Prelude.:', $4, IFCall('inflists.ordMerge', $1, $5, $7))
    ordMerge_COMPLEXCASE2:
      var $4
      var $1
      var $5
      var $6
      var $7
      var $8
      $4 <- $0[0]
      $1 <- $0[1]
      $5 <- $0[2]
      $6 <- $0[3]
      $7 <- $0[4]
      $8 <- $0[5]
      case $8 of
        Prelude.False -> return IFCall('inflists.ordMerge_COMPLEXCASE3', $6, $1, $4, $5, $7, IFCall('Prelude.apply', IFCall('Prelude.apply', IFCall('Prelude.>', $1), $4), $6))
        Prelude.True -> return ICCall('Prelude.:', $4, IFCall('inflists.ordMerge', $1, $5, ICCall('Prelude.:', $6, $7)))
    ordMerge_COMPLEXCASE3:
      var $6
      var $1
      var $4
      var $5
      var $7
      var $8
      $6 <- $0[0]
      $1 <- $0[1]
      $4 <- $0[2]
      $5 <- $0[3]
      $7 <- $0[4]
      $8 <- $0[5]
      case $8 of
        Prelude.False -> exempt
        Prelude.True -> return ICCall('Prelude.:', $6, IFCall('inflists.ordMerge', $1, ICCall('Prelude.:', $4, $5), $7))
    hamming:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      return ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (1)), IFCall('inflists.ordMerge', $2, IFCall('Prelude.map', IFPCall('Prelude.flip', IFCall('Prelude.*', $1), IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (2))), IFCall('inflists.hamming', $1, $2)), IFCall('inflists.ordMerge', $2, IFCall('Prelude.map', IFPCall('Prelude.flip', IFCall('Prelude.*', $1), IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (3))), IFCall('inflists.hamming', $1, $2)), IFCall('Prelude.map', IFPCall('Prelude.flip', IFCall('Prelude.*', $1), IFCall('Prelude.apply', IFCall('Prelude.fromInt', $1), (5))), IFCall('inflists.hamming', $1, $2)))))
    goal3:
      return IFCall('Prelude.take', (10), IFCall('inflists.hamming', IFCall('Prelude._inst#Prelude.Num#Prelude.Int'), IFCall('Prelude._inst#Prelude.Ord#Prelude.Int')))