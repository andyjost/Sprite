Module:
-------
  name: quicksort
  fullname: quicksort
  imports: Prelude

  types:
  ------

  functions:
  ----------
    qsort:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.[] -> return ICCall('Prelude.[]')
        Prelude.: _ _ ->
          var $2
          var $3
          $2 <- $1[0]
          $3 <- $1[1]
          return IFCall('Prelude.++', IFCall('quicksort.qsort', IFCall('Prelude.filter', IFPCall('Prelude.flip', IFCall('Prelude._impl#<#Prelude.Ord#Prelude.Int'), $2), $3)), ICCall('Prelude.:', $2, IFCall('quicksort.qsort', IFCall('Prelude.filter', IFPCall('Prelude.flip', IFCall('Prelude._impl#>=#Prelude.Ord#Prelude.Int'), $2), $3))))
    goal:
      return IFCall('quicksort.qsort', ICCall('Prelude.:', (2), ICCall('Prelude.:', (3), ICCall('Prelude.:', (1), ICCall('Prelude.:', (0), ICCall('Prelude.[]'))))))