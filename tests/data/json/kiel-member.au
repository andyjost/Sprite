Module:
-------
  name: member
  imports: Prelude

  types:
  ------

  functions:
  ----------
    append:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.(,) _ _ ->
          var $2
          var $3
          $2 <- $1[0]
          $3 <- $1[1]
          return IFCall('member.append_CASE0', $2, $3)
    append_CASE0:
      var $2
      var $3
      $2 <- $0[0]
      $3 <- $0[1]
      case $2 of
        Prelude.[] -> return $3
        Prelude.: _ _ ->
          var $4
          var $5
          $4 <- $2[0]
          $5 <- $2[1]
          return ICCall('Prelude.:', $4, IFCall('member.append', ICCall('Prelude.(,)', $5, $3)))
    member:
      var $2
      $2 <- $0[1]
      case $2 of
        Prelude.(,) _ _ ->
          var $3
          var $4
          $3 <- $2[0]
          $4 <- $2[1]
          return IFCall('member.member_FREE0', $3, $4)
    member_FREE0:
      var $3
      var $4
      free $5
      free $6
      $3 <- $0[0]
      $4 <- $0[1]
      return IFCall('member.member_COMPLEXCASE1', IFCall('Prelude.=:=', IFCall('member.append', ICCall('Prelude.(,)', $5, ICCall('Prelude.:', $3, $6))), $4))
    member_COMPLEXCASE1:
      var $7
      $7 <- $0[0]
      case $7 of
        Prelude.False -> exempt
        Prelude.True -> return ICCall('Prelude.True')
    goal1:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      return IFCall('member.member', $1, ICCall('Prelude.(,)', $3, ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (1)), ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (2)), ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (3)), ICCall('Prelude.[]'))))))
    main1:
      free $1
      return IFCall('member.main1_COMPLEXCASE0', $1, IFCall('member.goal1', IFCall('Prelude._inst#Prelude.Data#Prelude.Int'), IFCall('Prelude._inst#Prelude.Num#Prelude.Int'), $1))
    main1_COMPLEXCASE0:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $2 of
        Prelude.False -> exempt
        Prelude.True -> return $1
    goal2:
      var $1
      var $2
      var $3
      $1 <- $0[0]
      $2 <- $0[1]
      $3 <- $0[2]
      return IFCall('Prelude.&&', IFCall('member.member', $1, ICCall('Prelude.(,)', $3, ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (1)), ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (2)), ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (3)), ICCall('Prelude.[]')))))), IFCall('member.member', $1, ICCall('Prelude.(,)', $3, ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (2)), ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (3)), ICCall('Prelude.:', IFCall('Prelude.apply', IFCall('Prelude.fromInt', $2), (4)), ICCall('Prelude.[]')))))))
    main2:
      free $1
      return IFCall('member.main2_COMPLEXCASE0', $1, IFCall('member.goal2', IFCall('Prelude._inst#Prelude.Data#Prelude.Int'), IFCall('Prelude._inst#Prelude.Num#Prelude.Int'), $1))
    main2_COMPLEXCASE0:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $2 of
        Prelude.False -> exempt
        Prelude.True -> return $1