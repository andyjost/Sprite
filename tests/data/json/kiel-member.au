Module:
-------
  name: member
  imports: Prelude

  types:
  ------

  functions:
  ----------
    append:
      $1 <- LHS[1]
      case $1 of Prelude.(,) -> $2 <- $1[1]
                                $3 <- $1[2]
                                return (member.append_case_#1 $2 $3)
      return $1
    append_case_#1:
      $2 <- LHS[1]
      $3 <- LHS[2]
      case $2 of Prelude.[] -> return $3
                 Prelude.:  -> $4 <- $2[1]
                               $5 <- $2[2]
                               return (Prelude.: $4 ((member.append ((Prelude.(,) $5 $3)))))
      return $2
    member:
      $1 <- LHS[1]
      case $1 of Prelude.(,) -> $2 <- $1[1]
                                $3 <- $1[2]
                                $4 <- IBind
                                $5 <- IBind
                                return (member.member_case_#1 $4 $2 $5 $3)
      return $1
    member_case_#1:
      $4 <- LHS[1]
      $2 <- LHS[2]
      $5 <- LHS[3]
      $3 <- LHS[4]
      return (member.member_case_#1_case_#1 ((Prelude.=:= ((member.append ((Prelude.(,) $4 ((Prelude.: $2 $5)))))) $3)) $4 $2 $5 $3)
    member_case_#1_case_#1:
      $6 <- LHS[1]
      $4 <- LHS[2]
      $2 <- LHS[3]
      $5 <- LHS[4]
      $3 <- LHS[5]
      case $6 of Prelude.True  -> return (Prelude.True)
                 Prelude.False -> return (Prelude.failed)
      return $6
    goal1:
      $1 <- LHS[1]
      return (member.member ((Prelude.(,) $1 ((Prelude.: 1 ((Prelude.: 2 ((Prelude.: 3 (Prelude.[]))))))))))
    goal2:
      $1 <- LHS[1]
      return (Prelude.&& ((member.member ((Prelude.(,) $1 ((Prelude.: 1 ((Prelude.: 2 ((Prelude.: 3 (Prelude.[]))))))))))) ((member.member ((Prelude.(,) $1 ((Prelude.: 2 ((Prelude.: 3 ((Prelude.: 4 (Prelude.[]))))))))))))