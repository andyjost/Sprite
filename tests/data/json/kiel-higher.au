Module:
-------
  name: higher
  imports: Prelude

  types:
  ------

  functions:
  ----------
    map_:
      $1 <- LHS[1]
      $2 <- LHS[2]
      case $2 of Prelude.[] -> return (Prelude.[])
                 Prelude.:  -> $3 <- $2[1]
                               $4 <- $2[2]
                               return (Prelude.: ((Prelude.apply $1 $3)) ((higher.map_ $1 $4)))
      return $2
    foldr_:
      $1 <- LHS[1]
      $2 <- LHS[2]
      $3 <- LHS[3]
      case $3 of Prelude.[] -> return $2
                 Prelude.:  -> $4 <- $3[1]
                               $5 <- $3[2]
                               return (Prelude.apply ((Prelude.apply $1 $4)) ((higher.foldr_ $1 $2 $5)))
      return $3
    inc:
      $1 <- LHS[1]
      return (Prelude.+ $1 1)
    g1:
      return (Prelude.map ((higher.inc)) ((Prelude.: 0 ((Prelude.: 2 ((Prelude.: 1 (Prelude.[]))))))))
    g2:
      return (Prelude.map (((Prelude.flip ((Prelude.+)) 1))) ((Prelude.: 0 ((Prelude.: 2 ((Prelude.: 1 (Prelude.[]))))))))
    g3:
      return (Prelude.foldr ((Prelude.+)) 0 ((Prelude.: 1 ((Prelude.: 0 ((Prelude.: 2 (Prelude.[]))))))))
    g4:
      return (Prelude.foldr ((Prelude.*)) 1 ((Prelude.: 1 ((Prelude.: 2 ((Prelude.: 3 ((Prelude.: 4 ((Prelude.: 5 (Prelude.[]))))))))))))
    g5:
      return (Prelude.foldr ((higher.g5._#lambda1)) 1 ((Prelude.: 1 ((Prelude.: 2 ((Prelude.: 3 ((Prelude.: 4 ((Prelude.: 5 (Prelude.[]))))))))))))
    g5._#lambda1:
      $1 <- LHS[1]
      $2 <- LHS[2]
      return (Prelude.* $1 $2)