Module:
-------
  name: rev
  imports: Prelude

  types:
  ------

  functions:
  ----------
    append:
      var $1
      var $2
      $1 <- $0[0]
      $2 <- $0[1]
      case $1 of
        Prelude.[] -> return $2
        Prelude.: _ _ ->
          var $3
          var $4
          $3 <- $1[0]
          $4 <- $1[1]
          return ICCall('Prelude.:', $3, IFCall('rev.append', $4, $2))
    rev:
      var $1
      $1 <- $0[0]
      case $1 of
        Prelude.[] -> return ICCall('Prelude.[]')
        Prelude.: _ _ ->
          var $2
          var $3
          $2 <- $1[0]
          $3 <- $1[1]
          return IFCall('rev.append', IFCall('rev.rev', $3), ICCall('Prelude.:', $2, ICCall('Prelude.[]')))
    goal1:
      return IFCall('rev.append', ICCall('Prelude.:', (1), ICCall('Prelude.:', (2), ICCall('Prelude.[]'))), ICCall('Prelude.:', (3), ICCall('Prelude.:', (4), ICCall('Prelude.[]'))))
    goal2:
      return IFCall('rev.rev', ICCall('Prelude.:', (1), ICCall('Prelude.:', (2), ICCall('Prelude.:', (3), ICCall('Prelude.:', (4), ICCall('Prelude.[]'))))))
    goal3:
      return IFCall('rev.rev', ICCall('Prelude.:', (1), ICCall('Prelude.:', (2), ICCall('Prelude.:', (3), ICCall('Prelude.:', (4), ICCall('Prelude.:', (5), ICCall('Prelude.:', (6), ICCall('Prelude.:', (7), ICCall('Prelude.:', (8), ICCall('Prelude.:', (9), ICCall('Prelude.:', (10), ICCall('Prelude.[]'))))))))))))