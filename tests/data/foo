./curry/setfunctions/free08.curry:import SetFunctions
./curry/setfunctions/free08.curry:import Control.SetFunctions
./curry/setfunctions/basic02.curry:import SetFunctions
./curry/setfunctions/basic02.curry:import Control.SetFunctions
./curry/setfunctions/free03.curry:import SetFunctions
./curry/setfunctions/free03.curry:import Control.SetFunctions
./curry/setfunctions/basic18.curry:import SetFunctions
./curry/setfunctions/basic18.curry:import Control.SetFunctions
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False)), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), _1, _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), _1, _2))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI6Common1a), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude5False), rts.Node(CyI7Prelude4True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.icy:(IProg "basic16" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic16","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.ResultABC",78) 1 [])]),(IFCall ("Control.SetFunctions","set1",4) [(IFCall ("Common","fa",108) []),(IFCall ("Common","ab",106) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.icy:(IProg "free02" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free02","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IFCall ("Common","a",90) []),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6applyS1f, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6applyS1f, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(CyI6applyS1h)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(CyI6applyS1h)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6applyS3h_q, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6applyS3h_q, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 2, rts.Node(CyI6applyS13goal10_df_d26, partial=True))), _1), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 2, rts.Node(CyI6applyS13goal11_df_d31, partial=True))), _1), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(CyI6applyS2h3)), _1), _2), _3))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(CyI6applyS2h3)), _1), _2), _3))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 3, rts.Node(CyI6applyS4h3_q, partial=True))), _1), _2), _3))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 3, rts.Node(CyI6applyS4h3_q, partial=True))), _1), _2), _3))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:CyI7Control12SetFunctions4_D_G = interp.symbol('Control.SetFunctions.$>').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:CyI7Control12SetFunctions4_D_L = interp.symbol('Control.SetFunctions.$<').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.py:  , imports=('Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.icy:(IProg "free11" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free11","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])),(IVar 1)])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False)), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.icy:(IProg "free07" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free07","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IFCall ("Common","a",90) []),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), _1, Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1, partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common2g1, partial=True)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.icy:(IProg "basic15" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic15","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IOr (ICCall ("Prelude","False",0) []) (ICCall ("Prelude","True",1) [])),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI6Common1a), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI7Prelude2_u, true_(), false_()), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.icy:(IProg "basic05" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic05","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IFCall ("Common","a",90) []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI6Common1a), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.icy:(IProg "basic12" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic12","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])),(IFCall ("Common","a",90) [])])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.icy:(IProg "applic01" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("applic01","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("Common","g1",96) 1 [])]),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool, partial=True)), partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common1k, partial=True)), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI7Prelude2_u, true_(), false_()), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.icy:(IProg "basic13" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic13","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, Node::create_partial(&CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool))), Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI6Common1k), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI6Common1a), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.icy:(IProg "applic03" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("applic03","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFCall ("Common","f1",94) [])]),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_G;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6Common4f1_q)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_G;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6Common2g1)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.so matches
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.icy:(IProg "basic14" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic14","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IFCall ("Common","a",90) []),(IOr (ICCall ("Prelude","False",0) []) (ICCall ("Prelude","True",1) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.icy:(IProg "free01" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free01","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result1",18) 1 [])]),(IFCall ("Control.SetFunctions","set1",4) [(IFCall ("Common","f1",94) []),(IVar 1)])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), _1, _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/bfly.icy:(IProg "bfly" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("bfly","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Int",85) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","bfly",113) 2 [(IFPCall ("Prelude","_inst#Prelude.Num#Prelude.Int",340) 1 [])]),(IFCall ("Common","binDigit",111) [(IFPCall ("Prelude","_inst#Prelude.Num#Prelude.Int",340) 1 [])]),(IFCall ("Common","binDigit",111) [(IFPCall ("Prelude","_inst#Prelude.Num#Prelude.Int",340) 1 [])])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.icy:(IProg "basic19" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic19","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#[]",141) 1 [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool",149) 1 [])])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("Common","k",92) 1 []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/adj.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/adj.py:  _0.rewrite(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common3adj, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude34__inst_hPrelude_dNum_hPrelude_dInt, partial=True)), partial=True)), rts.Node(CyI6Common8binDigit, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude34__inst_hPrelude_dNum_hPrelude_dInt, partial=True))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/adj.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/adj.py:  , imports=('Prelude', 'Common', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), _1, rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.icy:(IProg "free09" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free09","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1),(IFreeDecl 2)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IVar 1),(IVar 2)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common4f1_q, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.py:CyI7Control12SetFunctions4_D_L = interp.symbol('Control.SetFunctions.$<').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool, partial=True))), rts.Node(CyI7Control12SetFunctions4set0, rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.py:CyI7Control12SetFunctions4set0 = interp.symbol('Control.SetFunctions.set0').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1)), Node::create(&CyI7Control12SetFunctions4set1, Node::create(&CyI6Common2f1), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool, partial=True))), rts.Node(CyI7Control12SetFunctions4set0, rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.py:CyI7Control12SetFunctions4set0 = interp.symbol('Control.SetFunctions.set0').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI6Common1a), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1)), Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI6Common2g1), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_L;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6Common4f1_q)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI7Prelude2_u, true_(), false_()), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.cpp:extern InfoTable const CyI7Control12SetFunctions4set0;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool)), Node::create(&CyI7Control12SetFunctions4set0, Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool, partial=True)), partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common1k, partial=True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1, partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common2g1, partial=True)), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic19.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_L;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create(&CyI6Common2f1)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.so matches
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), _1, _2))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.icy:(IProg "free04" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free04","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1),(IFreeDecl 2)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IVar 1),(IVar 2)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI7Prelude2_u, false_(), true_()), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, Node::create_partial(&CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool))), Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI6Common1k), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free08.icy:(IProg "free08" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free08","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IVar 1),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), _1, Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.icy:(IProg "free03" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free03","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IVar 1),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common4f1_q, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.py:CyI7Control12SetFunctions4_D_G = interp.symbol('Control.SetFunctions.$>').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1)), Node::create(&CyI7Control12SetFunctions4set1, Node::create(&CyI6Common2f1), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI6Common1a), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), _1, _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.icy:(IProg "basic04" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic04","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IFCall ("Common","a",90) []),(IFCall ("Common","a",90) [])])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.so matches
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common39__inst_hPrelude_dOrd_hCommon_dResultABC)), Node::create(&CyI7Control12SetFunctions4set1, Node::create(&CyI6Common2fa), Node::create(&CyI6Common2ab)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI6Common1a), Node::create(&CyI7Prelude2_u, false_(), true_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.icy:(IProg "applyS" ["Prelude","Control.SetFunctions"] [(IDataType ("applyS","R",0) [(("applyS","F_T",0),0),(("applyS","F_F",1),0),(("applyS","G_T",2),0),(("applyS","G_F",3),0)]),(IDataType ("applyS","R3",1) [(("applyS","F_TTT",0),0),(("applyS","F_TTF",1),0),(("applyS","F_TFT",2),0),(("applyS","F_TFF",3),0),(("applyS","F_FTT",4),0),(("applyS","F_FTF",5),0),(("applyS","F_FFT",6),0),(("applyS","F_FFF",7),0),(("applyS","G_TTT",8),0),(("applyS","G_TTF",9),0),(("applyS","G_TFT",10),0),(("applyS","G_TFF",11),0),(("applyS","G_FTT",12),0),(("applyS","G_FTF",13),0),(("applyS","G_FFT",14),0),(("applyS","G_FFF",15),0)])] [(IFunction ("applyS","_inst#Prelude.Data#applyS.R",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("applyS","_impl#===#Prelude.Data#applyS.R",1) 2 []),(IFCall ("applyS","_impl#aValue#Prelude.Data#applyS.R",2) [])]))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("applyS","F_T",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R_CASE0",37) [(IVar 2)])))),(IConsBranch ("applyS","F_F",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R_CASE1",36) [(IVar 2)])))),(IConsBranch ("applyS","G_T",2) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R_CASE2",35) [(IVar 2)])))),(IConsBranch ("applyS","G_F",3) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R_CASE3",34) [(IVar 2)]))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R_CASE3",34) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_T",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_F",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_T",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_F",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R_CASE2",35) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_T",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_F",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_T",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_F",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R_CASE1",36) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_T",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_F",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_T",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_F",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R_CASE0",37) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_T",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_F",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_T",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_F",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#aValue#Prelude.Data#applyS.R",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("applyS","F_T",0) []) (ICCall ("applyS","F_F",1) [])) (ICCall ("applyS","G_T",2) [])) (ICCall ("applyS","G_F",3) [])))))),(IFunction ("applyS","_inst#Prelude.Data#applyS.R3",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("applyS","_impl#===#Prelude.Data#applyS.R3",4) 2 []),(IFCall ("applyS","_impl#aValue#Prelude.Data#applyS.R3",5) [])]))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE0",53) [(IVar 2)])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE1",52) [(IVar 2)])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE2",51) [(IVar 2)])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE3",50) [(IVar 2)])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE4",49) [(IVar 2)])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE5",48) [(IVar 2)])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE6",47) [(IVar 2)])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE7",46) [(IVar 2)])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE8",45) [(IVar 2)])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE9",44) [(IVar 2)])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE10",43) [(IVar 2)])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE11",42) [(IVar 2)])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE12",41) [(IVar 2)])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE13",40) [(IVar 2)])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE14",39) [(IVar 2)])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (IFCall ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE15",38) [(IVar 2)]))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE15",38) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE14",39) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE13",40) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE12",41) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE11",42) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE10",43) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE9",44) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE8",45) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE7",46) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE6",47) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE5",48) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE4",49) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE3",50) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE2",51) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE1",52) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#===#Prelude.Data#applyS.R3_CASE0",53) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("applyS","_impl#aValue#Prelude.Data#applyS.R3",5) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (ICCall ("applyS","F_TTT",0) []) (ICCall ("applyS","F_TTF",1) [])) (ICCall ("applyS","F_TFT",2) [])) (ICCall ("applyS","F_TFF",3) [])) (ICCall ("applyS","F_FTT",4) [])) (ICCall ("applyS","F_FTF",5) [])) (ICCall ("applyS","F_FFT",6) [])) (ICCall ("applyS","F_FFF",7) [])) (ICCall ("applyS","G_TTT",8) [])) (ICCall ("applyS","G_TTF",9) [])) (ICCall ("applyS","G_TFT",10) [])) (ICCall ("applyS","G_TFF",11) [])) (ICCall ("applyS","G_FTT",12) [])) (ICCall ("applyS","G_FTF",13) [])) (ICCall ("applyS","G_FFT",14) [])) (ICCall ("applyS","G_FFF",15) [])))))),(IFunction ("applyS","_inst#Prelude.Show#applyS.R",6) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("applyS","_impl#show#Prelude.Show#applyS.R",7) []),(IFPCall ("applyS","_impl#showsPrec#Prelude.Show#applyS.R",8) 2 []),(IFCall ("applyS","_impl#showList#Prelude.Show#applyS.R",9) [])]))))])))),(IFunction ("applyS","_impl#show#Prelude.Show#applyS.R",7) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFPCall ("applyS","_inst#Prelude.Show#applyS.R",6) 1 [])]))))),(IFunction ("applyS","_impl#showsPrec#Prelude.Show#applyS.R",8) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("applyS","F_T",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("applyS","F_F",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("applyS","G_T",2) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("applyS","G_F",3) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])]))))])))),(IFunction ("applyS","_impl#showList#Prelude.Show#applyS.R",9) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFPCall ("applyS","_inst#Prelude.Show#applyS.R",6) 1 [])]))))),(IFunction ("applyS","_inst#Prelude.Show#applyS.R3",10) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("applyS","_impl#show#Prelude.Show#applyS.R3",11) []),(IFPCall ("applyS","_impl#showsPrec#Prelude.Show#applyS.R3",12) 2 []),(IFCall ("applyS","_impl#showList#Prelude.Show#applyS.R3",13) [])]))))])))),(IFunction ("applyS","_impl#show#Prelude.Show#applyS.R3",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFPCall ("applyS","_inst#Prelude.Show#applyS.R3",10) 1 [])]))))),(IFunction ("applyS","_impl#showsPrec#Prelude.Show#applyS.R3",12) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("applyS","F_TTT",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_TTF",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_TFT",2) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_TFF",3) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_FTT",4) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_FTF",5) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_FFT",6) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","F_FFF",7) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_TTT",8) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_TTF",9) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_TFT",10) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_TFF",11) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_FTT",12) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_FTF",13) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_FFT",14) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("applyS","G_FFF",15) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'G')),(ICCall ("Prelude",":",1) [(ILit (IChar '_')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude","[]",0) [])])])])])])]))))])))),(IFunction ("applyS","_impl#showList#Prelude.Show#applyS.R3",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFPCall ("applyS","_inst#Prelude.Show#applyS.R3",10) 1 [])]))))),(IFunction ("applyS","f",14) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_F",1) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_T",0) []))))])))),(IFunction ("applyS","g",15) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_F",3) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_T",2) []))))])))),(IFunction ("applyS","h",16) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IFPCall ("applyS","f",14) 1 []) (IFPCall ("applyS","g",15) 1 [])))))),(IFunction ("applyS","h'",17) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IOr (IFCall ("applyS","f",14) [(IVar 1)]) (IFCall ("applyS","g",15) [(IVar 1)])))))),(IFunction ("applyS","goal0",18) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","f",14) 1 [])]),(IVar 1)])]))))),(IFunction ("applyS","goal1",19) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","f",14) 1 [])]),(IVar 1)])]))))),(IFunction ("applyS","goal2",20) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFCall ("applyS","h",16) [])]),(IVar 1)])]))))),(IFunction ("applyS","goal3",21) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFCall ("applyS","h",16) [])]),(IVar 1)])]))))),(IFunction ("applyS","goal4",22) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","h'",17) 1 [])]),(IVar 1)])]))))),(IFunction ("applyS","goal5",23) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","h'",17) 1 [])]),(IVar 1)])]))))),(IFunction ("applyS","goal10",24) 0 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])))] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","goal10.f.26",54) 2 [])]),(IVar 1)]),(IVar 1)])]))))),(IFunction ("applyS","goal10.f.26",54) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 1),(IVar 2)]))))),(IFunction ("applyS","goal11",25) 0 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])))] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","goal11.f.31",55) 2 [])]),(IVar 1)]),(IVar 1)])]))))),(IFunction ("applyS","goal11.f.31",55) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 1),(IVar 2)]))))),(IFunction ("applyS","f3",26) 3 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","f3_CASE0",59) [(IVar 2),(IVar 3)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","f3_CASE3",56) [(IVar 2),(IVar 3)]))))])))),(IFunction ("applyS","f3_CASE3",56) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","f3_CASE4",58) [(IVar 3)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","f3_CASE5",57) [(IVar 3)]))))])))),(IFunction ("applyS","f3_CASE5",57) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_TTF",1) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_TTT",0) []))))])))),(IFunction ("applyS","f3_CASE4",58) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_TFF",3) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_TFT",2) []))))])))),(IFunction ("applyS","f3_CASE0",59) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","f3_CASE1",61) [(IVar 3)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","f3_CASE2",60) [(IVar 3)]))))])))),(IFunction ("applyS","f3_CASE2",60) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_FTF",5) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_FTT",4) []))))])))),(IFunction ("applyS","f3_CASE1",61) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_FFF",7) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","F_FFT",6) []))))])))),(IFunction ("applyS","g3",27) 3 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 1 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","g3_CASE0",65) [(IVar 2),(IVar 3)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","g3_CASE3",62) [(IVar 2),(IVar 3)]))))])))),(IFunction ("applyS","g3_CASE3",62) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","g3_CASE4",64) [(IVar 3)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","g3_CASE5",63) [(IVar 3)]))))])))),(IFunction ("applyS","g3_CASE5",63) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_TTF",9) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_TTT",8) []))))])))),(IFunction ("applyS","g3_CASE4",64) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_TFF",11) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_TFT",10) []))))])))),(IFunction ("applyS","g3_CASE0",65) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("applyS","g3_CASE1",67) [(IVar 3)])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("applyS","g3_CASE2",66) [(IVar 3)]))))])))),(IFunction ("applyS","g3_CASE2",66) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_FTF",13) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_FTT",12) []))))])))),(IFunction ("applyS","g3_CASE1",67) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 0 [0]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_FFF",15) [])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("applyS","G_FFT",14) []))))])))),(IFunction ("applyS","h3",28) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IFPCall ("applyS","f3",26) 3 []) (IFPCall ("applyS","g3",27) 3 [])))))),(IFunction ("applyS","h3'",29) 3 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (IReturn (IOr (IFCall ("applyS","f3",26) [(IVar 1),(IVar 2),(IVar 3)]) (IFCall ("applyS","g3",27) [(IVar 1),(IVar 2),(IVar 3)])))))),(IFunction ("applyS","goal30",30) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1),(IFreeDecl 2),(IFreeDecl 3)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFCall ("applyS","h3",28) [])]),(IVar 1)]),(IVar 2)]),(IVar 3)])]))))),(IFunction ("applyS","goal31",31) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1),(IFreeDecl 2),(IFreeDecl 3)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFCall ("applyS","h3",28) [])]),(IVar 1)]),(IVar 2)]),(IVar 3)])]))))),(IFunction ("applyS","goal32",32) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1),(IFreeDecl 2),(IFreeDecl 3)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","h3'",29) 3 [])]),(IVar 1)]),(IVar 2)]),(IVar 3)])]))))),(IFunction ("applyS","goal33",33) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1),(IFreeDecl 2),(IFreeDecl 3)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("applyS","h3'",29) 3 [])]),(IVar 1)]),(IVar 2)]),(IVar 3)])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI6Common1a), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude5False), rts.Node(CyI7Prelude4True))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(CyI6Common2f1)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.py:CyI7Control12SetFunctions4_D_L = interp.symbol('Control.SetFunctions.$<').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic12.so matches
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.icy:(IProg "basic03" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic03","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result1",18) 1 [])]),(IFCall ("Control.SetFunctions","set1",4) [(IFCall ("Common","f1",94) []),(IFCall ("Common","a",90) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(CyI6Common2f2), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), _1, _2));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common2g1, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.py:CyI7Control12SetFunctions4_D_G = interp.symbol('Control.SetFunctions.$>').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.icy:(IProg "applic05" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("applic05","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("Common","f1'",95) 1 [])]),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_L;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6Common2g1)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), _1, _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.icy:(IProg "basic08" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic08","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IFCall ("Common","a",90) []),(IOr (ICCall ("Prelude","False",0) []) (ICCall ("Prelude","True",1) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic11.icy:(IProg "basic11" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic11","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IFCall ("Common","a",90) []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1, partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(CyI6Common2f1), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free01.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.icy:(IProg "basic09" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic09","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IOr (ICCall ("Prelude","False",0) []) (ICCall ("Prelude","True",1) [])),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_L, rts.Node(CyI7Control12SetFunctions3set, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common2g1, partial=True))), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.py:CyI7Control12SetFunctions4_D_L = interp.symbol('Control.SetFunctions.$<').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic01.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common39__inst_hPrelude_dOrd_hCommon_dResultABC, partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(CyI6Common2fa), rts.Node(CyI6Common3abc)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free04.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI6Common1a), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic04.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic02.icy:(IProg "applic02" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("applic02","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFCall ("Common","f1",94) [])]),(IVar 1)])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.py:  _0.rewrite(CyI7Control12SetFunctions5evalS, rts.Node(CyI7Control12SetFunctions4_D_G, rts.Node(CyI7Control12SetFunctions3set, rts.Node(CyI6Common2f1)), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.py:CyI7Control12SetFunctions5evalS = interp.symbol('Control.SetFunctions.evalS').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.py:CyI7Control12SetFunctions4_D_G = interp.symbol('Control.SetFunctions.$>').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.py:CyI7Control12SetFunctions3set = interp.symbol('Control.SetFunctions.set').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI7Prelude2_u, true_(), false_()), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.icy:(IProg "basic02" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic02","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result1",18) 1 [])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("Common","g1",96) 1 []),(IFCall ("Common","a",90) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI6Common1a), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude5False), rts.Node(CyI7Prelude4True))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.icy:(IProg "free05" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free05","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IVar 1),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:// IMPORTS: Control.SetFunctions Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_G;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_L;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS1f)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS1f)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create(&CyI6applyS1h)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create(&CyI6applyS1h)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS3h_q)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS3h_q)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS13goal10_df_d26)), _1), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS13goal11_df_d31)), _1), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create(&CyI6applyS2h3)), _1), _2), _3));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create(&CyI6applyS2h3)), _1), _2), _3));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS4h3_q)), _1), _2), _3));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions4_D_L, Node::create(&CyI7Control12SetFunctions3set, Node::create_partial(&CyI6applyS4h3_q)), _1), _2), _3));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applyS.cpp:  , /*imports  */ {"Control.SetFunctions", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic05.so matches
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI6Common1a), Node::create(&CyI7Prelude2_u, false_(), true_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic08.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude5False), rts.Node(CyI7Prelude4True)), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic09.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic06.icy:(IProg "basic06" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic06","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])),(IFCall ("Common","a",90) [])])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI7Prelude2_u, true_(), false_()), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.icy:(IProg "basic01" ["Prelude","Control.SetFunctions","Common"] [] [(IFunction ("basic01","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool",149) 1 [])]),(IFCall ("Control.SetFunctions","set0",3) [(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic13.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.icy:(IProg "basic17" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic17","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.ResultABC",78) 1 [])]),(IFCall ("Control.SetFunctions","set1",4) [(IFCall ("Common","fa",108) []),(IFCall ("Common","abc",107) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic04.icy:(IProg "applic04" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("applic04","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$<",17) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("Common","f1'",95) 1 [])]),(IVar 1)])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free03.so matches
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common39__inst_hPrelude_dOrd_hCommon_dResultABC)), Node::create(&CyI7Control12SetFunctions4set1, Node::create(&CyI6Common2fa), Node::create(&CyI6Common3abc)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic17.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/bfly.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/bfly.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude34__inst_hPrelude_dOrd_hPrelude_dInt, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common4bfly, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude34__inst_hPrelude_dNum_hPrelude_dInt, partial=True)), partial=True)), rts.Node(CyI6Common8binDigit, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude34__inst_hPrelude_dNum_hPrelude_dInt, partial=True))), rts.Node(CyI6Common8binDigit, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude34__inst_hPrelude_dNum_hPrelude_dInt, partial=True)))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/bfly.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/bfly.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/bfly.py:  , imports=('Prelude', 'Common', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), _1, _2));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free09.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.cpp:extern InfoTable const CyI7Control12SetFunctions5evalS;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.cpp:extern InfoTable const CyI7Control12SetFunctions4_D_G;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.cpp:extern InfoTable const CyI7Control12SetFunctions3set;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.cpp:  _0->forward_to(&CyI7Control12SetFunctions5evalS, Node::create(&CyI7Control12SetFunctions4_D_G, Node::create(&CyI7Control12SetFunctions3set, Node::create(&CyI6Common2f1)), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic03.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.cpp:extern InfoTable const CyI7Control12SetFunctions4set0;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dBool)), Node::create(&CyI7Control12SetFunctions4set0, Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1, partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(CyI6Common2f1), rts.Node(CyI6Common1a)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic03.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/adj.icy:(IProg "adj" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("adj","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("Common","adj",112) 1 [(IFPCall ("Prelude","_inst#Prelude.Num#Prelude.Int",340) 1 [])]),(IFCall ("Common","binDigit",111) [(IFPCall ("Prelude","_inst#Prelude.Num#Prelude.Int",340) 1 [])])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.icy:(IProg "basic18" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic18","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#[]",141) 1 [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool",149) 1 [])])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("Common","k",92) 1 []),(IFCall ("Common","a",90) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI6Common1a), rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI7Prelude2_u, false_(), true_()), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic15.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic00.icy:(IProg "basic00" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic00","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool",149) 1 [])]),(IFCall ("Control.SetFunctions","set0",3) [(IFCall ("Common","a",90) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/applic00.icy:(IProg "applic00" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("applic00","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Control.SetFunctions","evalS",19) [(IFCall ("Control.SetFunctions","$>",14) [(IFCall ("Control.SetFunctions","set",11) [(IFPCall ("Common","g1",96) 1 [])]),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free00.icy:(IProg "free00" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free00","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result1",18) 1 [])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("Common","g1",96) 1 []),(IVar 1)])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.icy:(IProg "free10" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free10","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IVar 1),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI6Common1a), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic01.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI6Common1a), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free07.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free10.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic07.icy:(IProg "basic07" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic07","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) []))])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI6Common2g2), Node::create(&CyI6Common1a), Node::create(&CyI7Prelude2_u, true_(), false_())));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic05.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.cpp:  _0->forward_to(&CyI7Prelude2_D, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2)), Node::create(&CyI7Control12SetFunctions4set2, Node::create(&CyI6Common2f2), Node::create(&CyI7Prelude2_u, true_(), false_()), _1));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free11.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.cpp:// IMPORTS: Control.SetFunctions Common Prelude
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult1)), Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI6Common2g1), Node::create(&CyI6Common1a)));
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic02.cpp:  , /*imports  */ {"Control.SetFunctions", "Common", "Prelude"}
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), rts.Node(CyI6Common1a), _1))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free02.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free06.icy:(IProg "free06" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("free06","main",0) 0 Public [] (IFuncBody (IBlock [(IFreeDecl 1)] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("Common","g2",100) 2 []),(IOr (ICCall ("Prelude","True",1) []) (ICCall ("Prelude","False",0) [])),(IVar 1)])])))))])
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic18.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic10.icy:(IProg "basic10" ["Prelude","Common","Control.SetFunctions"] [] [(IFunction ("basic10","main",0) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","$",669) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Common","_inst#Prelude.Ord#Common.Result2",33) 1 [])]),(IFCall ("Control.SetFunctions","set2",5) [(IFCall ("Common","f2",98) []),(IFCall ("Common","a",90) []),(IFCall ("Common","a",90) [])])])))))])
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common37__inst_hPrelude_dOrd_hCommon_dResult2, partial=True))), rts.Node(CyI7Control12SetFunctions4set2, rts.Node(rts.PartApplic, 2, rts.Node(CyI6Common2g2, partial=True)), _1, rts.Node(CyI7Prelude2_u, rts.Node(CyI7Prelude4True), rts.Node(CyI7Prelude5False))))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.py:CyI7Control12SetFunctions4set2 = interp.symbol('Control.SetFunctions.set2').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/free05.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
Binary file ./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic14.so matches
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.py:interp.import_('Control.SetFunctions')
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.py:  _0.rewrite(CyI7Prelude2_D, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI6Common39__inst_hPrelude_dOrd_hCommon_dResultABC, partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(CyI6Common2fa), rts.Node(CyI6Common2ab)))
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/setfunctions/.curry/sprite-pakcs-3.4.1/basic16.py:  , imports=('Common', 'Prelude', 'Control.SetFunctions')
./curry/setfunctions/.curry/pakcs-3.4.1/basic05.fint:Prog "basic05" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic05","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free06.fint:Prog "free06" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free06","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.fcy:Prog "applic03" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic03","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb FuncCall ("Common","f1") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic14.fcy:Prog "basic14" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic14","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Common","a") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","True") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic10.fcy:Prog "basic10" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic10","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Common","a") [],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free00.fcy:Prog "free00" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free00","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result1") []],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Common","g1") [],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic01.fcy:Prog "basic01" ["Prelude","Control.SetFunctions","Common"] [] [Func ("basic01","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []],Comb FuncCall ("Control.SetFunctions","set0") [Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.fcy:Prog "applic01" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic01","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("Common","g1") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free05.fcy:Prog "free05" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free05","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Var 1,Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic19.fcy:Prog "basic19" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic19","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []]],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Common","k") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic08.fcy:Prog "basic08" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic08","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Common","a") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","True") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic07.fint:Prog "basic07" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic07","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.icurry:main 0 :: Control.SetFunctions.Values Common.Result1;
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/free02.fcy:Prog "free02" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free02","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Common","a") [],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic00.fint:Prog "basic00" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic00","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic13.fint:Prog "basic13" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic13","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic13.fcy:Prog "basic13" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic13","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic12.fcy:Prog "basic12" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic12","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic18.fcy:Prog "basic18" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic18","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []]],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Common","k") [],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic19.fint:Prog "basic19" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic19","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic04.fint:Prog "basic04" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic04","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free08.fint:Prog "free08" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free08","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free10.fint:Prog "free10" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free10","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.icurry:main 0 :: Control.SetFunctions.Values Common.Result1;
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/adj.fcy:Prog "adj" ["Prelude","Common","Control.SetFunctions"] [] [Func ("adj","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Common","adj") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb FuncCall ("Common","binDigit") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.fcy:Prog "applic00" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic00","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("Common","g1") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic04.fcy:Prog "basic04" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic04","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Common","a") [],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic00.fint:Prog "applic00" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic00","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.fint:Prog "applyS" ["Prelude","Control.SetFunctions"] [Type ("applyS","R") Public [] [Cons ("applyS","F_T") 0 Public [],Cons ("applyS","F_F") 0 Public [],Cons ("applyS","G_T") 0 Public [],Cons ("applyS","G_F") 0 Public []],Type ("applyS","R3") Public [] [Cons ("applyS","F_TTT") 0 Public [],Cons ("applyS","F_TTF") 0 Public [],Cons ("applyS","F_TFT") 0 Public [],Cons ("applyS","F_TFF") 0 Public [],Cons ("applyS","F_FTT") 0 Public [],Cons ("applyS","F_FTF") 0 Public [],Cons ("applyS","F_FFT") 0 Public [],Cons ("applyS","F_FFF") 0 Public [],Cons ("applyS","G_TTT") 0 Public [],Cons ("applyS","G_TTF") 0 Public [],Cons ("applyS","G_TFT") 0 Public [],Cons ("applyS","G_TFF") 0 Public [],Cons ("applyS","G_FTT") 0 Public [],Cons ("applyS","G_FTF") 0 Public [],Cons ("applyS","G_FFT") 0 Public [],Cons ("applyS","G_FFF") 0 Public []]] [Func ("applyS","_inst#Prelude.Data#applyS.R") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("applyS","R") []])) (Rule [] (Var 0)),Func ("applyS","_impl#===#Prelude.Data#applyS.R") 2 Public (FuncType (TCons ("applyS","R") []) (FuncType (TCons ("applyS","R") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("applyS","_impl#aValue#Prelude.Data#applyS.R") 0 Public (TCons ("applyS","R") []) (Rule [] (Var 0)),Func ("applyS","_inst#Prelude.Data#applyS.R3") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("applyS","R3") []])) (Rule [] (Var 0)),Func ("applyS","_impl#===#Prelude.Data#applyS.R3") 2 Public (FuncType (TCons ("applyS","R3") []) (FuncType (TCons ("applyS","R3") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("applyS","_impl#aValue#Prelude.Data#applyS.R3") 0 Public (TCons ("applyS","R3") []) (Rule [] (Var 0)),Func ("applyS","_inst#Prelude.Show#applyS.R") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("applyS","R") []])) (Rule [] (Var 0)),Func ("applyS","_impl#show#Prelude.Show#applyS.R") 0 Public (FuncType (TCons ("applyS","R") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("applyS","_impl#showsPrec#Prelude.Show#applyS.R") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("applyS","R") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("applyS","_impl#showList#Prelude.Show#applyS.R") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("applyS","R") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("applyS","_inst#Prelude.Show#applyS.R3") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("applyS","R3") []])) (Rule [] (Var 0)),Func ("applyS","_impl#show#Prelude.Show#applyS.R3") 0 Public (FuncType (TCons ("applyS","R3") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("applyS","_impl#showsPrec#Prelude.Show#applyS.R3") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("applyS","R3") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("applyS","_impl#showList#Prelude.Show#applyS.R3") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("applyS","R3") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("applyS","f") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [] (Var 0)),Func ("applyS","g") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [] (Var 0)),Func ("applyS","h") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [] (Var 0)),Func ("applyS","h'") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [] (Var 0)),Func ("applyS","goal0") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Var 0)),Func ("applyS","goal1") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Var 0)),Func ("applyS","goal2") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Var 0)),Func ("applyS","goal3") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Var 0)),Func ("applyS","goal4") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Var 0)),Func ("applyS","goal5") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Var 0)),Func ("applyS","goal10") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]]) (Rule [] (Var 0)),Func ("applyS","goal10.f.26") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("applyS","goal11") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]]) (Rule [] (Var 0)),Func ("applyS","goal11.f.31") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [] (Var 0)),Func ("applyS","f3") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [] (Var 0)),Func ("applyS","g3") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [] (Var 0)),Func ("applyS","h3") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [] (Var 0)),Func ("applyS","h3'") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [] (Var 0)),Func ("applyS","goal30") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Var 0)),Func ("applyS","goal31") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Var 0)),Func ("applyS","goal32") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Var 0)),Func ("applyS","goal33") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic11.fint:Prog "basic11" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic11","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.fcy:Prog "applic02" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic02","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb FuncCall ("Common","f1") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free10.fcy:Prog "free10" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free10","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Var 1,Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free04.fcy:Prog "free04" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free04","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1,2] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Var 1,Var 2]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/bfly.fint:Prog "bfly" ["Prelude","Common","Control.SetFunctions"] [] [Func ("bfly","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free09.fcy:Prog "free09" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free09","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1,2] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Var 1,Var 2]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic00.fcy:Prog "basic00" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic00","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []],Comb FuncCall ("Control.SetFunctions","set0") [Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.fint:Prog "applic01" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic01","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/bfly.fcy:Prog "bfly" ["Prelude","Common","Control.SetFunctions"] [] [Func ("bfly","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Int") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","bfly") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb FuncCall ("Common","binDigit") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []],Comb FuncCall ("Common","binDigit") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Num#Prelude.Int") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic12.fint:Prog "basic12" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic12","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic16.fcy:Prog "basic16" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic16","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","ResultABC") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.ResultABC") []],Comb FuncCall ("Control.SetFunctions","set1") [Comb FuncCall ("Common","fa") [],Comb FuncCall ("Common","ab") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free09.fint:Prog "free09" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free09","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic10.fint:Prog "basic10" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic10","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.fcy:Prog "applic05" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic05","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("Common","f1'") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.icurry:main 0 :: Control.SetFunctions.Values Common.Result1;
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal0 0 :: Control.SetFunctions.Values R;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal1 0 :: Control.SetFunctions.Values R;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:Control.SetFunctions.Values (Prelude.Bool, Prelude.Bool);
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:Control.SetFunctions.Values (Prelude.Bool, Prelude.Bool);
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal2 0 :: Control.SetFunctions.Values R;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal3 0 :: Control.SetFunctions.Values R;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal30 0 :: Control.SetFunctions.Values R3;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal31 0 :: Control.SetFunctions.Values R3;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal32 0 :: Control.SetFunctions.Values R3;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal33 0 :: Control.SetFunctions.Values R3;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal4 0 :: Control.SetFunctions.Values R;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:goal5 0 :: Control.SetFunctions.Values R;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/free06.fcy:Prog "free06" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free06","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.icurry:main 0 :: Control.SetFunctions.Values Common.Result1;
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/basic02.fcy:Prog "basic02" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic02","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result1") []],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Common","g1") [],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.fint:Prog "applic05" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic05","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic01.fint:Prog "basic01" ["Prelude","Control.SetFunctions","Common"] [] [Func ("basic01","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic02.fint:Prog "basic02" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic02","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic06.fint:Prog "basic06" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic06","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.fint:Prog "applic04" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic04","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic16.fint:Prog "basic16" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic16","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","ResultABC") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free07.fcy:Prog "free07" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free07","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Common","a") [],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic03.fint:Prog "applic03" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic03","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic18.fint:Prog "basic18" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic18","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free11.fint:Prog "free11" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free11","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free11.fcy:Prog "free11" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free11","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free00.fint:Prog "free00" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free00","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.icurry:main 0 :: Control.SetFunctions.Values Common.Result1;
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applic05.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/basic17.fint:Prog "basic17" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic17","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","ResultABC") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free01.fcy:Prog "free01" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free01","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result1") []],Comb FuncCall ("Control.SetFunctions","set1") [Comb FuncCall ("Common","f1") [],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free05.fint:Prog "free05" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free05","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic02.fint:Prog "applic02" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic02","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free01.fint:Prog "free01" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free01","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free03.fint:Prog "free03" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free03","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic08.fint:Prog "basic08" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic08","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic09.fint:Prog "basic09" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic09","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic04.fcy:Prog "applic04" ["Prelude","Common","Control.SetFunctions"] [] [Func ("applic04","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Common","Result1") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("Common","f1'") []],Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/adj.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/adj.icurry:main 0 :: Control.SetFunctions.Values Prelude.Int;
./curry/setfunctions/.curry/pakcs-3.4.1/adj.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/adj.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/adj.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/basic09.fcy:Prog "basic09" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic09","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applyS.fcy:Prog "applyS" ["Prelude","Control.SetFunctions"] [Type ("applyS","R") Public [] [Cons ("applyS","F_T") 0 Public [],Cons ("applyS","F_F") 0 Public [],Cons ("applyS","G_T") 0 Public [],Cons ("applyS","G_F") 0 Public []],Type ("applyS","R3") Public [] [Cons ("applyS","F_TTT") 0 Public [],Cons ("applyS","F_TTF") 0 Public [],Cons ("applyS","F_TFT") 0 Public [],Cons ("applyS","F_TFF") 0 Public [],Cons ("applyS","F_FTT") 0 Public [],Cons ("applyS","F_FTF") 0 Public [],Cons ("applyS","F_FFT") 0 Public [],Cons ("applyS","F_FFF") 0 Public [],Cons ("applyS","G_TTT") 0 Public [],Cons ("applyS","G_TTF") 0 Public [],Cons ("applyS","G_TFT") 0 Public [],Cons ("applyS","G_TFF") 0 Public [],Cons ("applyS","G_FTT") 0 Public [],Cons ("applyS","G_FTF") 0 Public [],Cons ("applyS","G_FFT") 0 Public [],Cons ("applyS","G_FFF") 0 Public []]] [Func ("applyS","_inst#Prelude.Data#applyS.R") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("applyS","R") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("applyS","_impl#===#Prelude.Data#applyS.R") [],Comb FuncCall ("applyS","_impl#aValue#Prelude.Data#applyS.R") []])])),Func ("applyS","_impl#===#Prelude.Data#applyS.R") 2 Public (FuncType (TCons ("applyS","R") []) (FuncType (TCons ("applyS","R") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("applyS","F_T") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_T") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_F") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_T") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_F") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_F") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_T") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_F") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_T") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_F") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_T") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_T") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_F") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_T") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_F") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_F") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_T") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_F") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_T") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_F") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("applyS","_impl#aValue#Prelude.Data#applyS.R") 0 Public (TCons ("applyS","R") []) (Rule [] (Or (Or (Or (Comb ConsCall ("applyS","F_T") []) (Comb ConsCall ("applyS","F_F") [])) (Comb ConsCall ("applyS","G_T") [])) (Comb ConsCall ("applyS","G_F") []))),Func ("applyS","_inst#Prelude.Data#applyS.R3") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("applyS","R3") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("applyS","_impl#===#Prelude.Data#applyS.R3") [],Comb FuncCall ("applyS","_impl#aValue#Prelude.Data#applyS.R3") []])])),Func ("applyS","_impl#===#Prelude.Data#applyS.R3") 2 Public (FuncType (TCons ("applyS","R3") []) (FuncType (TCons ("applyS","R3") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("applyS","F_TTT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_TTF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_TFT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_TFF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_FTT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_FTF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_FFT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","F_FFF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_TTT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_TTF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_TFT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_TFF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_FTT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_FTF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_FFT") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("applyS","G_FFF") []) (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","F_FFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_TFF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FTF") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("applyS","G_FFF") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("applyS","_impl#aValue#Prelude.Data#applyS.R3") 0 Public (TCons ("applyS","R3") []) (Rule [] (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Comb ConsCall ("applyS","F_TTT") []) (Comb ConsCall ("applyS","F_TTF") [])) (Comb ConsCall ("applyS","F_TFT") [])) (Comb ConsCall ("applyS","F_TFF") [])) (Comb ConsCall ("applyS","F_FTT") [])) (Comb ConsCall ("applyS","F_FTF") [])) (Comb ConsCall ("applyS","F_FFT") [])) (Comb ConsCall ("applyS","F_FFF") [])) (Comb ConsCall ("applyS","G_TTT") [])) (Comb ConsCall ("applyS","G_TTF") [])) (Comb ConsCall ("applyS","G_TFT") [])) (Comb ConsCall ("applyS","G_TFF") [])) (Comb ConsCall ("applyS","G_FTT") [])) (Comb ConsCall ("applyS","G_FTF") [])) (Comb ConsCall ("applyS","G_FFT") [])) (Comb ConsCall ("applyS","G_FFF") []))),Func ("applyS","_inst#Prelude.Show#applyS.R") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("applyS","R") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("applyS","_impl#show#Prelude.Show#applyS.R") [],Comb (FuncPartCall 2) ("applyS","_impl#showsPrec#Prelude.Show#applyS.R") [],Comb FuncCall ("applyS","_impl#showList#Prelude.Show#applyS.R") []])])),Func ("applyS","_impl#show#Prelude.Show#applyS.R") 0 Public (FuncType (TCons ("applyS","R") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb (FuncPartCall 1) ("applyS","_inst#Prelude.Show#applyS.R") []])),Func ("applyS","_impl#showsPrec#Prelude.Show#applyS.R") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("applyS","R") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("applyS","F_T") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("applyS","F_F") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("applyS","G_T") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("applyS","G_F") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]])])),Func ("applyS","_impl#showList#Prelude.Show#applyS.R") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("applyS","R") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb FuncCall ("Prelude","_def#showList#Prelude.Show") [Comb (FuncPartCall 1) ("applyS","_inst#Prelude.Show#applyS.R") []])),Func ("applyS","_inst#Prelude.Show#applyS.R3") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("applyS","R3") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("applyS","_impl#show#Prelude.Show#applyS.R3") [],Comb (FuncPartCall 2) ("applyS","_impl#showsPrec#Prelude.Show#applyS.R3") [],Comb FuncCall ("applyS","_impl#showList#Prelude.Show#applyS.R3") []])])),Func ("applyS","_impl#show#Prelude.Show#applyS.R3") 0 Public (FuncType (TCons ("applyS","R3") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb (FuncPartCall 1) ("applyS","_inst#Prelude.Show#applyS.R3") []])),Func ("applyS","_impl#showsPrec#Prelude.Show#applyS.R3") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("applyS","R3") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("applyS","F_TTT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_TTF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_TFT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_TFF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_FTT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_FTF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_FFT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","F_FFF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_TTT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_TTF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_TFT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_TFF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_FTT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_FTF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_FFT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("applyS","G_FFF") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("applyS","_impl#showList#Prelude.Show#applyS.R3") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("applyS","R3") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb FuncCall ("Prelude","_def#showList#Prelude.Show") [Comb (FuncPartCall 1) ("applyS","_inst#Prelude.Show#applyS.R3") []])),Func ("applyS","f") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","F_T") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","F_F") [])])),Func ("applyS","g") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","G_T") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","G_F") [])])),Func ("applyS","h") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [] (Comb FuncCall ("Prelude","?") [Comb (FuncPartCall 1) ("applyS","f") [],Comb (FuncPartCall 1) ("applyS","g") []])),Func ("applyS","h'") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R") [])) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb FuncCall ("applyS","f") [Var 1],Comb FuncCall ("applyS","g") [Var 1]])),Func ("applyS","goal0") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("applyS","f") []],Var 1]]))),Func ("applyS","goal1") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("applyS","f") []],Var 1]]))),Func ("applyS","goal2") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb FuncCall ("applyS","h") []],Var 1]]))),Func ("applyS","goal3") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb FuncCall ("applyS","h") []],Var 1]]))),Func ("applyS","goal4") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("applyS","h'") []],Var 1]]))),Func ("applyS","goal5") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R") []]) (Rule [] (Free [1] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 1) ("applyS","h'") []],Var 1]]))),Func ("applyS","goal10") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]]) (Rule [] (Let [(1,Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []])] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 2) ("applyS","goal10.f.26") []],Var 1],Var 1]]))),Func ("applyS","goal10.f.26") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("applyS","goal11") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","Bool") []]]) (Rule [] (Let [(1,Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []])] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 2) ("applyS","goal11.f.31") []],Var 1],Var 1]]))),Func ("applyS","goal11.f.31") 2 Private (ForallType [(0,KStar),(1,KStar)] (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 1,TVar 0])))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("applyS","f3") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","F_TTT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","F_TTF") [])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","F_TFT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","F_TFF") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","F_FTT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","F_FTF") [])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","F_FFT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","F_FFF") [])])])])),Func ("applyS","g3") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","G_TTT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","G_TTF") [])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","G_TFT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","G_TFF") [])])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","True") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","G_FTT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","G_FTF") [])]),Branch (Pattern ("Prelude","False") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("applyS","G_FFT") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("applyS","G_FFF") [])])])])),Func ("applyS","h3") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [] (Comb FuncCall ("Prelude","?") [Comb (FuncPartCall 3) ("applyS","f3") [],Comb (FuncPartCall 3) ("applyS","g3") []])),Func ("applyS","h3'") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("applyS","R3") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","?") [Comb FuncCall ("applyS","f3") [Var 1,Var 2,Var 3],Comb FuncCall ("applyS","g3") [Var 1,Var 2,Var 3]])),Func ("applyS","goal30") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Free [1,2,3] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb FuncCall ("applyS","h3") []],Var 1],Var 2],Var 3]]))),Func ("applyS","goal31") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Free [1,2,3] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb FuncCall ("applyS","h3") []],Var 1],Var 2],Var 3]]))),Func ("applyS","goal32") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Free [1,2,3] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 3) ("applyS","h3'") []],Var 1],Var 2],Var 3]]))),Func ("applyS","goal33") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("applyS","R3") []]) (Rule [] (Free [1,2,3] (Comb FuncCall ("Control.SetFunctions","evalS") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","$>") [Comb FuncCall ("Control.SetFunctions","$<") [Comb FuncCall ("Control.SetFunctions","set") [Comb (FuncPartCall 3) ("applyS","h3'") []],Var 1],Var 2],Var 3]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free07.fint:Prog "free07" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free07","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic11.fcy:Prog "basic11" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic11","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Common","a") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free02.fint:Prog "free02" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free02","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic07.fcy:Prog "basic07" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic07","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free04.fint:Prog "free04" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free04","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic03.fcy:Prog "basic03" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic03","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result1") []],Comb FuncCall ("Control.SetFunctions","set1") [Comb FuncCall ("Common","f1") [],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic15.fint:Prog "basic15" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic15","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic14.fint:Prog "basic14" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic14","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic17.fcy:Prog "basic17" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic17","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","ResultABC") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.ResultABC") []],Comb FuncCall ("Control.SetFunctions","set1") [Comb FuncCall ("Common","fa") [],Comb FuncCall ("Common","abc") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic05.fcy:Prog "basic05" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic05","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Common","a") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free03.fcy:Prog "free03" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free03","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Var 1,Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic06.fcy:Prog "basic06" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic06","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("Common","g2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []],Comb FuncCall ("Common","a") []]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/free08.fcy:Prog "free08" ["Prelude","Common","Control.SetFunctions"] [] [Func ("free08","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Free [1] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Var 1,Var 1]])))] []
./curry/setfunctions/.curry/pakcs-3.4.1/basic15.fcy:Prog "basic15" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic15","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result2") []]) (Rule [] (Comb FuncCall ("Prelude","$") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Common","_inst#Prelude.Ord#Common.Result2") []],Comb FuncCall ("Control.SetFunctions","set2") [Comb FuncCall ("Common","f2") [],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","False") [],Comb ConsCall ("Prelude","True") []],Comb FuncCall ("Prelude","?") [Comb ConsCall ("Prelude","True") [],Comb ConsCall ("Prelude","False") []]]]))] []
./curry/setfunctions/.curry/pakcs-3.4.1/adj.fint:Prog "adj" ["Prelude","Common","Control.SetFunctions"] [] [Func ("adj","main") 0 Public (TCons ("Control.SetFunctions","Values") [TCons ("Prelude","Int") []]) (Rule [] (Var 0))] []
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.icurry:import Control.SetFunctions;
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.icurry:main 0 :: Control.SetFunctions.Values Common.Result1;
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.icurry:hiding data Control.SetFunctions.Values a;
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.icurry:instance Prelude.Data a => Prelude.Data (Control.SetFunctions.Values a) {
./curry/setfunctions/.curry/pakcs-3.4.1/applic01.icurry:} {-# MODULE Control.SetFunctions #-};
./curry/setfunctions/.curry/pakcs-3.4.1/basic03.fint:Prog "basic03" ["Prelude","Common","Control.SetFunctions"] [] [Func ("basic03","main") 0 Public (TCons ("Prelude","[]") [TCons ("Common","Result1") []]) (Rule [] (Var 0))] []
./curry/setfunctions/free11.curry:import SetFunctions
./curry/setfunctions/free11.curry:import Control.SetFunctions
./curry/setfunctions/applic05.curry:import SetFunctions
./curry/setfunctions/applic05.curry:import Control.SetFunctions
./curry/setfunctions/basic13.curry:import SetFunctions
./curry/setfunctions/basic13.curry:import Control.SetFunctions
./curry/setfunctions/free02.curry:import SetFunctions
./curry/setfunctions/free02.curry:import Control.SetFunctions
./curry/setfunctions/free00.curry:import SetFunctions
./curry/setfunctions/free00.curry:import Control.SetFunctions
./curry/setfunctions/basic19.curry:import SetFunctions
./curry/setfunctions/basic19.curry:import Control.SetFunctions
./curry/setfunctions/free07.curry:import SetFunctions
./curry/setfunctions/free07.curry:import Control.SetFunctions
./curry/setfunctions/applic01.curry:import SetFunctions
./curry/setfunctions/applic01.curry:import Control.SetFunctions
./curry/setfunctions/basic04.curry:import SetFunctions
./curry/setfunctions/basic04.curry:import Control.SetFunctions
./curry/setfunctions/basic05.curry:import SetFunctions
./curry/setfunctions/basic05.curry:import Control.SetFunctions
./curry/setfunctions/free06.curry:import SetFunctions
./curry/setfunctions/free06.curry:import Control.SetFunctions
./curry/setfunctions/free05.curry:import SetFunctions
./curry/setfunctions/free05.curry:import Control.SetFunctions
./curry/setfunctions/basic15.curry:import SetFunctions
./curry/setfunctions/basic15.curry:import Control.SetFunctions
./curry/setfunctions/applyS.curry:import Control.SetFunctions
./curry/setfunctions/basic10.curry:import SetFunctions
./curry/setfunctions/basic10.curry:import Control.SetFunctions
./curry/setfunctions/free09.curry:import SetFunctions
./curry/setfunctions/free09.curry:import Control.SetFunctions
./curry/setfunctions/generate_test_programs.py:import SetFunctions
./curry/setfunctions/generate_test_programs.py:import Control.SetFunctions
./curry/setfunctions/basic00.curry:import SetFunctions
./curry/setfunctions/basic00.curry:import Control.SetFunctions
./curry/setfunctions/applic04.curry:import SetFunctions
./curry/setfunctions/applic04.curry:import Control.SetFunctions
./curry/setfunctions/basic17.curry:import SetFunctions
./curry/setfunctions/basic17.curry:import Control.SetFunctions
./curry/setfunctions/free04.curry:import SetFunctions
./curry/setfunctions/free04.curry:import Control.SetFunctions
./curry/setfunctions/applic03.curry:import SetFunctions
./curry/setfunctions/applic03.curry:import Control.SetFunctions
./curry/setfunctions/basic06.curry:import SetFunctions
./curry/setfunctions/basic06.curry:import Control.SetFunctions
./curry/setfunctions/free10.curry:import SetFunctions
./curry/setfunctions/free10.curry:import Control.SetFunctions
./curry/setfunctions/basic14.curry:import SetFunctions
./curry/setfunctions/basic14.curry:import Control.SetFunctions
./curry/setfunctions/applic02.curry:import SetFunctions
./curry/setfunctions/applic02.curry:import Control.SetFunctions
./curry/setfunctions/basic09.curry:import SetFunctions
./curry/setfunctions/basic09.curry:import Control.SetFunctions
./curry/setfunctions/basic12.curry:import SetFunctions
./curry/setfunctions/basic12.curry:import Control.SetFunctions
./curry/setfunctions/basic07.curry:import SetFunctions
./curry/setfunctions/basic07.curry:import Control.SetFunctions
./curry/setfunctions/basic16.curry:import SetFunctions
./curry/setfunctions/basic16.curry:import Control.SetFunctions
./curry/setfunctions/applic00.curry:import SetFunctions
./curry/setfunctions/applic00.curry:import Control.SetFunctions
./curry/setfunctions/basic03.curry:import SetFunctions
./curry/setfunctions/basic03.curry:import Control.SetFunctions
./curry/setfunctions/basic11.curry:import SetFunctions
./curry/setfunctions/basic11.curry:import Control.SetFunctions
./curry/setfunctions/basic08.curry:import SetFunctions
./curry/setfunctions/basic08.curry:import Control.SetFunctions
./curry/setfunctions/basic01.curry:import SetFunctions
./curry/setfunctions/basic01.curry:import Control.SetFunctions
./curry/setfunctions/free01.curry:import SetFunctions
./curry/setfunctions/free01.curry:import Control.SetFunctions
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.cpp:// IMPORTS: Control.SetFunctions Prelude
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.cpp:extern InfoTable const CyI7Control12SetFunctions7isEmpty;
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.cpp:  _0->forward_to(&CyI20poker_four_of_a_kind29isFour__DEFAULT__COMPLEXCASE0, Node::create(&CyI7Control12SetFunctions7isEmpty, Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI20poker_four_of_a_kind18isFour__APPLICABLE), _1)));
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.cpp:  , /*imports  */ {"Control.SetFunctions", "Prelude"}
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:// IMPORTS: Control.SetFunctions Prelude
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions7isEmpty;
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions11selectValue;
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  Node * tmp_2 = Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI31arithmetic_expression_transform8simplify), _1);
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  _0->forward_to(&CyI31arithmetic_expression_transform25simplifyAll__COMPLEXCASE0, _2, _1, Node::create(&CyI7Control12SetFunctions7isEmpty, _2));
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:      _0->forward_to(&CyI31arithmetic_expression_transform11simplifyAll, Node::create(&CyI7Control12SetFunctions11selectValue, _2));
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, Node::create_partial(&CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dChar))), Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI31arithmetic_expression_transform8varInExp), _1));
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  , /*imports  */ {"Control.SetFunctions", "Prelude"}
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.icy:(IProg "queens" ["Prelude","Control.SetFunctions"] [] [(IFunction ("queens","perm",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 1 [0])),(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IFCall ("queens","perm.ndinsert.4",5) [(IVar 2),(IFCall ("queens","perm",0) [(IVar 3)])]))))])))),(IFunction ("queens","perm.ndinsert.4",5) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IOr (IFCall ("queens","perm.ndinsert.4_CASE0",6) [(IVar 2),(IVar 1)]) (ICCall ("Prelude",":",1) [(IVar 1),(IVar 2)])))))),(IFunction ("queens","perm.ndinsert.4_CASE0",6) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 2 [0])),(IVarAssign 4 (IVarAccess 2 [1]))] (IReturn (ICCall ("Prelude",":",1) [(IVar 3),(IFCall ("queens","perm.ndinsert.4",5) [(IVar 1),(IVar 4)])]))))])))),(IFunction ("queens","queens",1) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("queens","perm",0) [(IFCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int",304) [(ILit (IInt 1)),(IVar 1)])]))] (IReturn (IFCall ("queens","queens_COMPLEXCASE0",7) [(IVar 2),(IFCall ("Control.SetFunctions","isEmpty",20) [(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("queens","queens.unsafe.10",8) 1 []),(IVar 2)])])]))))),(IFunction ("queens","queens_COMPLEXCASE0",7) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 2))))])))),(IFunction ("queens","queens.unsafe.10",8) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])]),(IFCall ("Prelude","++",697) [(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("Prelude","++",697) [(ICCall ("Prelude",":",1) [(IVar 2),(ICCall ("Prelude","[]",0) [])]),(IFCall ("Prelude","++",697) [(IVar 3),(IFCall ("Prelude","++",697) [(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude","[]",0) [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])])])])])]),(IVar 1)]),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int",345) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",342) [(IVar 2),(IVar 4)])]),(IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) [(IFCall ("Prelude","length",698) [(IVar 3)]),(ILit (IInt 1))])])]))))),(IFunction ("queens","goal1",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("queens","queens",1) [(ILit (IInt 4))]))))),(IFunction ("queens","goal2",3) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("queens","queens",1) [(ILit (IInt 6))]))))),(IFunction ("queens","main",4) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("queens","goal1",2) [])))))])
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.cpp:// IMPORTS: Control.SetFunctions Prelude
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.cpp:extern InfoTable const CyI7Control12SetFunctions7isEmpty;
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.cpp:  _0->forward_to(&CyI6queens20queens__COMPLEXCASE0, _2, Node::create(&CyI7Control12SetFunctions7isEmpty, Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI6queens18queens_dunsafe_d10), _2)));
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.cpp:  , /*imports  */ {"Control.SetFunctions", "Prelude"}
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.icy:(IProg "poker_four_of_a_kind" ["Prelude","Control.SetFunctions"] [(IDataType ("poker_four_of_a_kind","Suit",0) [(("poker_four_of_a_kind","Club",0),0),(("poker_four_of_a_kind","Spade",1),0),(("poker_four_of_a_kind","Heart",2),0),(("poker_four_of_a_kind","Diamond",3),0)]),(IDataType ("poker_four_of_a_kind","Rank",1) [(("poker_four_of_a_kind","Ace",0),0),(("poker_four_of_a_kind","King",1),0),(("poker_four_of_a_kind","Queen",2),0),(("poker_four_of_a_kind","Jack",3),0),(("poker_four_of_a_kind","Ten",4),0),(("poker_four_of_a_kind","Nine",5),0),(("poker_four_of_a_kind","Eight",6),0),(("poker_four_of_a_kind","Seven",7),0),(("poker_four_of_a_kind","Six",8),0),(("poker_four_of_a_kind","Five",9),0),(("poker_four_of_a_kind","Four",10),0),(("poker_four_of_a_kind","Three",11),0),(("poker_four_of_a_kind","Two",12),0)]),(IDataType ("poker_four_of_a_kind","Card",2) [(("poker_four_of_a_kind","Card",0),2)])] [(IFunction ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Suit",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit",1) 2 []),(IFCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit",2) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE0",30) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE1",29) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE2",28) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE3",27) [(IVar 2)]))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE3",27) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE2",28) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE1",29) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit_CASE0",30) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("poker_four_of_a_kind","Club",0) []) (ICCall ("poker_four_of_a_kind","Spade",1) [])) (ICCall ("poker_four_of_a_kind","Heart",2) [])) (ICCall ("poker_four_of_a_kind","Diamond",3) [])))))),(IFunction ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Rank",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank",4) 2 []),(IFCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank",5) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE0",43) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE1",42) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE2",41) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE3",40) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE4",39) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE5",38) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE6",37) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE7",36) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE8",35) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE9",34) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE10",33) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE11",32) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE12",31) [(IVar 2)]))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE12",31) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE11",32) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE10",33) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE9",34) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE8",35) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE7",36) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE6",37) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE5",38) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE4",39) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE3",40) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE2",41) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE1",42) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank_CASE0",43) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank",5) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (IOr (ICCall ("poker_four_of_a_kind","Ace",0) []) (ICCall ("poker_four_of_a_kind","King",1) [])) (ICCall ("poker_four_of_a_kind","Queen",2) [])) (ICCall ("poker_four_of_a_kind","Jack",3) [])) (ICCall ("poker_four_of_a_kind","Ten",4) [])) (ICCall ("poker_four_of_a_kind","Nine",5) [])) (ICCall ("poker_four_of_a_kind","Eight",6) [])) (ICCall ("poker_four_of_a_kind","Seven",7) [])) (ICCall ("poker_four_of_a_kind","Six",8) [])) (ICCall ("poker_four_of_a_kind","Five",9) [])) (ICCall ("poker_four_of_a_kind","Four",10) [])) (ICCall ("poker_four_of_a_kind","Three",11) [])) (ICCall ("poker_four_of_a_kind","Two",12) [])))))),(IFunction ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card",6) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card",7) 2 []),(IFCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card",8) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card",7) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Card",0) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 1 [0])),(IVarAssign 4 (IVarAccess 1 [1]))] (IReturn (IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card_CASE0",44) [(IVar 2),(IVar 3),(IVar 4)]))))])))),(IFunction ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card_CASE0",44) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 4 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Card",0) 2 (IBlock [(IVarDecl 5),(IVarDecl 6)] [(IVarAssign 5 (IVarAccess 2 [0])),(IVarAssign 6 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank",4) [(IVar 3),(IVar 5)]),(IFCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit",1) [(IVar 4),(IVar 6)])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card",8) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("poker_four_of_a_kind","Card",0) [(IFCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank",5) []),(IFCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit",2) [])]))))),(IFunction ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit",9) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit",10) 2 []),(IFCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit",11) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit",10) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE0",48) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE1",47) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE2",46) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE3",45) [(IVar 2)]))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE3",45) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE2",46) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE1",47) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit_CASE0",48) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Club",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Spade",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Heart",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Diamond",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit",9) 1 [])]))))),(IFunction ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank",12) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Show",0) [(IFCall ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank",13) []),(IFPCall ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank",14) 2 []),(IFCall ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank",15) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#show#Prelude.Show",165) 1 [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank",12) 1 [])]))))),(IFunction ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank",14) 2 Public [1] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'A')),(ICCall ("Prelude",":",1) [(ILit (IChar 'c')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'K')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'Q')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'J')),(ICCall ("Prelude",":",1) [(ILit (IChar 'a')),(ICCall ("Prelude",":",1) [(ILit (IChar 'c')),(ICCall ("Prelude",":",1) [(ILit (IChar 'k')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'N')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'E')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'g')),(ICCall ("Prelude",":",1) [(ILit (IChar 'h')),(ICCall ("Prelude",":",1) [(ILit (IChar 't')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'S')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'n')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'S')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'x')),(ICCall ("Prelude","[]",0) [])])])])])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'i')),(ICCall ("Prelude",":",1) [(ILit (IChar 'v')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'F')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude",":",1) [(ILit (IChar 'u')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude","[]",0) [])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'h')),(ICCall ("Prelude",":",1) [(ILit (IChar 'r')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude",":",1) [(ILit (IChar 'e')),(ICCall ("Prelude","[]",0) [])])])])])])])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (IFPCall ("Prelude","showString",636) 1 [(ICCall ("Prelude",":",1) [(ILit (IChar 'T')),(ICCall ("Prelude",":",1) [(ILit (IChar 'w')),(ICCall ("Prelude",":",1) [(ILit (IChar 'o')),(ICCall ("Prelude","[]",0) [])])])])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank",15) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude","_def#showList#Prelude.Show",167) [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank",12) 1 [])]))))),(IFunction ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank",16) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank",17) 2 []),(IFCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank",18) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank",17) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE0",61) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE1",60) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE2",59) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE3",58) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE4",57) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE5",56) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE6",55) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE7",54) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE8",53) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE9",52) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE10",51) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE11",50) [(IVar 2)])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE12",49) [(IVar 2)]))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE12",49) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE11",50) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE10",51) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE9",52) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE8",53) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE7",54) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE6",55) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE5",56) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE4",57) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE3",58) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE2",59) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE1",60) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank_CASE0",61) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Ace",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("poker_four_of_a_kind","King",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Queen",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Jack",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Ten",4) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Nine",5) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Eight",6) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Seven",7) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Six",8) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Five",9) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Four",10) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Three",11) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("poker_four_of_a_kind","Two",12) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank",18) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank",16) 1 [])]))))),(IFunction ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card",19) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card",20) 2 []),(IFCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card",21) [])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card",20) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Card",0) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 1 [0])),(IVarAssign 4 (IVarAccess 1 [1]))] (IReturn (IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card_CASE0",62) [(IVar 2),(IVar 3),(IVar 4)]))))])))),(IFunction ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card_CASE0",62) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 4 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("poker_four_of_a_kind","Card",0) 2 (IBlock [(IVarDecl 5),(IVarDecl 6)] [(IVarAssign 5 (IVarAccess 2 [0])),(IVarAssign 6 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank",17) [(IVar 3),(IVar 5)]),(IFCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit",10) [(IVar 4),(IVar 6)])]))))])))),(IFunction ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card",21) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card",19) 1 [])]))))),(IFunction ("poker_four_of_a_kind","rank",22) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("poker_four_of_a_kind","Card",0) 2 (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 1 [0]))] (IReturn (IVar 2))))])))),(IFunction ("poker_four_of_a_kind","isFour_ORGRULES",63) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card",6) 1 [])]),(IFCall ("Prelude","++",697) [(IVar 2),(IFCall ("Prelude","++",697) [(ICCall ("Prelude",":",1) [(IFCall ("Prelude","unknown",757) [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card",6) 1 [])]),(ICCall ("Prelude","[]",0) [])]),(IVar 3)])]),(IVar 1)]),(IFCall ("poker_four_of_a_kind","isFour_ORGRULES_COMPLEXCASE0",64) [(IVar 4),(IFCall ("Prelude","_impl#==#Prelude.Eq#[]",62) [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank",16) 1 []),(IFCall ("Prelude","map",700) [(IFPCall ("poker_four_of_a_kind","rank",22) 1 []),(IFCall ("Prelude","++",697) [(IVar 2),(IVar 3)])]),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude","[]",0) [])])])])])])])]))))),(IFunction ("poker_four_of_a_kind","isFour_ORGRULES_COMPLEXCASE0",64) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","Just",1) [(IVar 4)]))))])))),(IFunction ("poker_four_of_a_kind","isFour_APPLICABLE",65) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card",6) 1 [])]),(IFCall ("Prelude","++",697) [(IVar 2),(IFCall ("Prelude","++",697) [(ICCall ("Prelude",":",1) [(IFCall ("Prelude","unknown",757) [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card",6) 1 [])]),(ICCall ("Prelude","[]",0) [])]),(IVar 3)])]),(IVar 1)]),(IFCall ("poker_four_of_a_kind","isFour_APPLICABLE_COMPLEXCASE0",66) [(IFCall ("Prelude","_impl#==#Prelude.Eq#[]",62) [(IFPCall ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank",16) 1 []),(IFCall ("Prelude","map",700) [(IFPCall ("poker_four_of_a_kind","rank",22) 1 []),(IFCall ("Prelude","++",697) [(IVar 2),(IVar 3)])]),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude","[]",0) [])])])])])])])]))))),(IFunction ("poker_four_of_a_kind","isFour_APPLICABLE_COMPLEXCASE0",66) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 5)] [(IVarAssign 5 (IVarAccess 0 [0]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","()",0) []))))])))),(IFunction ("poker_four_of_a_kind","isFour_DEFAULT",67) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("poker_four_of_a_kind","isFour_DEFAULT_COMPLEXCASE0",68) [(IFCall ("Control.SetFunctions","isEmpty",20) [(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("poker_four_of_a_kind","isFour_APPLICABLE",65) 1 []),(IVar 1)])])]))))),(IFunction ("poker_four_of_a_kind","isFour_DEFAULT_COMPLEXCASE0",68) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","Nothing",0) []))))])))),(IFunction ("poker_four_of_a_kind","isFour",23) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IOr (IFCall ("poker_four_of_a_kind","isFour_ORGRULES",63) [(IVar 1)]) (IFCall ("poker_four_of_a_kind","isFour_DEFAULT",67) [(IVar 1)])))))),(IFunction ("poker_four_of_a_kind","main",24) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude","(,)",0) [(IFCall ("poker_four_of_a_kind","isFour",23) [(IFCall ("poker_four_of_a_kind","testYes",25) [])]),(IFCall ("poker_four_of_a_kind","isFour",23) [(IFCall ("poker_four_of_a_kind","testNo",26) [])])]))))),(IFunction ("poker_four_of_a_kind","testYes",25) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Six",8) []),(ICCall ("poker_four_of_a_kind","Club",0) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Six",8) []),(ICCall ("poker_four_of_a_kind","Spade",1) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Five",9) []),(ICCall ("poker_four_of_a_kind","Heart",2) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Six",8) []),(ICCall ("poker_four_of_a_kind","Heart",2) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Six",8) []),(ICCall ("poker_four_of_a_kind","Diamond",3) [])]),(ICCall ("Prelude","[]",0) [])])])])])]))))),(IFunction ("poker_four_of_a_kind","testNo",26) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Six",8) []),(ICCall ("poker_four_of_a_kind","Club",0) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Ace",0) []),(ICCall ("poker_four_of_a_kind","Spade",1) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Five",9) []),(ICCall ("poker_four_of_a_kind","Heart",2) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Ace",0) []),(ICCall ("poker_four_of_a_kind","Club",0) [])]),(ICCall ("Prelude",":",1) [(ICCall ("poker_four_of_a_kind","Card",0) [(ICCall ("poker_four_of_a_kind","Six",8) []),(ICCall ("poker_four_of_a_kind","Diamond",3) [])]),(ICCall ("Prelude","[]",0) [])])])])])])))))])
./curry/smap/.curry/sprite-pakcs-3.4.1/flight_itinerary.icy:(IProg "flight_itinerary" ["Prelude","Control.SetFunctions"] [(IDataType ("flight_itinerary","City",0) [(("flight_itinerary","Portland",0),0),(("flight_itinerary","Frankfurt",1),0),(("flight_itinerary","Amsterdam",2),0),(("flight_itinerary","Hamburg",3),0)]),(IDataType ("flight_itinerary","FlightNumber",1) [(("flight_itinerary","LH469",0),0),(("flight_itinerary","NWA92",1),0),(("flight_itinerary","LH10",2),0),(("flight_itinerary","KL1783",3),0)])] [(IFunction ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City",1) 2 []),(IFCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City",2) [])]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE0",29) [(IVar 2)])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE1",28) [(IVar 2)])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE2",27) [(IVar 2)])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE3",26) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE3",26) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE2",27) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE1",28) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE0",29) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("flight_itinerary","Portland",0) []) (ICCall ("flight_itinerary","Frankfurt",1) [])) (ICCall ("flight_itinerary","Amsterdam",2) [])) (ICCall ("flight_itinerary","Hamburg",3) [])))))),(IFunction ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber",4) 2 []),(IFCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber",5) [])]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE0",33) [(IVar 2)])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE1",32) [(IVar 2)])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE2",31) [(IVar 2)])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE3",30) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE3",30) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE2",31) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE1",32) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE0",33) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber",5) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("flight_itinerary","LH469",0) []) (ICCall ("flight_itinerary","NWA92",1) [])) (ICCall ("flight_itinerary","LH10",2) [])) (ICCall ("flight_itinerary","KL1783",3) [])))))),(IFunction ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber",6) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber",7) 2 []),(IFCall ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber",8) [])]))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber",7) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE0",37) [(IVar 2)])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE1",36) [(IVar 2)])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE2",35) [(IVar 2)])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE3",34) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE3",34) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE2",35) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE1",36) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE0",37) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber",8) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber",6) 1 [])]))))),(IFunction ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [(IFPCall ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber",6) 1 []),(IFCall ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber",10) []),(IFCall ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber",11) []),(IFCall ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber",12) []),(IFPCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber",13) 2 []),(IFCall ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber",14) []),(IFCall ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber",15) []),(IFCall ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber",16) [])]))))])))),(IFunction ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber",10) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#compare#Prelude.Ord",70) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#<#Prelude.Ord",71) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber",12) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#>#Prelude.Ord",72) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber",13) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE0",41) [(IVar 2)])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE1",40) [(IVar 2)])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE2",39) [(IVar 2)])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE3",38) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE3",38) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE2",39) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE1",40) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE0",41) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber",14) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#>=#Prelude.Ord",74) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber",15) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#min#Prelude.Ord",75) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber",16) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#max#Prelude.Ord",76) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary",":.",17) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 1),(IVar 2)]))))),(IFunction ("flight_itinerary","flight",18) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","LH469",0) []),(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Frankfurt",1) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 10)),(ILit (IInt 15))])]) (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","NWA92",1) []),(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Amsterdam",2) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 10)),(ILit (IInt 0))])])) (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","LH10",2) []),(ICCall ("flight_itinerary","Frankfurt",1) []),(ICCall ("flight_itinerary","Hamburg",3) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 1)),(ILit (IInt 0))])])) (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","KL1783",3) []),(ICCall ("flight_itinerary","Amsterdam",2) []),(ICCall ("flight_itinerary","Hamburg",3) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 1)),(ILit (IInt 52))])])))))),(IFunction ("flight_itinerary","itinerary",19) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IOr (IFCall ("flight_itinerary","itinerary_FREE0",44) [(IVar 1),(IVar 2)]) (IFCall ("flight_itinerary","itinerary_FREE2",42) [(IVar 1),(IVar 2)])))))),(IFunction ("flight_itinerary","itinerary_FREE2",42) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 5),(IFreeDecl 6),(IFreeDecl 7),(IFreeDecl 8),(IFreeDecl 9)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("flight_itinerary","itinerary_COMPLEXCASE3",43) [(IVar 5),(IVar 7),(IFCall ("Prelude","&",753) [(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 5),(IVar 1),(IVar 9),(IVar 6)])]),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 7),(IVar 9),(IVar 2),(IVar 8)])])])]))))),(IFunction ("flight_itinerary","itinerary_COMPLEXCASE3",43) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 7),(IVarDecl 10)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 7 (IVarAccess 0 [1])),(IVarAssign 10 (IVarAccess 0 [2]))] (ICaseCons 10 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude",":",1) [(IVar 5),(ICCall ("Prelude",":",1) [(IVar 7),(ICCall ("Prelude","[]",0) [])])]))))])))),(IFunction ("flight_itinerary","itinerary_FREE0",44) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("flight_itinerary","itinerary_COMPLEXCASE1",45) [(IVar 3),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 3),(IVar 1),(IVar 2),(IVar 4)])])]))))),(IFunction ("flight_itinerary","itinerary_COMPLEXCASE1",45) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude",":",1) [(IVar 3),(ICCall ("Prelude","[]",0) [])]))))])))),(IFunction ("flight_itinerary","duration",20) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude",".",679) [(IFPCall ("Prelude","foldr",703) 1 [(IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) 2 []),(ILit (IInt 0))]),(IFPCall ("Prelude","map",700) 1 [(IFPCall ("flight_itinerary","flightToMinutes",21) 1 [])])]))))),(IFunction ("flight_itinerary","flightToMinutes",21) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("flight_itinerary","flightToMinutes_COMPLEXCASE0",46) [(IVar 2),(IVar 3),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 1),(IFCall ("Prelude","unknown",757) [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 [])]),(IFCall ("flight_itinerary",":.",17) [(IVar 2),(IVar 3)])])])]))))),(IFunction ("flight_itinerary","flightToMinutes_COMPLEXCASE0",46) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 4 (IVarAccess 0 [2]))] (ICaseCons 4 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) [(IFCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",343) [(IVar 2),(ILit (IInt 60))]),(IVar 3)]))))])))),(IFunction ("flight_itinerary","shortestItin",22) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IFCall ("flight_itinerary","itinerary",19) [(IVar 1),(IVar 2)]))] (IReturn (IFCall ("flight_itinerary","shortestItin_COMPLEXCASE0",47) [(IVar 3),(IFCall ("Control.SetFunctions","isEmpty",20) [(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("flight_itinerary","shortestItin.shorterItinThan.20",48) 1 [(IVar 2),(IVar 1)]),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 3)])])])]))))),(IFunction ("flight_itinerary","shortestItin_COMPLEXCASE0",47) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1]))] (ICaseCons 4 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 3))))])))),(IFunction ("flight_itinerary","shortestItin.shorterItinThan.20",48) 3 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2])),(IVarAssign 4 (IFCall ("flight_itinerary","itinerary",19) [(IVar 2),(IVar 1)]))] (IReturn (IFCall ("flight_itinerary","shortestItin.shorterItinThan.20_COMPLEXCASE0",49) [(IVar 4),(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 4)])]),(IVar 3)])]))))),(IFunction ("flight_itinerary","shortestItin.shorterItinThan.20_COMPLEXCASE0",49) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 4))))])))),(IFunction ("flight_itinerary","goal1",23) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("flight_itinerary","shortestItin",22) [(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Hamburg",3) [])]))))),(IFunction ("flight_itinerary","shortestItinSelect",24) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Control.SetFunctions","minValueBy",31) [(IFPCall ("flight_itinerary","shortestItinSelect.shorter.28",50) 2 []),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("flight_itinerary","itinerary",19) 2 []),(IVar 1),(IVar 2)])]))))),(IFunction ("flight_itinerary","shortestItinSelect.shorter.28",50) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int",86) []),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 1)])]),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 2)])]))))),(IFunction ("flight_itinerary","goal2",25) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("flight_itinerary","shortestItinSelect",24) [(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Hamburg",3) [])])))))])
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.py:interp.import_('Control.SetFunctions')
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.py:  _0.rewrite(CyI6queens20queens__COMPLEXCASE0, _2, rts.Node(CyI7Control12SetFunctions7isEmpty, rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI6queens18queens_dunsafe_d10, partial=True)), _2)))
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.py:CyI7Control12SetFunctions7isEmpty = interp.symbol('Control.SetFunctions.isEmpty').info
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/smap/.curry/sprite-pakcs-3.4.1/queens.py:  , imports=('Prelude', 'Control.SetFunctions')
Binary file ./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.so matches
Binary file ./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.so matches
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.icy:(IProg "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [(IDataType ("arithmetic_expression_transform","Exp",0) [(("arithmetic_expression_transform","Lit",0),1),(("arithmetic_expression_transform","Var",1),1),(("arithmetic_expression_transform","Add",2),2),(("arithmetic_expression_transform","Mul",3),2)])] [(IFunction ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) 2 []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE0",17) [(IVar 2),(IVar 3)])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 1 [0]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE1",16) [(IVar 2),(IVar 10)])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 17),(IVarDecl 18)] [(IVarAssign 17 (IVarAccess 1 [0])),(IVarAssign 18 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE2",15) [(IVar 2),(IVar 17),(IVar 18)])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 25),(IVarDecl 26)] [(IVarAssign 25 (IVarAccess 1 [0])),(IVarAssign 26 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE3",14) [(IVar 2),(IVar 25),(IVar 26)]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE3",14) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 25),(IVarDecl 26)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 25 (IVarAccess 0 [1])),(IVarAssign 26 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 31),(IVarDecl 32)] [(IVarAssign 31 (IVarAccess 2 [0])),(IVarAssign 32 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 25),(IVar 31)]),(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 26),(IVar 32)])]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE2",15) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 17),(IVarDecl 18)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 17 (IVarAccess 0 [1])),(IVarAssign 18 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 21),(IVarDecl 22)] [(IVarAssign 21 (IVarAccess 2 [0])),(IVarAssign 22 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 17),(IVar 21)]),(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 18),(IVar 22)])])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE1",16) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 10)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 10 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","_impl#===#Prelude.Data#[]",12) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Char",2) 1 []),(IVar 10),(IVar 12)])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE0",17) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int",6) []),(IVar 3)]),(IVar 4)])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("arithmetic_expression_transform","Lit",0) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int",7) [])]) (ICCall ("arithmetic_expression_transform","Var",1) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#[]",13) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Char",2) 1 [])])])) (ICCall ("arithmetic_expression_transform","Add",2) [(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])])) (ICCall ("arithmetic_expression_transform","Mul",3) [(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])])))))),(IFunction ("arithmetic_expression_transform","exp1",3) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))]),(ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Var",1) [(ICCall ("Prelude",":",1) [(ILit (IChar 'x')),(ICCall ("Prelude","[]",0) [])])]),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))])])]))))),(IFunction ("arithmetic_expression_transform","replace",4) 3 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (IVar 3)))),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 2 [0])),(IVarAssign 5 (IVarAccess 2 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE0",18) [(IVar 1),(IVar 4),(IVar 5),(IVar 3)]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE0",18) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 4),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1])),(IVarAssign 5 (IVarAccess 0 [2])),(IVarAssign 3 (IVarAccess 0 [3]))] (ICaseCons 1 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] IExempt)),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] IExempt)),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 6),(IVarDecl 7)] [(IVarAssign 6 (IVarAccess 1 [0])),(IVarAssign 7 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE1",20) [(IVar 4),(IVar 6),(IVar 7),(IVar 5),(IVar 3)])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 8 (IVarAccess 1 [0])),(IVarAssign 9 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE2",19) [(IVar 4),(IVar 8),(IVar 9),(IVar 5),(IVar 3)]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE2",19) 5 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 8),(IVarDecl 9),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1])),(IVarAssign 9 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3])),(IVarAssign 3 (IVarAccess 0 [4]))] (ICaseLit 4 [(ILitBranch (IInt 1) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 8),(IVar 5),(IVar 3)]),(IVar 9)])))),(ILitBranch (IInt 2) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(IVar 8),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 9),(IVar 5),(IVar 3)])]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE1",20) 5 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 6),(IVarDecl 7),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1])),(IVarAssign 7 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3])),(IVarAssign 3 (IVarAccess 0 [4]))] (ICaseLit 4 [(ILitBranch (IInt 1) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 6),(IVar 5),(IVar 3)]),(IVar 7)])))),(ILitBranch (IInt 2) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(IVar 6),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 7),(IVar 5),(IVar 3)])]))))])))),(IFunction ("arithmetic_expression_transform","evalTo",5) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IOr (ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))]),(IVar 1)]) (IOr (ICCall ("arithmetic_expression_transform","Add",2) [(IVar 1),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))])]) (IOr (ICCall ("arithmetic_expression_transform","Mul",3) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))]),(IVar 1)]) (ICCall ("arithmetic_expression_transform","Mul",3) [(IVar 1),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))])])))))))),(IFunction ("arithmetic_expression_transform","simplify",6) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 []),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 2),(IVar 3),(IFCall ("arithmetic_expression_transform","evalTo",5) [(IVar 4)])]),(IVar 1)]),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 2),(IVar 3),(IVar 4)])]))))),(IFunction ("arithmetic_expression_transform","main0",7) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplify",6) [(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","simplifyAll",8) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("arithmetic_expression_transform","simplify",6) 1 []),(IVar 1)]))] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll_COMPLEXCASE0",21) [(IVar 2),(IVar 1),(IFCall ("Control.SetFunctions","isEmpty",20) [(IVar 2)])]))))),(IFunction ("arithmetic_expression_transform","simplifyAll_COMPLEXCASE0",21) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll",8) [(IFCall ("Control.SetFunctions","selectValue",26) [(IVar 2)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 1))))])))),(IFunction ("arithmetic_expression_transform","main1",9) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll",8) [(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","varInExp",10) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 []),(IFCall ("arithmetic_expression_transform","replace",4) [(IFCall ("Prelude","unknown",757) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(ICCall ("arithmetic_expression_transform","Var",1) [(IVar 2)])]),(IVar 1)]),(IVar 2)]))))),(IFunction ("arithmetic_expression_transform","exp2",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Var",1) [(ICCall ("Prelude",":",1) [(ILit (IChar 'y')),(ICCall ("Prelude","[]",0) [])])]),(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","allVars",12) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#[]",141) 1 [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Char",77) 1 [])])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("arithmetic_expression_transform","varInExp",10) 1 []),(IVar 1)])]))))),(IFunction ("arithmetic_expression_transform","main2",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","allVars",12) [(IFCall ("arithmetic_expression_transform","exp2",11) [])])))))])
Binary file ./curry/smap/.curry/sprite-pakcs-3.4.1/queens.so matches
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.py:interp.import_('Control.SetFunctions')
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.py:  _0.rewrite(CyI20poker_four_of_a_kind29isFour__DEFAULT__COMPLEXCASE0, rts.Node(CyI7Control12SetFunctions7isEmpty, rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI20poker_four_of_a_kind18isFour__APPLICABLE, partial=True)), _1)))
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.py:CyI7Control12SetFunctions7isEmpty = interp.symbol('Control.SetFunctions.isEmpty').info
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/smap/.curry/sprite-pakcs-3.4.1/poker_four_of_a_kind.py:  , imports=('Prelude', 'Control.SetFunctions')
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:interp.import_('Control.SetFunctions')
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:  _2 = rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI31arithmetic_expression_transform8simplify, partial=True)), _1)
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:  _0.rewrite(CyI31arithmetic_expression_transform25simplifyAll__COMPLEXCASE0, _2, _1, rts.Node(CyI7Control12SetFunctions7isEmpty, _2))
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:    _0.rewrite(CyI31arithmetic_expression_transform11simplifyAll, rts.Node(CyI7Control12SetFunctions11selectValue, _2))
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:  _0.rewrite(CyI7Prelude5apply, rts.Node(CyI7Control12SetFunctions10sortValues, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, rts.Node(rts.PartApplic, 1, rts.Node(CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dChar, partial=True)), partial=True))), rts.Node(CyI7Control12SetFunctions4set1, rts.Node(rts.PartApplic, 1, rts.Node(CyI31arithmetic_expression_transform8varInExp, partial=True)), _1))
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:CyI7Control12SetFunctions4set1 = interp.symbol('Control.SetFunctions.set1').info
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:CyI7Control12SetFunctions7isEmpty = interp.symbol('Control.SetFunctions.isEmpty').info
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:CyI7Control12SetFunctions11selectValue = interp.symbol('Control.SetFunctions.selectValue').info
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:CyI7Control12SetFunctions10sortValues = interp.symbol('Control.SetFunctions.sortValues').info
./curry/smap/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.py:  , imports=('Prelude', 'Control.SetFunctions')
./curry/smap/.curry/pakcs-3.4.1/arithmetic_expression_transform.fint:Prog "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [Type ("arithmetic_expression_transform","Exp") Public [] [Cons ("arithmetic_expression_transform","Lit") 1 Public [TCons ("Prelude","Int") []],Cons ("arithmetic_expression_transform","Var") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("arithmetic_expression_transform","Add") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []],Cons ("arithmetic_expression_transform","Mul") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []]]] [Func ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("arithmetic_expression_transform","Exp") []])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") 2 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","exp1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","replace") 3 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])))) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","evalTo") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","simplify") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main0") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","simplifyAll") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","varInExp") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","exp2") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","allVars") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0))] []
./curry/smap/.curry/pakcs-3.4.1/queens.fcy:Prog "queens" ["Prelude","Control.SetFunctions"] [] [Func ("queens","perm") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("queens","perm.ndinsert.4") [Var 2,Comb FuncCall ("queens","perm") [Var 3]])])),Func ("queens","perm.ndinsert.4") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Or (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("queens","perm.ndinsert.4") [Var 1,Var 4]])]) (Comb ConsCall ("Prelude",":") [Var 1,Var 2]))),Func ("queens","queens") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Let [(2,Comb FuncCall ("queens","perm") [Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [Lit (Intc 1),Var 1]])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("queens","queens.unsafe.10") [],Var 2]]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("queens","queens.unsafe.10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]]]]]],Var 1],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Var 4]],Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","length") [Var 3],Lit (Intc 1)]]]))),Func ("queens","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("queens","queens") [Lit (Intc 4)])),Func ("queens","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("queens","queens") [Lit (Intc 6)])),Func ("queens","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("queens","goal1") []))] []
./curry/smap/.curry/pakcs-3.4.1/arithmetic_expression_transform.fcy:Prog "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [Type ("arithmetic_expression_transform","Exp") Public [] [Cons ("arithmetic_expression_transform","Lit") 1 Public [TCons ("Prelude","Int") []],Cons ("arithmetic_expression_transform","Var") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("arithmetic_expression_transform","Add") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []],Cons ("arithmetic_expression_transform","Mul") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []]]] [Func ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("arithmetic_expression_transform","Exp") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []])])),Func ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") 2 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("arithmetic_expression_transform","Lit") [3]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 3],Var 4]),Branch (Pattern ("arithmetic_expression_transform","Var") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [6,7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [8,9]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Var") [10]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [12]) (Comb FuncCall ("Prelude","_impl#===#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") [],Var 10,Var 12]),Branch (Pattern ("arithmetic_expression_transform","Add") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [15,16]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Add") [17,18]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [21,22]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 17,Var 21],Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 18,Var 22]]),Branch (Pattern ("arithmetic_expression_transform","Mul") [23,24]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Mul") [25,26]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [29,30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [31,32]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 25,Var 31],Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 26,Var 32]])])])),Func ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Or (Or (Or (Comb ConsCall ("arithmetic_expression_transform","Lit") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") []]) (Comb ConsCall ("arithmetic_expression_transform","Var") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") []]])) (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []])) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []]))),Func ("arithmetic_expression_transform","exp1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)],Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Var") [Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)]]])),Func ("arithmetic_expression_transform","replace") 3 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 1) [Branch (Pattern ("arithmetic_expression_transform","Add") [6,7]) (Case Flex (Var 4) [Branch (LPattern (Intc 1)) (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb FuncCall ("arithmetic_expression_transform","replace") [Var 6,Var 5,Var 3],Var 7]),Branch (LPattern (Intc 2)) (Comb ConsCall ("arithmetic_expression_transform","Add") [Var 6,Comb FuncCall ("arithmetic_expression_transform","replace") [Var 7,Var 5,Var 3]])]),Branch (Pattern ("arithmetic_expression_transform","Mul") [8,9]) (Case Flex (Var 4) [Branch (LPattern (Intc 1)) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb FuncCall ("arithmetic_expression_transform","replace") [Var 8,Var 5,Var 3],Var 9]),Branch (LPattern (Intc 2)) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Var 8,Comb FuncCall ("arithmetic_expression_transform","replace") [Var 9,Var 5,Var 3]])])])])),Func ("arithmetic_expression_transform","evalTo") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)],Var 1],Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Add") [Var 1,Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)],Var 1],Comb ConsCall ("arithmetic_expression_transform","Mul") [Var 1,Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)]]]]])),Func ("arithmetic_expression_transform","simplify") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","replace") [Var 2,Var 3,Comb FuncCall ("arithmetic_expression_transform","evalTo") [Var 4]],Var 1],Comb FuncCall ("arithmetic_expression_transform","replace") [Var 2,Var 3,Var 4]]))),Func ("arithmetic_expression_transform","main0") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","simplify") [Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","simplifyAll") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Let [(2,Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","simplify") [],Var 1])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("arithmetic_expression_transform","simplifyAll") [Comb FuncCall ("Control.SetFunctions","selectValue") [Var 2]])]))),Func ("arithmetic_expression_transform","main1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","simplifyAll") [Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","varInExp") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","replace") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb ConsCall ("arithmetic_expression_transform","Var") [Var 2]],Var 1],Var 2]))),Func ("arithmetic_expression_transform","exp2") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Var") [Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","allVars") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []]],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","varInExp") [],Var 1]])),Func ("arithmetic_expression_transform","main2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","allVars") [Comb FuncCall ("arithmetic_expression_transform","exp2") []]))] []
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.fint:Prog "poker_four_of_a_kind" ["Prelude","Control.SetFunctions"] [Type ("poker_four_of_a_kind","Suit") Public [] [Cons ("poker_four_of_a_kind","Club") 0 Public [],Cons ("poker_four_of_a_kind","Spade") 0 Public [],Cons ("poker_four_of_a_kind","Heart") 0 Public [],Cons ("poker_four_of_a_kind","Diamond") 0 Public []],Type ("poker_four_of_a_kind","Rank") Public [] [Cons ("poker_four_of_a_kind","Ace") 0 Public [],Cons ("poker_four_of_a_kind","King") 0 Public [],Cons ("poker_four_of_a_kind","Queen") 0 Public [],Cons ("poker_four_of_a_kind","Jack") 0 Public [],Cons ("poker_four_of_a_kind","Ten") 0 Public [],Cons ("poker_four_of_a_kind","Nine") 0 Public [],Cons ("poker_four_of_a_kind","Eight") 0 Public [],Cons ("poker_four_of_a_kind","Seven") 0 Public [],Cons ("poker_four_of_a_kind","Six") 0 Public [],Cons ("poker_four_of_a_kind","Five") 0 Public [],Cons ("poker_four_of_a_kind","Four") 0 Public [],Cons ("poker_four_of_a_kind","Three") 0 Public [],Cons ("poker_four_of_a_kind","Two") 0 Public []],Type ("poker_four_of_a_kind","Card") Public [] [Cons ("poker_four_of_a_kind","Card") 2 Public [TCons ("poker_four_of_a_kind","Rank") [],TCons ("poker_four_of_a_kind","Suit") []]]] [Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Suit") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Suit") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") 0 Public (TCons ("poker_four_of_a_kind","Suit") []) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") 0 Public (TCons ("poker_four_of_a_kind","Rank") []) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Card") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card") 0 Public (TCons ("poker_four_of_a_kind","Card") []) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Suit") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Rank") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Card") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","rank") 1 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("poker_four_of_a_kind","Rank") [])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","isFour_ORGRULES") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","isFour_APPLICABLE") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","isFour_DEFAULT") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","isFour") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","main") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []],TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []]]) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","testYes") 0 Public (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (Rule [] (Var 0)),Func ("poker_four_of_a_kind","testNo") 0 Public (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (Rule [] (Var 0))] []
./curry/smap/.curry/pakcs-3.4.1/flight_itinerary.fint:Prog "flight_itinerary" ["Prelude","Control.SetFunctions"] [Type ("flight_itinerary","City") Public [] [Cons ("flight_itinerary","Portland") 0 Public [],Cons ("flight_itinerary","Frankfurt") 0 Public [],Cons ("flight_itinerary","Amsterdam") 0 Public [],Cons ("flight_itinerary","Hamburg") 0 Public []],Type ("flight_itinerary","FlightNumber") Public [] [Cons ("flight_itinerary","LH469") 0 Public [],Cons ("flight_itinerary","NWA92") 0 Public [],Cons ("flight_itinerary","LH10") 0 Public [],Cons ("flight_itinerary","KL1783") 0 Public []]] [Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","City") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City") 0 Public (TCons ("flight_itinerary","City") []) (Rule [] (Var 0)),Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber") 0 Public (TCons ("flight_itinerary","FlightNumber") []) (Rule [] (Var 0)),Func ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Var 0)),Func ("flight_itinerary",":.") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","flight") 0 Public (TCons ("Prelude","(,,,)") [TCons ("flight_itinerary","FlightNumber") [],TCons ("flight_itinerary","City") [],TCons ("flight_itinerary","City") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Var 0)),Func ("flight_itinerary","itinerary") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","duration") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("flight_itinerary","flightToMinutes") 1 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItin") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItin.shorterItinThan.20") 3 Private (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []])))) (Rule [] (Var 0)),Func ("flight_itinerary","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItinSelect") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItinSelect.shorter.28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("flight_itinerary","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Var 0))] []
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.fcy:Prog "poker_four_of_a_kind" ["Prelude","Control.SetFunctions"] [Type ("poker_four_of_a_kind","Suit") Public [] [Cons ("poker_four_of_a_kind","Club") 0 Public [],Cons ("poker_four_of_a_kind","Spade") 0 Public [],Cons ("poker_four_of_a_kind","Heart") 0 Public [],Cons ("poker_four_of_a_kind","Diamond") 0 Public []],Type ("poker_four_of_a_kind","Rank") Public [] [Cons ("poker_four_of_a_kind","Ace") 0 Public [],Cons ("poker_four_of_a_kind","King") 0 Public [],Cons ("poker_four_of_a_kind","Queen") 0 Public [],Cons ("poker_four_of_a_kind","Jack") 0 Public [],Cons ("poker_four_of_a_kind","Ten") 0 Public [],Cons ("poker_four_of_a_kind","Nine") 0 Public [],Cons ("poker_four_of_a_kind","Eight") 0 Public [],Cons ("poker_four_of_a_kind","Seven") 0 Public [],Cons ("poker_four_of_a_kind","Six") 0 Public [],Cons ("poker_four_of_a_kind","Five") 0 Public [],Cons ("poker_four_of_a_kind","Four") 0 Public [],Cons ("poker_four_of_a_kind","Three") 0 Public [],Cons ("poker_four_of_a_kind","Two") 0 Public []],Type ("poker_four_of_a_kind","Card") Public [] [Cons ("poker_four_of_a_kind","Card") 2 Public [TCons ("poker_four_of_a_kind","Rank") [],TCons ("poker_four_of_a_kind","Suit") []]]] [Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Suit") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Suit") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") []])])),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") 0 Public (TCons ("poker_four_of_a_kind","Suit") []) (Rule [] (Or (Or (Or (Comb ConsCall ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("poker_four_of_a_kind","Spade") [])) (Comb ConsCall ("poker_four_of_a_kind","Heart") [])) (Comb ConsCall ("poker_four_of_a_kind","Diamond") []))),Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") []])])),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","King") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") 0 Public (TCons ("poker_four_of_a_kind","Rank") []) (Rule [] (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Or (Comb ConsCall ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("poker_four_of_a_kind","King") [])) (Comb ConsCall ("poker_four_of_a_kind","Queen") [])) (Comb ConsCall ("poker_four_of_a_kind","Jack") [])) (Comb ConsCall ("poker_four_of_a_kind","Ten") [])) (Comb ConsCall ("poker_four_of_a_kind","Nine") [])) (Comb ConsCall ("poker_four_of_a_kind","Eight") [])) (Comb ConsCall ("poker_four_of_a_kind","Seven") [])) (Comb ConsCall ("poker_four_of_a_kind","Six") [])) (Comb ConsCall ("poker_four_of_a_kind","Five") [])) (Comb ConsCall ("poker_four_of_a_kind","Four") [])) (Comb ConsCall ("poker_four_of_a_kind","Three") [])) (Comb ConsCall ("poker_four_of_a_kind","Two") []))),Func ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("poker_four_of_a_kind","Card") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card") []])])),Func ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Card") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Card") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Card") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Rank") [Var 3,Var 5],Comb FuncCall ("poker_four_of_a_kind","_impl#===#Prelude.Data#poker_four_of_a_kind.Suit") [Var 4,Var 6]])])])),Func ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Card") 0 Public (TCons ("poker_four_of_a_kind","Card") []) (Rule [] (Comb ConsCall ("poker_four_of_a_kind","Card") [Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#aValue#Prelude.Data#poker_four_of_a_kind.Suit") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Suit") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") [],Comb FuncCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit") []])])),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Club") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Spade") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Heart") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Diamond") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Suit") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (FuncType (TCons ("poker_four_of_a_kind","Suit") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Suit") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Show") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank") [],Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank") []])])),Func ("poker_four_of_a_kind","_impl#show#Prelude.Show#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") []])),Func ("poker_four_of_a_kind","_impl#showsPrec#Prelude.Show#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'k'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude","[]") []]]]])])),Func ("poker_four_of_a_kind","_impl#showList#Prelude.Show#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Rank") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb FuncCall ("Prelude","_def#showList#Prelude.Show") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Show#poker_four_of_a_kind.Rank") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") [],Comb FuncCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank") []])])),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","King") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Ace") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","King") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Queen") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Jack") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Ten") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Nine") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Eight") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Seven") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Six") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Five") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Four") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Three") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("poker_four_of_a_kind","Two") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Rank") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (FuncType (TCons ("poker_four_of_a_kind","Rank") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") []])),Func ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("poker_four_of_a_kind","Card") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card") [],Comb FuncCall ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card") []])])),Func ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Card") 2 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Card") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("poker_four_of_a_kind","Card") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Rank") [Var 3,Var 5],Comb FuncCall ("poker_four_of_a_kind","_impl#==#Prelude.Eq#poker_four_of_a_kind.Suit") [Var 4,Var 6]])])])),Func ("poker_four_of_a_kind","_impl#/=#Prelude.Eq#poker_four_of_a_kind.Card") 0 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Card") []])),Func ("poker_four_of_a_kind","rank") 1 Public (FuncType (TCons ("poker_four_of_a_kind","Card") []) (TCons ("poker_four_of_a_kind","Rank") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("poker_four_of_a_kind","Card") [2,3]) (Var 2)])),Func ("poker_four_of_a_kind","isFour_ORGRULES") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb ConsCall ("Prelude","[]") []],Var 3]],Var 1],Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","rank") [],Comb FuncCall ("Prelude","++") [Var 2,Var 3]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))),Func ("poker_four_of_a_kind","isFour_APPLICABLE") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","()") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb FuncCall ("Prelude","++") [Var 2,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Data#poker_four_of_a_kind.Card") []],Comb ConsCall ("Prelude","[]") []],Var 3]],Var 1],Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","_inst#Prelude.Eq#poker_four_of_a_kind.Rank") [],Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","rank") [],Comb FuncCall ("Prelude","++") [Var 2,Var 3]],Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","()") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]]))),Func ("poker_four_of_a_kind","isFour_DEFAULT") 1 Private (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TVar 0]))) (Rule [1] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("poker_four_of_a_kind","isFour_APPLICABLE") [],Var 1]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("poker_four_of_a_kind","isFour") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []])) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb FuncCall ("poker_four_of_a_kind","isFour_ORGRULES") [Var 1],Comb FuncCall ("poker_four_of_a_kind","isFour_DEFAULT") [Var 1]])),Func ("poker_four_of_a_kind","main") 0 Public (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []],TCons ("Prelude","Maybe") [TCons ("poker_four_of_a_kind","Rank") []]]) (Rule [] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("poker_four_of_a_kind","isFour") [Comb FuncCall ("poker_four_of_a_kind","testYes") []],Comb FuncCall ("poker_four_of_a_kind","isFour") [Comb FuncCall ("poker_four_of_a_kind","testNo") []]])),Func ("poker_four_of_a_kind","testYes") 0 Public (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Club") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Spade") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Five") [],Comb ConsCall ("poker_four_of_a_kind","Heart") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Heart") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Diamond") []],Comb ConsCall ("Prelude","[]") []]]]]])),Func ("poker_four_of_a_kind","testNo") 0 Public (TCons ("Prelude","[]") [TCons ("poker_four_of_a_kind","Card") []]) (Rule [] (Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Club") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Ace") [],Comb ConsCall ("poker_four_of_a_kind","Spade") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Five") [],Comb ConsCall ("poker_four_of_a_kind","Heart") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Ace") [],Comb ConsCall ("poker_four_of_a_kind","Club") []],Comb ConsCall ("Prelude",":") [Comb ConsCall ("poker_four_of_a_kind","Card") [Comb ConsCall ("poker_four_of_a_kind","Six") [],Comb ConsCall ("poker_four_of_a_kind","Diamond") []],Comb ConsCall ("Prelude","[]") []]]]]]))] []
./curry/smap/.curry/pakcs-3.4.1/queens.fint:Prog "queens" ["Prelude","Control.SetFunctions"] [] [Func ("queens","perm") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("queens","perm.ndinsert.4") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("queens","queens") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("queens","queens.unsafe.10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("queens","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("queens","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("queens","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Var 0))] []
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.pl::-importModule('Control.SetFunctions').
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.pl:'blocked_poker_four_of_a_kind.isFour_DEFAULT'(_3378322,_3380520,_3380526,_3380532):-hnf('Control.SetFunctions.isEmpty'('Control.SetFunctions.set1'(partcall(1,'poker_four_of_a_kind.isFour_APPLICABLE',[]),_3378322)),_3382222,_3380526,_3382198),'blocked_poker_four_of_a_kind.isFour_DEFAULT_ComplexCase'(_3382222,_3378322,_3380520,_3382198,_3380532).
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.uacy:["Control.SetFunctions"]
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.acy:["Control.SetFunctions"]
./curry/smap/.curry/pakcs-3.4.1/poker_four_of_a_kind.acy:  CFunc ("poker_four_of_a_kind","isFour_DEFAULT") 1 Private (CQualType (CContext []) (CFuncType (CTApply (CTCons ("Prelude","[]")) (CTCons ("poker_four_of_a_kind","Card"))) (CTApply (CTCons ("Prelude","Maybe")) (CTVar (0,"a"))))) [CRule [CPVar (0,"patvar_1001")] (CGuardedRhs [(CApply (CSymbol ("Control.SetFunctions","isEmpty")) (CApply (CApply (CSymbol ("Control.SetFunctions","set1")) (CSymbol ("poker_four_of_a_kind","isFour_APPLICABLE"))) (CVar (0,"patvar_1001"))),CSymbol ("Prelude","Nothing"))] [])],
./curry/smap/.curry/pakcs-3.4.1/flight_itinerary.fcy:Prog "flight_itinerary" ["Prelude","Control.SetFunctions"] [Type ("flight_itinerary","City") Public [] [Cons ("flight_itinerary","Portland") 0 Public [],Cons ("flight_itinerary","Frankfurt") 0 Public [],Cons ("flight_itinerary","Amsterdam") 0 Public [],Cons ("flight_itinerary","Hamburg") 0 Public []],Type ("flight_itinerary","FlightNumber") Public [] [Cons ("flight_itinerary","LH469") 0 Public [],Cons ("flight_itinerary","NWA92") 0 Public [],Cons ("flight_itinerary","LH10") 0 Public [],Cons ("flight_itinerary","KL1783") 0 Public []]] [Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","City") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City") [],Comb FuncCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City") []])])),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","Portland") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","Hamburg") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City") 0 Public (TCons ("flight_itinerary","City") []) (Rule [] (Or (Or (Or (Comb ConsCall ("flight_itinerary","Portland") []) (Comb ConsCall ("flight_itinerary","Frankfurt") [])) (Comb ConsCall ("flight_itinerary","Amsterdam") [])) (Comb ConsCall ("flight_itinerary","Hamburg") []))),Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber") []])])),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","LH469") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","NWA92") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","LH10") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","KL1783") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber") 0 Public (TCons ("flight_itinerary","FlightNumber") []) (Rule [] (Or (Or (Or (Comb ConsCall ("flight_itinerary","LH469") []) (Comb ConsCall ("flight_itinerary","NWA92") [])) (Comb ConsCall ("flight_itinerary","LH10") [])) (Comb ConsCall ("flight_itinerary","KL1783") []))),Func ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber") []])])),Func ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","LH469") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","NWA92") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","LH10") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","KL1783") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 2) ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber") []])])),Func ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","LH469") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("flight_itinerary","NWA92") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("flight_itinerary","LH10") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("flight_itinerary","KL1783") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary",":.") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("flight_itinerary","flight") 0 Public (TCons ("Prelude","(,,,)") [TCons ("flight_itinerary","FlightNumber") [],TCons ("flight_itinerary","City") [],TCons ("flight_itinerary","City") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Or (Or (Or (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","LH469") [],Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Frankfurt") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 10),Lit (Intc 15)]]) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","NWA92") [],Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Amsterdam") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 10),Lit (Intc 0)]])) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","LH10") [],Comb ConsCall ("flight_itinerary","Frankfurt") [],Comb ConsCall ("flight_itinerary","Hamburg") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 1),Lit (Intc 0)]])) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","KL1783") [],Comb ConsCall ("flight_itinerary","Amsterdam") [],Comb ConsCall ("flight_itinerary","Hamburg") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 1),Lit (Intc 52)]]))),Func ("flight_itinerary","itinerary") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [1,2] (Or (Free [3,4] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 3,Var 1,Var 2,Var 4]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Free [5,6,7,8,9] (Case Rigid (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 5,Var 1,Var 9,Var 6]],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 7,Var 9,Var 2,Var 8]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])))),Func ("flight_itinerary","duration") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Int") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [],Lit (Intc 0)],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("flight_itinerary","flightToMinutes") []]])),Func ("flight_itinerary","flightToMinutes") 1 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Int") [])) (Rule [1] (Free [2,3] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 1,Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") []],Comb FuncCall ("flight_itinerary",":.") [Var 2,Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 60)],Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("flight_itinerary","shortestItin") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("flight_itinerary","itinerary") [Var 1,Var 2])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("flight_itinerary","shortestItin.shorterItinThan.20") [Var 2,Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("flight_itinerary","shortestItin.shorterItinThan.20") 3 Private (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("flight_itinerary","itinerary") [Var 2,Var 1])] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 4]],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("flight_itinerary","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Comb FuncCall ("flight_itinerary","shortestItin") [Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Hamburg") []])),Func ("flight_itinerary","shortestItinSelect") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [1,2] (Comb FuncCall ("Control.SetFunctions","minValueBy") [Comb (FuncPartCall 2) ("flight_itinerary","shortestItinSelect.shorter.28") [],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("flight_itinerary","itinerary") [],Var 1,Var 2]])),Func ("flight_itinerary","shortestItinSelect.shorter.28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 2]])),Func ("flight_itinerary","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Comb FuncCall ("flight_itinerary","shortestItinSelect") [Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Hamburg") []]))] []
./curry/smap/queens.curry:import Control.SetFunctions
./curry/smap/arithmetic_expression_transform.curry:import Control.SetFunctions
./curry/smap/flight_itinerary.curry:import Control.SetFunctions
./curry/smap/poker_four_of_a_kind.curry:import Control.SetFunctions
Binary file ./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.so matches
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:// IMPORTS: Prelude Control.SetFunctions
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions7isEmpty;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions11selectValue;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:extern InfoTable const CyI7Control12SetFunctions10sortValues;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  Node * tmp_2 = Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI31arithmetic_expression_transform8simplify), _1);
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  _0->forward_to(&CyI31arithmetic_expression_transform25simplifyAll__COMPLEXCASE0, _2, _1, Node::create(&CyI7Control12SetFunctions7isEmpty, _2));
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:      _0->forward_to(&CyI31arithmetic_expression_transform11simplifyAll, Node::create(&CyI7Control12SetFunctions11selectValue, _2));
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  _0->forward_to(&CyI7Prelude5apply, Node::create(&CyI7Control12SetFunctions10sortValues, Node::create_partial(&CyI7Prelude26__inst_hPrelude_dOrd_h_K_k, Node::create_partial(&CyI7Prelude35__inst_hPrelude_dOrd_hPrelude_dChar))), Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI31arithmetic_expression_transform8varInExp), _1));
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.cpp:  , /*imports  */ {"Prelude", "Control.SetFunctions"}
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.cpp:// IMPORTS: Control.SetFunctions Prelude
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.cpp:extern InfoTable const CyI7Control12SetFunctions7isEmpty;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.cpp:  _0->forward_to(&CyI6Queens20queens__COMPLEXCASE0, _2, Node::create(&CyI7Control12SetFunctions7isEmpty, Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI6Queens18queens_dunsafe_d10), _2)));
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.cpp:  , /*imports  */ {"Control.SetFunctions", "Prelude"}
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:// IMPORTS: Control.SetFunctions Prelude
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:extern InfoTable const CyI7Control12SetFunctions7isEmpty;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:extern InfoTable const CyI7Control12SetFunctions4set1;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:extern InfoTable const CyI7Control12SetFunctions10minValueBy;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:extern InfoTable const CyI7Control12SetFunctions4set2;
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:  _0->forward_to(&CyI16flight_itinerary26shortestItin__COMPLEXCASE0, _3, Node::create(&CyI7Control12SetFunctions7isEmpty, Node::create(&CyI7Control12SetFunctions4set1, Node::create_partial(&CyI16flight_itinerary33shortestItin_dshorterItinThan_d20, _2, _1), Node::create(&CyI7Prelude5apply, Node::create(&CyI16flight_itinerary8duration), _3))));
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:  _0->forward_to(&CyI7Control12SetFunctions10minValueBy, Node::create_partial(&CyI16flight_itinerary31shortestItinSelect_dshorter_d28), Node::create(&CyI7Control12SetFunctions4set2, Node::create_partial(&CyI16flight_itinerary9itinerary), _1, _2));
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.cpp:  , /*imports  */ {"Control.SetFunctions", "Prelude"}
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/flight_itinerary.icy:(IProg "flight_itinerary" ["Prelude","Control.SetFunctions"] [(IDataType ("flight_itinerary","City",0) [(("flight_itinerary","Portland",0),0),(("flight_itinerary","Frankfurt",1),0),(("flight_itinerary","Amsterdam",2),0),(("flight_itinerary","Hamburg",3),0)]),(IDataType ("flight_itinerary","FlightNumber",1) [(("flight_itinerary","LH469",0),0),(("flight_itinerary","NWA92",1),0),(("flight_itinerary","LH10",2),0),(("flight_itinerary","KL1783",3),0)])] [(IFunction ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City",1) 2 []),(IFCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City",2) [])]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE0",30) [(IVar 2)])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE1",29) [(IVar 2)])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE2",28) [(IVar 2)])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE3",27) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE3",27) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE2",28) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE1",29) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City_CASE0",30) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","Portland",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","Frankfurt",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Amsterdam",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","Hamburg",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("flight_itinerary","Portland",0) []) (ICCall ("flight_itinerary","Frankfurt",1) [])) (ICCall ("flight_itinerary","Amsterdam",2) [])) (ICCall ("flight_itinerary","Hamburg",3) [])))))),(IFunction ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber",4) 2 []),(IFCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber",5) [])]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber",4) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE0",34) [(IVar 2)])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE1",33) [(IVar 2)])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE2",32) [(IVar 2)])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE3",31) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE3",31) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE2",32) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE1",33) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber_CASE0",34) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber",5) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("flight_itinerary","LH469",0) []) (ICCall ("flight_itinerary","NWA92",1) [])) (ICCall ("flight_itinerary","LH10",2) [])) (ICCall ("flight_itinerary","KL1783",3) [])))))),(IFunction ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber",6) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Eq",0) [(IFPCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber",7) 2 []),(IFCall ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber",8) [])]))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber",7) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE0",38) [(IVar 2)])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE1",37) [(IVar 2)])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE2",36) [(IVar 2)])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE3",35) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE3",35) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE2",36) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE1",37) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber_CASE0",38) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber",8) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#/=#Prelude.Eq",36) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber",6) 1 [])]))))),(IFunction ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Ord",0) [(IFPCall ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber",6) 1 []),(IFCall ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber",10) []),(IFCall ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber",11) []),(IFCall ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber",12) []),(IFPCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber",13) 2 []),(IFCall ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber",14) []),(IFCall ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber",15) []),(IFCall ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber",16) [])]))))])))),(IFunction ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber",10) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#compare#Prelude.Ord",70) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#<#Prelude.Ord",71) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber",12) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#>#Prelude.Ord",72) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber",13) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE0",42) [(IVar 2)])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE1",41) [(IVar 2)])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE2",40) [(IVar 2)])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (IFCall ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE3",39) [(IVar 2)]))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE3",39) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE2",40) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE1",41) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber_CASE0",42) 1 Private [0] (IFuncBody (IBlock [(IVarDecl 2)] [(IVarAssign 2 (IVarAccess 0 [0]))] (ICaseCons 2 [(IConsBranch ("flight_itinerary","LH469",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","NWA92",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","LH10",2) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) [])))),(IConsBranch ("flight_itinerary","KL1783",3) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","True",1) []))))])))),(IFunction ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber",14) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#>=#Prelude.Ord",74) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber",15) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#min#Prelude.Ord",75) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber",16) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFPCall ("Prelude","_def#max#Prelude.Ord",76) 2 [(IFPCall ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber",9) 1 [])]))))),(IFunction ("flight_itinerary",":.",17) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (ICCall ("Prelude","(,)",0) [(IVar 1),(IVar 2)]))))),(IFunction ("flight_itinerary","flight",18) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","LH469",0) []),(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Frankfurt",1) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 10)),(ILit (IInt 15))])]) (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","NWA92",1) []),(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Amsterdam",2) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 10)),(ILit (IInt 0))])])) (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","LH10",2) []),(ICCall ("flight_itinerary","Frankfurt",1) []),(ICCall ("flight_itinerary","Hamburg",3) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 1)),(ILit (IInt 0))])])) (ICCall ("Prelude","(,,,)",0) [(ICCall ("flight_itinerary","KL1783",3) []),(ICCall ("flight_itinerary","Amsterdam",2) []),(ICCall ("flight_itinerary","Hamburg",3) []),(IFCall ("flight_itinerary",":.",17) [(ILit (IInt 1)),(ILit (IInt 52))])])))))),(IFunction ("flight_itinerary","itinerary",19) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IOr (IFCall ("flight_itinerary","itinerary_FREE0",45) [(IVar 1),(IVar 2)]) (IFCall ("flight_itinerary","itinerary_FREE2",43) [(IVar 1),(IVar 2)])))))),(IFunction ("flight_itinerary","itinerary_FREE2",43) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 5),(IFreeDecl 6),(IFreeDecl 7),(IFreeDecl 8),(IFreeDecl 9)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("flight_itinerary","itinerary_COMPLEXCASE3",44) [(IVar 5),(IVar 7),(IFCall ("Prelude","&",753) [(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 5),(IVar 1),(IVar 9),(IVar 6)])]),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 7),(IVar 9),(IVar 2),(IVar 8)])])])]))))),(IFunction ("flight_itinerary","itinerary_COMPLEXCASE3",44) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 5),(IVarDecl 7),(IVarDecl 10)] [(IVarAssign 5 (IVarAccess 0 [0])),(IVarAssign 7 (IVarAccess 0 [1])),(IVarAssign 10 (IVarAccess 0 [2]))] (ICaseCons 10 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude",":",1) [(IVar 5),(ICCall ("Prelude",":",1) [(IVar 7),(ICCall ("Prelude","[]",0) [])])]))))])))),(IFunction ("flight_itinerary","itinerary_FREE0",45) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("flight_itinerary","itinerary_COMPLEXCASE1",46) [(IVar 3),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 3),(IVar 1),(IVar 2),(IVar 4)])])]))))),(IFunction ("flight_itinerary","itinerary_COMPLEXCASE1",46) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 5)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (ICCall ("Prelude",":",1) [(IVar 3),(ICCall ("Prelude","[]",0) [])]))))])))),(IFunction ("flight_itinerary","duration",20) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Prelude",".",679) [(IFPCall ("Prelude","foldr",703) 1 [(IFPCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) 2 []),(ILit (IInt 0))]),(IFPCall ("Prelude","map",700) 1 [(IFPCall ("flight_itinerary","flightToMinutes",21) 1 [])])]))))),(IFunction ("flight_itinerary","flightToMinutes",21) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("flight_itinerary","flightToMinutes_COMPLEXCASE0",47) [(IVar 2),(IVar 3),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#(,,,)",23) 1 [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber",3) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#(,)",17) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("flight_itinerary","flight",18) []),(ICCall ("Prelude","(,,,)",0) [(IVar 1),(IFCall ("Prelude","unknown",757) [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City",0) 1 [])]),(IFCall ("flight_itinerary",":.",17) [(IVar 2),(IVar 3)])])])]))))),(IFunction ("flight_itinerary","flightToMinutes_COMPLEXCASE0",47) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1])),(IVarAssign 4 (IVarAccess 0 [2]))] (ICaseCons 4 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) [(IFCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int",343) [(IVar 2),(ILit (IInt 60))]),(IVar 3)]))))])))),(IFunction ("flight_itinerary","shortestItin",22) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IFCall ("flight_itinerary","itinerary",19) [(IVar 1),(IVar 2)]))] (IReturn (IFCall ("flight_itinerary","shortestItin_COMPLEXCASE0",48) [(IVar 3),(IFCall ("Control.SetFunctions","isEmpty",20) [(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("flight_itinerary","shortestItin.shorterItinThan.20",49) 1 [(IVar 2),(IVar 1)]),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 3)])])])]))))),(IFunction ("flight_itinerary","shortestItin_COMPLEXCASE0",48) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1]))] (ICaseCons 4 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 3))))])))),(IFunction ("flight_itinerary","shortestItin.shorterItinThan.20",49) 3 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2])),(IVarAssign 4 (IFCall ("flight_itinerary","itinerary",19) [(IVar 2),(IVar 1)]))] (IReturn (IFCall ("flight_itinerary","shortestItin.shorterItinThan.20_COMPLEXCASE0",50) [(IVar 4),(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int",87) []),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 4)])]),(IVar 3)])]))))),(IFunction ("flight_itinerary","shortestItin.shorterItinThan.20_COMPLEXCASE0",50) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 5 (IVarAccess 0 [1]))] (ICaseCons 5 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 4))))])))),(IFunction ("flight_itinerary","goal1",23) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("flight_itinerary","shortestItin",22) [(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Hamburg",3) [])]))))),(IFunction ("flight_itinerary","shortestItinSelect",24) 2 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Control.SetFunctions","minValueBy",31) [(IFPCall ("flight_itinerary","shortestItinSelect.shorter.28",51) 2 []),(IFCall ("Control.SetFunctions","set2",5) [(IFPCall ("flight_itinerary","itinerary",19) 2 []),(IVar 1),(IVar 2)])]))))),(IFunction ("flight_itinerary","shortestItinSelect.shorter.28",51) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int",86) []),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 1)])]),(IFCall ("Prelude","apply",760) [(IFCall ("flight_itinerary","duration",20) []),(IVar 2)])]))))),(IFunction ("flight_itinerary","goal2",25) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("flight_itinerary","shortestItinSelect",24) [(ICCall ("flight_itinerary","Portland",0) []),(ICCall ("flight_itinerary","Hamburg",3) [])]))))),(IFunction ("flight_itinerary","main",26) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("flight_itinerary","goal1",23) [])))))])
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.icy:(IProg "Queens" ["Prelude","Control.SetFunctions"] [] [(IFunction ("Queens","perm",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","[]",0) [])))),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 1 [0])),(IVarAssign 3 (IVarAccess 1 [1]))] (IReturn (IFCall ("Queens","perm.ndinsert.4",3) [(IVar 2),(IFCall ("Queens","perm",0) [(IVar 3)])]))))])))),(IFunction ("Queens","perm.ndinsert.4",3) 2 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (IReturn (IOr (IFCall ("Queens","perm.ndinsert.4_CASE0",4) [(IVar 2),(IVar 1)]) (ICCall ("Prelude",":",1) [(IVar 1),(IVar 2)])))))),(IFunction ("Queens","perm.ndinsert.4_CASE0",4) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 3),(IVarDecl 4)] [(IVarAssign 3 (IVarAccess 2 [0])),(IVarAssign 4 (IVarAccess 2 [1]))] (IReturn (ICCall ("Prelude",":",1) [(IVar 3),(IFCall ("Queens","perm.ndinsert.4",3) [(IVar 1),(IVar 4)])]))))])))),(IFunction ("Queens","queens",1) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("Queens","perm",0) [(IFCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int",304) [(ILit (IInt 1)),(IVar 1)])]))] (IReturn (IFCall ("Queens","queens_COMPLEXCASE0",5) [(IVar 2),(IFCall ("Control.SetFunctions","isEmpty",20) [(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("Queens","queens.unsafe.10",6) 1 []),(IVar 2)])])]))))),(IFunction ("Queens","queens_COMPLEXCASE0",5) 2 Private [1] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] IExempt)),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 2))))])))),(IFunction ("Queens","queens.unsafe.10",6) 1 Private [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])]),(IFCall ("Prelude","++",697) [(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(IFCall ("Prelude","++",697) [(ICCall ("Prelude",":",1) [(IVar 2),(ICCall ("Prelude","[]",0) [])]),(IFCall ("Prelude","++",697) [(IVar 3),(IFCall ("Prelude","++",697) [(ICCall ("Prelude",":",1) [(IVar 4),(ICCall ("Prelude","[]",0) [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])])])])])]),(IVar 1)]),(IFCall ("Prelude","=:=",749) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 []),(IFCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int",345) [(IFCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int",342) [(IVar 2),(IVar 4)])]),(IFCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int",341) [(IFCall ("Prelude","length",698) [(IVar 3)]),(ILit (IInt 1))])])]))))),(IFunction ("Queens","main",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("Queens","queens",1) [(ILit (IInt 8))])))))])
Binary file ./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.so matches
./curry/benchmarks/.curry/sprite-pakcs-3.4.1/arithmetic_expression_transform.icy:(IProg "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [(IDataType ("arithmetic_expression_transform","Exp",0) [(("arithmetic_expression_transform","Lit",0),1),(("arithmetic_expression_transform","Var",1),1),(("arithmetic_expression_transform","Add",2),2),(("arithmetic_expression_transform","Mul",3),2)])] [(IFunction ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 Public [0] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (ICaseCons 1 [(IConsBranch ("Prelude","()",0) 0 (IBlock [] [] (IReturn (ICCall ("Prelude","_Dict#Data",0) [(IFPCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) 2 []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) 2 Public [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1]))] (ICaseCons 1 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [(IVarDecl 3)] [(IVarAssign 3 (IVarAccess 1 [0]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE0",18) [(IVar 2),(IVar 3)])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [(IVarDecl 10)] [(IVarAssign 10 (IVarAccess 1 [0]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE1",17) [(IVar 2),(IVar 10)])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 17),(IVarDecl 18)] [(IVarAssign 17 (IVarAccess 1 [0])),(IVarAssign 18 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE2",16) [(IVar 2),(IVar 17),(IVar 18)])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 25),(IVarDecl 26)] [(IVarAssign 25 (IVarAccess 1 [0])),(IVarAssign 26 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE3",15) [(IVar 2),(IVar 25),(IVar 26)]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE3",15) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 25),(IVarDecl 26)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 25 (IVarAccess 0 [1])),(IVarAssign 26 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 31),(IVarDecl 32)] [(IVarAssign 31 (IVarAccess 2 [0])),(IVarAssign 32 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 25),(IVar 31)]),(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 26),(IVar 32)])]))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE2",16) 3 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 17),(IVarDecl 18)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 17 (IVarAccess 0 [1])),(IVarAssign 18 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 21),(IVarDecl 22)] [(IVarAssign 21 (IVarAccess 2 [0])),(IVarAssign 22 (IVarAccess 2 [1]))] (IReturn (IFCall ("Prelude","&&",687) [(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 17),(IVar 21)]),(IFCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp",1) [(IVar 18),(IVar 22)])])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE1",17) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 10)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 10 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [(IVarDecl 12)] [(IVarAssign 12 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","_impl#===#Prelude.Data#[]",12) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Char",2) 1 []),(IVar 10),(IVar 12)])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp_CASE0",18) 2 Private [0] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 3 (IVarAccess 0 [1]))] (ICaseCons 2 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [(IVarDecl 4)] [(IVarAssign 4 (IVarAccess 2 [0]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Prelude","apply",760) [(IFCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int",6) []),(IVar 3)]),(IVar 4)])))),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) [])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [] [] (IReturn (ICCall ("Prelude","False",0) []))))])))),(IFunction ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IOr (IOr (IOr (ICCall ("arithmetic_expression_transform","Lit",0) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int",7) [])]) (ICCall ("arithmetic_expression_transform","Var",1) [(IFCall ("Prelude","_impl#aValue#Prelude.Data#[]",13) [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Char",2) 1 [])])])) (ICCall ("arithmetic_expression_transform","Add",2) [(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])])) (ICCall ("arithmetic_expression_transform","Mul",3) [(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) []),(IFCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp",2) [])])))))),(IFunction ("arithmetic_expression_transform","exp1",3) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))]),(ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Var",1) [(ICCall ("Prelude",":",1) [(ILit (IChar 'x')),(ICCall ("Prelude","[]",0) [])])]),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))])])]))))),(IFunction ("arithmetic_expression_transform","replace",4) 3 Public [1] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 2 [(IConsBranch ("Prelude","[]",0) 0 (IBlock [] [] (IReturn (IVar 3)))),(IConsBranch ("Prelude",":",1) 2 (IBlock [(IVarDecl 4),(IVarDecl 5)] [(IVarAssign 4 (IVarAccess 2 [0])),(IVarAssign 5 (IVarAccess 2 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE0",19) [(IVar 1),(IVar 4),(IVar 5),(IVar 3)]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE0",19) 4 Private [0] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 4),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 4 (IVarAccess 0 [1])),(IVarAssign 5 (IVarAccess 0 [2])),(IVarAssign 3 (IVarAccess 0 [3]))] (ICaseCons 1 [(IConsBranch ("arithmetic_expression_transform","Lit",0) 1 (IBlock [] [] IExempt)),(IConsBranch ("arithmetic_expression_transform","Var",1) 1 (IBlock [] [] IExempt)),(IConsBranch ("arithmetic_expression_transform","Add",2) 2 (IBlock [(IVarDecl 6),(IVarDecl 7)] [(IVarAssign 6 (IVarAccess 1 [0])),(IVarAssign 7 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE1",21) [(IVar 4),(IVar 6),(IVar 7),(IVar 5),(IVar 3)])))),(IConsBranch ("arithmetic_expression_transform","Mul",3) 2 (IBlock [(IVarDecl 8),(IVarDecl 9)] [(IVarAssign 8 (IVarAccess 1 [0])),(IVarAssign 9 (IVarAccess 1 [1]))] (IReturn (IFCall ("arithmetic_expression_transform","replace_CASE2",20) [(IVar 4),(IVar 8),(IVar 9),(IVar 5),(IVar 3)]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE2",20) 5 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 8),(IVarDecl 9),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 8 (IVarAccess 0 [1])),(IVarAssign 9 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3])),(IVarAssign 3 (IVarAccess 0 [4]))] (ICaseLit 4 [(ILitBranch (IInt 1) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 8),(IVar 5),(IVar 3)]),(IVar 9)])))),(ILitBranch (IInt 2) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Mul",3) [(IVar 8),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 9),(IVar 5),(IVar 3)])]))))])))),(IFunction ("arithmetic_expression_transform","replace_CASE1",21) 5 Private [0] (IFuncBody (IBlock [(IVarDecl 4),(IVarDecl 6),(IVarDecl 7),(IVarDecl 5),(IVarDecl 3)] [(IVarAssign 4 (IVarAccess 0 [0])),(IVarAssign 6 (IVarAccess 0 [1])),(IVarAssign 7 (IVarAccess 0 [2])),(IVarAssign 5 (IVarAccess 0 [3])),(IVarAssign 3 (IVarAccess 0 [4]))] (ICaseLit 4 [(ILitBranch (IInt 1) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 6),(IVar 5),(IVar 3)]),(IVar 7)])))),(ILitBranch (IInt 2) (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(IVar 6),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 7),(IVar 5),(IVar 3)])]))))])))),(IFunction ("arithmetic_expression_transform","evalTo",5) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IOr (ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))]),(IVar 1)]) (IOr (ICCall ("arithmetic_expression_transform","Add",2) [(IVar 1),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 0))])]) (IOr (ICCall ("arithmetic_expression_transform","Mul",3) [(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))]),(IVar 1)]) (ICCall ("arithmetic_expression_transform","Mul",3) [(IVar 1),(ICCall ("arithmetic_expression_transform","Lit",0) [(ILit (IInt 1))])])))))))),(IFunction ("arithmetic_expression_transform","simplify",6) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2),(IFreeDecl 3),(IFreeDecl 4)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 []),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 2),(IVar 3),(IFCall ("arithmetic_expression_transform","evalTo",5) [(IVar 4)])]),(IVar 1)]),(IFCall ("arithmetic_expression_transform","replace",4) [(IVar 2),(IVar 3),(IVar 4)])]))))),(IFunction ("arithmetic_expression_transform","main0",7) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplify",6) [(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","simplifyAll",8) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IVarDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0])),(IVarAssign 2 (IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("arithmetic_expression_transform","simplify",6) 1 []),(IVar 1)]))] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll_COMPLEXCASE0",22) [(IVar 2),(IVar 1),(IFCall ("Control.SetFunctions","isEmpty",20) [(IVar 2)])]))))),(IFunction ("arithmetic_expression_transform","simplifyAll_COMPLEXCASE0",22) 3 Private [2] (IFuncBody (IBlock [(IVarDecl 2),(IVarDecl 1),(IVarDecl 3)] [(IVarAssign 2 (IVarAccess 0 [0])),(IVarAssign 1 (IVarAccess 0 [1])),(IVarAssign 3 (IVarAccess 0 [2]))] (ICaseCons 3 [(IConsBranch ("Prelude","False",0) 0 (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll",8) [(IFCall ("Control.SetFunctions","selectValue",26) [(IVar 2)])])))),(IConsBranch ("Prelude","True",1) 0 (IBlock [] [] (IReturn (IVar 1))))])))),(IFunction ("arithmetic_expression_transform","main1",9) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","simplifyAll",8) [(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","varInExp",10) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1),(IFreeDecl 2)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","cond",761) [(IFCall ("Prelude","=:<=",751) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 []),(IFCall ("arithmetic_expression_transform","replace",4) [(IFCall ("Prelude","unknown",757) [(IFPCall ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp",0) 1 [])]),(IFCall ("Prelude","unknown",757) [(IFPCall ("Prelude","_inst#Prelude.Data#[]",11) 1 [(IFPCall ("Prelude","_inst#Prelude.Data#Prelude.Int",5) 1 [])])]),(ICCall ("arithmetic_expression_transform","Var",1) [(IVar 2)])]),(IVar 1)]),(IVar 2)]))))),(IFunction ("arithmetic_expression_transform","exp2",11) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (ICCall ("arithmetic_expression_transform","Add",2) [(ICCall ("arithmetic_expression_transform","Var",1) [(ICCall ("Prelude",":",1) [(ILit (IChar 'y')),(ICCall ("Prelude","[]",0) [])])]),(IFCall ("arithmetic_expression_transform","exp1",3) [])]))))),(IFunction ("arithmetic_expression_transform","allVars",12) 1 Public [] (IFuncBody (IBlock [(IVarDecl 1)] [(IVarAssign 1 (IVarAccess 0 [0]))] (IReturn (IFCall ("Prelude","apply",760) [(IFCall ("Control.SetFunctions","sortValues",36) [(IFPCall ("Prelude","_inst#Prelude.Ord#[]",141) 1 [(IFPCall ("Prelude","_inst#Prelude.Ord#Prelude.Char",77) 1 [])])]),(IFCall ("Control.SetFunctions","set1",4) [(IFPCall ("arithmetic_expression_transform","varInExp",10) 1 []),(IVar 1)])]))))),(IFunction ("arithmetic_expression_transform","main2",13) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","allVars",12) [(IFCall ("arithmetic_expression_transform","exp2",11) [])]))))),(IFunction ("arithmetic_expression_transform","main",14) 0 Public [] (IFuncBody (IBlock [] [] (IReturn (IFCall ("arithmetic_expression_transform","main1",9) [])))))])
Binary file ./curry/benchmarks/.curry/sprite-pakcs-3.4.1/Queens.so matches
./curry/benchmarks/.curry/pakcs-3.4.1/Queens.fint:Prog "Queens" ["Prelude","Control.SetFunctions"] [] [Func ("Queens","perm") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Queens","perm.ndinsert.4") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Queens","queens") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Queens","queens.unsafe.10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Queens","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Var 0))] []
./curry/benchmarks/.curry/pakcs-3.4.1/arithmetic_expression_transform.fint:Prog "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [Type ("arithmetic_expression_transform","Exp") Public [] [Cons ("arithmetic_expression_transform","Lit") 1 Public [TCons ("Prelude","Int") []],Cons ("arithmetic_expression_transform","Var") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("arithmetic_expression_transform","Add") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []],Cons ("arithmetic_expression_transform","Mul") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []]]] [Func ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("arithmetic_expression_transform","Exp") []])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") 2 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","exp1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","replace") 3 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])))) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","evalTo") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","simplify") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main0") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","simplifyAll") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","varInExp") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","exp2") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","allVars") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("arithmetic_expression_transform","main") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Var 0))] []
./curry/benchmarks/.curry/pakcs-3.4.1/arithmetic_expression_transform.fcy:Prog "arithmetic_expression_transform" ["Prelude","Control.SetFunctions"] [Type ("arithmetic_expression_transform","Exp") Public [] [Cons ("arithmetic_expression_transform","Lit") 1 Public [TCons ("Prelude","Int") []],Cons ("arithmetic_expression_transform","Var") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("arithmetic_expression_transform","Add") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []],Cons ("arithmetic_expression_transform","Mul") 2 Public [TCons ("arithmetic_expression_transform","Exp") [],TCons ("arithmetic_expression_transform","Exp") []]]] [Func ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("arithmetic_expression_transform","Exp") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []])])),Func ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") 2 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("arithmetic_expression_transform","Lit") [3]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#===#Prelude.Data#Prelude.Int") [],Var 3],Var 4]),Branch (Pattern ("arithmetic_expression_transform","Var") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [6,7]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [8,9]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Var") [10]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [12]) (Comb FuncCall ("Prelude","_impl#===#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") [],Var 10,Var 12]),Branch (Pattern ("arithmetic_expression_transform","Add") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [15,16]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Add") [17,18]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [21,22]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 17,Var 21],Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 18,Var 22]]),Branch (Pattern ("arithmetic_expression_transform","Mul") [23,24]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("arithmetic_expression_transform","Mul") [25,26]) (Case Flex (Var 2) [Branch (Pattern ("arithmetic_expression_transform","Lit") [27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Var") [28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Add") [29,30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("arithmetic_expression_transform","Mul") [31,32]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 25,Var 31],Comb FuncCall ("arithmetic_expression_transform","_impl#===#Prelude.Data#arithmetic_expression_transform.Exp") [Var 26,Var 32]])])])),Func ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Or (Or (Or (Comb ConsCall ("arithmetic_expression_transform","Lit") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#Prelude.Int") []]) (Comb ConsCall ("arithmetic_expression_transform","Var") [Comb FuncCall ("Prelude","_impl#aValue#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Char") []]])) (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []])) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","_impl#aValue#Prelude.Data#arithmetic_expression_transform.Exp") []]))),Func ("arithmetic_expression_transform","exp1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)],Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Var") [Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]],Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)]]])),Func ("arithmetic_expression_transform","replace") 3 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 1) [Branch (Pattern ("arithmetic_expression_transform","Add") [6,7]) (Case Flex (Var 4) [Branch (LPattern (Intc 1)) (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb FuncCall ("arithmetic_expression_transform","replace") [Var 6,Var 5,Var 3],Var 7]),Branch (LPattern (Intc 2)) (Comb ConsCall ("arithmetic_expression_transform","Add") [Var 6,Comb FuncCall ("arithmetic_expression_transform","replace") [Var 7,Var 5,Var 3]])]),Branch (Pattern ("arithmetic_expression_transform","Mul") [8,9]) (Case Flex (Var 4) [Branch (LPattern (Intc 1)) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb FuncCall ("arithmetic_expression_transform","replace") [Var 8,Var 5,Var 3],Var 9]),Branch (LPattern (Intc 2)) (Comb ConsCall ("arithmetic_expression_transform","Mul") [Var 8,Comb FuncCall ("arithmetic_expression_transform","replace") [Var 9,Var 5,Var 3]])])])])),Func ("arithmetic_expression_transform","evalTo") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)],Var 1],Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Add") [Var 1,Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 0)]],Comb FuncCall ("Prelude","?") [Comb ConsCall ("arithmetic_expression_transform","Mul") [Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)],Var 1],Comb ConsCall ("arithmetic_expression_transform","Mul") [Var 1,Comb ConsCall ("arithmetic_expression_transform","Lit") [Lit (Intc 1)]]]]])),Func ("arithmetic_expression_transform","simplify") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","replace") [Var 2,Var 3,Comb FuncCall ("arithmetic_expression_transform","evalTo") [Var 4]],Var 1],Comb FuncCall ("arithmetic_expression_transform","replace") [Var 2,Var 3,Var 4]]))),Func ("arithmetic_expression_transform","main0") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","simplify") [Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","simplifyAll") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("arithmetic_expression_transform","Exp") [])) (Rule [1] (Let [(2,Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","simplify") [],Var 1])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("arithmetic_expression_transform","simplifyAll") [Comb FuncCall ("Control.SetFunctions","selectValue") [Var 2]])]))),Func ("arithmetic_expression_transform","main1") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","simplifyAll") [Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","varInExp") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Free [2] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") [],Comb FuncCall ("arithmetic_expression_transform","replace") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","_inst#Prelude.Data#arithmetic_expression_transform.Exp") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb ConsCall ("arithmetic_expression_transform","Var") [Var 2]],Var 1],Var 2]))),Func ("arithmetic_expression_transform","exp2") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb ConsCall ("arithmetic_expression_transform","Add") [Comb ConsCall ("arithmetic_expression_transform","Var") [Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("arithmetic_expression_transform","exp1") []])),Func ("arithmetic_expression_transform","allVars") 1 Public (FuncType (TCons ("arithmetic_expression_transform","Exp") []) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Control.SetFunctions","sortValues") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Ord#Prelude.Char") []]],Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("arithmetic_expression_transform","varInExp") [],Var 1]])),Func ("arithmetic_expression_transform","main2") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","allVars") [Comb FuncCall ("arithmetic_expression_transform","exp2") []])),Func ("arithmetic_expression_transform","main") 0 Public (TCons ("arithmetic_expression_transform","Exp") []) (Rule [] (Comb FuncCall ("arithmetic_expression_transform","main1") []))] []
./curry/benchmarks/.curry/pakcs-3.4.1/flight_itinerary.fint:Prog "flight_itinerary" ["Prelude","Control.SetFunctions"] [Type ("flight_itinerary","City") Public [] [Cons ("flight_itinerary","Portland") 0 Public [],Cons ("flight_itinerary","Frankfurt") 0 Public [],Cons ("flight_itinerary","Amsterdam") 0 Public [],Cons ("flight_itinerary","Hamburg") 0 Public []],Type ("flight_itinerary","FlightNumber") Public [] [Cons ("flight_itinerary","LH469") 0 Public [],Cons ("flight_itinerary","NWA92") 0 Public [],Cons ("flight_itinerary","LH10") 0 Public [],Cons ("flight_itinerary","KL1783") 0 Public []]] [Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","City") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City") 0 Public (TCons ("flight_itinerary","City") []) (Rule [] (Var 0)),Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber") 0 Public (TCons ("flight_itinerary","FlightNumber") []) (Rule [] (Var 0)),Func ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Var 0)),Func ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Var 0)),Func ("flight_itinerary",":.") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","flight") 0 Public (TCons ("Prelude","(,,,)") [TCons ("flight_itinerary","FlightNumber") [],TCons ("flight_itinerary","City") [],TCons ("flight_itinerary","City") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Var 0)),Func ("flight_itinerary","itinerary") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","duration") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("flight_itinerary","flightToMinutes") 1 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItin") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItin.shorterItinThan.20") 3 Private (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []])))) (Rule [] (Var 0)),Func ("flight_itinerary","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItinSelect") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [] (Var 0)),Func ("flight_itinerary","shortestItinSelect.shorter.28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("flight_itinerary","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Var 0)),Func ("flight_itinerary","main") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Var 0))] []
./curry/benchmarks/.curry/pakcs-3.4.1/Queens.fcy:Prog "Queens" ["Prelude","Control.SetFunctions"] [] [Func ("Queens","perm") 1 Public (ForallType [(0,KStar)] (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Queens","perm.ndinsert.4") [Var 2,Comb FuncCall ("Queens","perm") [Var 3]])])),Func ("Queens","perm.ndinsert.4") 2 Private (ForallType [(0,KStar)] (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2] (Or (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Queens","perm.ndinsert.4") [Var 1,Var 4]])]) (Comb ConsCall ("Prelude",":") [Var 1,Var 2]))),Func ("Queens","queens") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Let [(2,Comb FuncCall ("Queens","perm") [Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [Lit (Intc 1),Var 1]])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("Queens","queens.unsafe.10") [],Var 2]]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("Queens","queens.unsafe.10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (TCons ("Prelude","Bool") [])) (Rule [1] (Free [2,3,4] (Comb FuncCall ("Prelude","cond") [Comb FuncCall ("Prelude","=:<=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","++") [Var 3,Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#[]") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]]]]]],Var 1],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Var 4]],Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","length") [Var 3],Lit (Intc 1)]]]))),Func ("Queens","main") 0 Public (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (Rule [] (Comb FuncCall ("Queens","queens") [Lit (Intc 8)]))] []
./curry/benchmarks/.curry/pakcs-3.4.1/flight_itinerary.fcy:Prog "flight_itinerary" ["Prelude","Control.SetFunctions"] [Type ("flight_itinerary","City") Public [] [Cons ("flight_itinerary","Portland") 0 Public [],Cons ("flight_itinerary","Frankfurt") 0 Public [],Cons ("flight_itinerary","Amsterdam") 0 Public [],Cons ("flight_itinerary","Hamburg") 0 Public []],Type ("flight_itinerary","FlightNumber") Public [] [Cons ("flight_itinerary","LH469") 0 Public [],Cons ("flight_itinerary","NWA92") 0 Public [],Cons ("flight_itinerary","LH10") 0 Public [],Cons ("flight_itinerary","KL1783") 0 Public []]] [Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","City") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City") [],Comb FuncCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City") []])])),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.City") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","Portland") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","Hamburg") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","Portland") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Frankfurt") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Amsterdam") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","Hamburg") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.City") 0 Public (TCons ("flight_itinerary","City") []) (Rule [] (Or (Or (Or (Comb ConsCall ("flight_itinerary","Portland") []) (Comb ConsCall ("flight_itinerary","Frankfurt") [])) (Comb ConsCall ("flight_itinerary","Amsterdam") [])) (Comb ConsCall ("flight_itinerary","Hamburg") []))),Func ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Data") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Data") [Comb (FuncPartCall 2) ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber") []])])),Func ("flight_itinerary","_impl#===#Prelude.Data#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","LH469") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","NWA92") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","LH10") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","KL1783") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#aValue#Prelude.Data#flight_itinerary.FlightNumber") 0 Public (TCons ("flight_itinerary","FlightNumber") []) (Rule [] (Or (Or (Or (Comb ConsCall ("flight_itinerary","LH469") []) (Comb ConsCall ("flight_itinerary","NWA92") [])) (Comb ConsCall ("flight_itinerary","LH10") [])) (Comb ConsCall ("flight_itinerary","KL1783") []))),Func ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Eq") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber") []])])),Func ("flight_itinerary","_impl#==#Prelude.Eq#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","LH469") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","NWA92") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","LH10") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("flight_itinerary","KL1783") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#/=#Prelude.Eq#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","_Dict#Ord") [TCons ("flight_itinerary","FlightNumber") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","_Dict#Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Eq#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 2) ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber") [],Comb FuncCall ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber") []])])),Func ("flight_itinerary","_impl#compare#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#<#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#>#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#<=#Prelude.Ord#flight_itinerary.FlightNumber") 2 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("flight_itinerary","LH469") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("flight_itinerary","NWA92") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("flight_itinerary","LH10") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("flight_itinerary","KL1783") []) (Case Flex (Var 2) [Branch (Pattern ("flight_itinerary","LH469") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","NWA92") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","LH10") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("flight_itinerary","KL1783") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("flight_itinerary","_impl#>=#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#min#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary","_impl#max#Prelude.Ord#flight_itinerary.FlightNumber") 0 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("flight_itinerary","FlightNumber") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Ord#flight_itinerary.FlightNumber") []])),Func ("flight_itinerary",":.") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Var 1,Var 2])),Func ("flight_itinerary","flight") 0 Public (TCons ("Prelude","(,,,)") [TCons ("flight_itinerary","FlightNumber") [],TCons ("flight_itinerary","City") [],TCons ("flight_itinerary","City") [],TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]]) (Rule [] (Or (Or (Or (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","LH469") [],Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Frankfurt") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 10),Lit (Intc 15)]]) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","NWA92") [],Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Amsterdam") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 10),Lit (Intc 0)]])) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","LH10") [],Comb ConsCall ("flight_itinerary","Frankfurt") [],Comb ConsCall ("flight_itinerary","Hamburg") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 1),Lit (Intc 0)]])) (Comb ConsCall ("Prelude","(,,,)") [Comb ConsCall ("flight_itinerary","KL1783") [],Comb ConsCall ("flight_itinerary","Amsterdam") [],Comb ConsCall ("flight_itinerary","Hamburg") [],Comb FuncCall ("flight_itinerary",":.") [Lit (Intc 1),Lit (Intc 52)]]))),Func ("flight_itinerary","itinerary") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [1,2] (Or (Free [3,4] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 3,Var 1,Var 2,Var 4]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])) (Free [5,6,7,8,9] (Case Rigid (Comb FuncCall ("Prelude","&") [Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 5,Var 1,Var 9,Var 6]],Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 7,Var 9,Var 2,Var 8]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 5,Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])))),Func ("flight_itinerary","duration") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Int") [])) (Rule [] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [],Lit (Intc 0)],Comb (FuncPartCall 1) ("Prelude","map") [Comb (FuncPartCall 1) ("flight_itinerary","flightToMinutes") []]])),Func ("flight_itinerary","flightToMinutes") 1 Public (FuncType (TCons ("flight_itinerary","FlightNumber") []) (TCons ("Prelude","Int") [])) (Rule [1] (Free [2,3] (Case Rigid (Comb FuncCall ("Prelude","=:=") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,,,)") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.FlightNumber") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#(,)") [Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_inst#Prelude.Data#Prelude.Int") []]],Comb FuncCall ("flight_itinerary","flight") [],Comb ConsCall ("Prelude","(,,,)") [Var 1,Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") []],Comb FuncCall ("Prelude","unknown") [Comb (FuncPartCall 1) ("flight_itinerary","_inst#Prelude.Data#flight_itinerary.City") []],Comb FuncCall ("flight_itinerary",":.") [Var 2,Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 60)],Var 3]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("flight_itinerary","shortestItin") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [1,2] (Let [(3,Comb FuncCall ("flight_itinerary","itinerary") [Var 1,Var 2])] (Case Rigid (Comb FuncCall ("Control.SetFunctions","isEmpty") [Comb FuncCall ("Control.SetFunctions","set1") [Comb (FuncPartCall 1) ("flight_itinerary","shortestItin.shorterItinThan.20") [Var 2,Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 3]]]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("flight_itinerary","shortestItin.shorterItinThan.20") 3 Private (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []])))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("flight_itinerary","itinerary") [Var 2,Var 1])] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 4]],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 4),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])]))),Func ("flight_itinerary","goal1") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Comb FuncCall ("flight_itinerary","shortestItin") [Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Hamburg") []])),Func ("flight_itinerary","shortestItinSelect") 2 Public (FuncType (TCons ("flight_itinerary","City") []) (FuncType (TCons ("flight_itinerary","City") []) (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]))) (Rule [1,2] (Comb FuncCall ("Control.SetFunctions","minValueBy") [Comb (FuncPartCall 2) ("flight_itinerary","shortestItinSelect.shorter.28") [],Comb FuncCall ("Control.SetFunctions","set2") [Comb (FuncPartCall 2) ("flight_itinerary","itinerary") [],Var 1,Var 2]])),Func ("flight_itinerary","shortestItinSelect.shorter.28") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (FuncType (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 1]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("flight_itinerary","duration") [],Var 2]])),Func ("flight_itinerary","goal2") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Comb FuncCall ("flight_itinerary","shortestItinSelect") [Comb ConsCall ("flight_itinerary","Portland") [],Comb ConsCall ("flight_itinerary","Hamburg") []])),Func ("flight_itinerary","main") 0 Public (TCons ("Prelude","[]") [TCons ("flight_itinerary","FlightNumber") []]) (Rule [] (Comb FuncCall ("flight_itinerary","goal1") []))] []
./curry/benchmarks/arithmetic_expression_transform.curry:import Control.SetFunctions
./curry/benchmarks/flight_itinerary.curry:import Control.SetFunctions
./curry/benchmarks/Queens.curry:import Control.SetFunctions
./curry/puzzles/longest_valid_parentheses.curry:import Control.SetFunctions
./curry/puzzles/wildcard_matching.curry:import Control.SetFunctions
./curry/puzzles/longest_substring.curry:import Control.SetFunctions
./curry/puzzles/strong_password_checker.curry:import Control.SetFunctions
./curry/puzzles/penalty.curry:import Control.SetFunctions
