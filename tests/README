Sprite unit tests
=================

1. RUNNING TESTS
----------------

To run all tests, say `./run_tests`.

To run a specific test, say, e.g., `./run_tests func_kiel.py`


2. TEST CATEGORIES
------------------

Two kinds of tests are used:

  * Unit tests:

      These tests, beginning with 'unit_', pinpoint specific code areas.
      Running the unit tests should cover every line of code.

  * Functional tests:

      These tests, beginning with 'func_', compare the output of Sprite to
      another Curry system called the oracle (see section 5).  Their purpose is
      to provide evidence that Sprite behaves as intended.


3. FILE LAYOUT
--------------

The files under this directory are arranged as follows:

        data/  Test data (e.g., source code, sample inputs, expected output).
        lib/   Test harness code.
        *.py   Test cases.


4. ADVANCED USAGE
-----------------

The following test drivers are provided:

        run_tests       Run unit tests.
        debug_tests     Run unit tests under gdb.
                        (For debugging C++ code.)
        valgrind_tests  Run unit tests under valgrind.
                        (For debugging memory problems.)
        cov_tests       Run unit tests under coverage.py.
                        (For measuring line coverage.)

Each of these uses the same command line interface:

        <driver> [pattern]

The pattern should be quoted.  To run just the unit tests, for example, say:

        ./run_tests 'unit*.py'


5. ORACLE CONFIGURATION
-----------------------

Some tests rely on another Curry system, called the "oracle," to generate
expected results.  To run these tests, you will need access to another Curry
system such as PAKCS or KiCS2.

The oracles are configured through the 'oracle*' scripts in this directory.  To
disable oracle-based tests, remove these or make them non-executable.


6. TESTING GUIDELINES
---------------------

Unit tests match the pattern unit_*.py.

  - To run: run_tests 'unit_*.py'
  - Unit tests check isolated code.  The key metric is line coverage.
	- Every new feature requires a unit test.
  - Unit tests are expected to run quickly, as they are part of the
    edit-build-test cycle.  Tests that take a long time to run do not belong in
    the unit test area.
  - Use the cov_tests driver to assess the quality of new tests.  A good test
    increases line coverage with the smallest possible increase in resource
    usage (e.g., time and memory).

Functional tests match the pattern func_*.py:

  - To run: run_tests 'func_*.py'
  - Functional testing ensures Curry programs produce the correct output.
	- These tests check the behavior of sample programs against other Curry
		implementations or known results.
	- These tests are allowed to consume more resources than unit tests, but
		should still be made as small as possible.  For instance, to check a
		list-reversal program, it is reasonable to reverse a handful of elements,
		not millions.  These tests are not stress tests and do not need to
		explore the limits of the implementation.


7. EDITOR INTEGRATION
---------------------

A makefile is used to (possibly) simplify integration with text editors.  For
instance, in vim, pressing <Enter> runs "make" by default.  That shortcut can
be used to easily run the tests directly from a text editor.  Other editors
have similar features.

