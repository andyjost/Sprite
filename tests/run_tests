#!/bin/bash

cd $( dirname "${BASH_SOURCE[0]}" )

if [ -z "$SPRITE_HOME" ]; then
  SPRITE_HOME=`realpath ../install`
fi

1>&2 python <<EOF
from __future__ import print_function
text = 'Using SPRITE_HOME=$SPRITE_HOME'
n = len(text) + 16
border = '*' * n
print()
print(border)
print(text.center(n))
print(border)
print()
EOF

if [ ! -d "$SPRITE_HOME" ]; then
  1>&2 echo Error: SPRITE_HOME is not a directory.
  exit 1
fi

if [ ! -r "$SPRITE_HOME/lib/libcyrt.so" ]; then
  1>&2 echo Error: SPRITE_HOME does not appear to point to a valid installation of Sprite.  Please check the path and ensure installation completed successfully.
  exit 1
fi

# python=$SPRITE_HOME/bin/python
export SPRITE_HOME
export PYTHONPATH=`pwd`/lib/:$PYTHONPATH
export CURRYPATH=`pwd`/data/curry:$CURRYPATH

# The unittest module is really weird.  There doesn't
# seem to be a way to run tests by specifying a list of filenames.  So the arguments
# to this script must either be empty (run all tests) or the name of a test file (which
# is then taken as a pattern, meaning just that file will be run).
if [ -z "$@" ]; then
  pattern='*.py'
  # if [ "$(basename $0)" == "cov_tests" ]; then
  #   # For coverage, the default is to run all tests.
  #   pattern='*.py'
  # else
  #   # Otherwise, just run the unit tests.
  #   pattern="unit_*.py"
  # fi
else
  pattern="$@"
fi

case `basename $0` in
  "run_tests")
    # Run the Python unit tests.
    $SPRITE_HOME/bin/python -B -m unittest discover -v `pwd` "$pattern"
    ;;
  "run_benchmarks")
    # Run the Python unit tests.
    $SPRITE_HOME/bin/python -m benchmark
    ;;
  "debug_tests")
    # Run the Python unit tests under gdb.
    # gdb --args $python -B -m unittest discover -v `pwd` "$pattern"
    $SPRITE_HOME/bin/sprite-invoke gdb --args \
        $SPRITE_HOME/tools/python -B -m unittest discover -v `pwd` "$pattern"
    ;;
  "cov_tests")
    # Run the Python unit tests under coverage.py to get line coverage information.
    if [ ! -e `readlink -f $SPRITE_HOME/tools/coverage` ]; then
      1>&2 echo "coverage.py not found.  Installing via pip."
      pyinstall=$(readlink -f $SPRITE_HOME/tools/python)
      if [ -z "$pyinstall" ]; then
        1>&2 echo "Python installation not found via 'readlink -f $SPRITE_HOME/tools/python'"
        exit 1
      fi
      install="$(dirname $pyinstall)/pip install coverage"
      1>&2 echo $install
      $($install) || {
          1>&2 echo "Failed to pip install coverage.  Please install it manually.";
          exit 1;
        }
    fi
    if [ -L $SPRITE_HOME/lib/python2.7/curry/__init__.py ]; then
      # It looks like the SYMLINK_INTERFACES install option was used so report on
      # the source dir.
      SRC=../src/python
    else
      SRC=$SPRITE_HOME/lib
    fi
    $SPRITE_HOME/bin/coverage run -m --source=$SRC --omit=$SRC/utility/_tempfile.py unittest discover -v `pwd` "$pattern" || exit 1
    $SPRITE_HOME/bin/coverage report
    $SPRITE_HOME/bin/coverage html
    echo "See HTML output at `readlink -f htmlcov/index.html`"
    ;;
  "valgrind_tests")
    # Run the Python unit tests under valgrind.
    #
    # To use valgrind, follow directions in Python's Misc/README.valgrind to
    # rebuild Python:
    #
    #     sudo apt-get build-dep python2.7
    #     apt-get source python2.7
    #     "Uncomment Py_USING_MEMORY_DEBUGGER in Objects/obmalloc.c"
    #     ./configure --prefix=$HOME/python2.7 --without-pymalloc --with-pydebug --with-valgrind
    #     make OPT=-g -j
    #     make install
    #
    # You may also want to replace the valgrind-python.supp file in this
    # directory with the one that came with your version of Python.
    $SPRITE_HOME/bin/sprite-invoke valgrind --suppressions=sprite.supp \
        $SPRITE_HOME/tools/python -B -m unittest discover -v `pwd` "$pattern"
    ;;
  "valgrind_debug_tests")
    # Same as valgrind_tests except that vgdb is used.  Follow the onscreen
    # prompts to conntext gdb.
    $SPRITE_HOME/bin/sprite-invoke valgrind --suppressions=sprite.supp --vgdb-error=0 \
        $SPRITE_HOME/tools/python -B -m unittest discover -v `pwd` "$pattern"
    ;;
  "shell")
    # Start a new shell with the  environment used to run Python unit tests.
    export PATH=$SPRITE_HOME/bin/:$PATH
    exec $SHELL
esac

