Prog "Prelude" [] [Type ("Prelude","()") Public [] [Cons ("Prelude","()") 0 Public []],Type ("Prelude","(,)") Public [0,1] [Cons ("Prelude","(,)") 2 Public [TVar 0,TVar 1]],Type ("Prelude","(,,)") Public [0,1,2] [Cons ("Prelude","(,,)") 3 Public [TVar 0,TVar 1,TVar 2]],Type ("Prelude","(,,,)") Public [0,1,2,3] [Cons ("Prelude","(,,,)") 4 Public [TVar 0,TVar 1,TVar 2,TVar 3]],Type ("Prelude","(,,,,)") Public [0,1,2,3,4] [Cons ("Prelude","(,,,,)") 5 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],Type ("Prelude","(,,,,,)") Public [0,1,2,3,4,5] [Cons ("Prelude","(,,,,,)") 6 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]],Type ("Prelude","(,,,,,,)") Public [0,1,2,3,4,5,6] [Cons ("Prelude","(,,,,,,)") 7 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]],Type ("Prelude","(,,,,,,,)") Public [0,1,2,3,4,5,6,7] [Cons ("Prelude","(,,,,,,,)") 8 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]],Type ("Prelude","(,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8] [Cons ("Prelude","(,,,,,,,,)") 9 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8]],Type ("Prelude","(,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9] [Cons ("Prelude","(,,,,,,,,,)") 10 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9]],Type ("Prelude","(,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10] [Cons ("Prelude","(,,,,,,,,,,)") 11 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10]],Type ("Prelude","(,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11] [Cons ("Prelude","(,,,,,,,,,,,)") 12 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11]],Type ("Prelude","(,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12] [Cons ("Prelude","(,,,,,,,,,,,,)") 13 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12]],Type ("Prelude","(,,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12,13] [Cons ("Prelude","(,,,,,,,,,,,,,)") 14 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13]],Type ("Prelude","(,,,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] [Cons ("Prelude","(,,,,,,,,,,,,,,)") 15 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13,TVar 14]],Type ("Prelude","(->)") Public [0,1] [],Type ("Prelude","Bool") Public [] [Cons ("Prelude","False") 0 Public [],Cons ("Prelude","True") 0 Public []],Type ("Prelude","Char") Public [] [],TypeSyn ("Prelude","DET") Public [0] (TVar 0),Type ("Prelude","Either") Public [0,1] [Cons ("Prelude","Left") 1 Public [TVar 0],Cons ("Prelude","Right") 1 Public [TVar 1]],Type ("Prelude","Float") Public [] [],Type ("Prelude","IO") Public [0] [],Type ("Prelude","IOError") Public [] [Cons ("Prelude","IOError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","UserError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","FailError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","NondetError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Prelude","Int") Public [] [],Type ("Prelude","Maybe") Public [0] [Cons ("Prelude","Nothing") 0 Public [],Cons ("Prelude","Just") 1 Public [TVar 0]],Type ("Prelude","Ordering") Public [] [Cons ("Prelude","LT") 0 Public [],Cons ("Prelude","EQ") 0 Public [],Cons ("Prelude","GT") 0 Public []],TypeSyn ("Prelude","ReadS") Public [0] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),TypeSyn ("Prelude","ShowS") Public [] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])),TypeSyn ("Prelude","String") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Prelude","Success") Public [] (TCons ("Prelude","Bool") []),Type ("Prelude","[]") Public [0] [Cons ("Prelude","[]") 0 Public [],Cons ("Prelude",":") 2 Public [TVar 0,TCons ("Prelude","[]") [TVar 0]]],Type ("Prelude","_Dict#Bounded") Public [0] [Cons ("Prelude","_Dict#Bounded") 2 Public [FuncType (TCons ("Prelude","()") []) (TVar 0),FuncType (TCons ("Prelude","()") []) (TVar 0)]],Type ("Prelude","_Dict#Enum") Public [0] [Cons ("Prelude","_Dict#Enum") 8 Public [FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0),FuncType (TVar 0) (TCons ("Prelude","Int") []),FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))]],Type ("Prelude","_Dict#Eq") Public [0] [Cons ("Prelude","_Dict#Eq") 2 Public [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))]],Type ("Prelude","_Dict#Fractional") Public [0] [Cons ("Prelude","_Dict#Fractional") 4 Public [TCons ("Prelude","_Dict#Num") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Float") []) (TVar 0)]],Type ("Prelude","_Dict#Functor") Public [0] [Cons ("Prelude","_Dict#Functor") 1 Public [ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))]],Type ("Prelude","_Dict#Integral") Public [0] [Cons ("Prelude","_Dict#Integral") 7 Public [TCons ("Prelude","_Dict#Real") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))]],Type ("Prelude","_Dict#Monad") Public [0] [Cons ("Prelude","_Dict#Monad") 4 Public [ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])),ForallType [1] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))]],Type ("Prelude","_Dict#Num") Public [0] [Cons ("Prelude","_Dict#Num") 7 Public [FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0)]],Type ("Prelude","_Dict#Ord") Public [0] [Cons ("Prelude","_Dict#Ord") 8 Public [TCons ("Prelude","_Dict#Eq") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))]],Type ("Prelude","_Dict#Read") Public [0] [Cons ("Prelude","_Dict#Read") 2 Public [FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])]],Type ("Prelude","_Dict#Real") Public [0] [Cons ("Prelude","_Dict#Real") 2 Public [TCons ("Prelude","_Dict#Num") [TVar 0],TCons ("Prelude","_Dict#Ord") [TVar 0]]],Type ("Prelude","_Dict#Show") Public [0] [Cons ("Prelude","_Dict#Show") 3 Public [FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))),FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))]]] [Func ("Prelude","_def#==#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#/=#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#()") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (TCons ("Prelude","Bool") [])))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (TCons ("Prelude","Bool") [])))))))))) (Rule [] (Var 0)),Func ("Prelude","_def#compare#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#<=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#>=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#<#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#>#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_def#min#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#max#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#()") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Ordering") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Ordering") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Ordering") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [] (Var 0)),Func ("Prelude","_def#show#Prelude.Show") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_def#showsPrec#Prelude.Show") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_def#showList#Prelude.Show") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#()") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#()") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Float") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_def#readsPrec#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_def#readList#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#()") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1._#lambda4") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1._#lambda4._#lambda8") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#()") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.865") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.865._#lambda21") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Float") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65._#lambda69") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82") 5 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94._#lambda98") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111") 6 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115") 5 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131._#lambda135") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140") 7 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148") 7 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152") 6 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176._#lambda180") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Prelude","_def#minBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#maxBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#succ#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#pred#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#pred#Prelude.Enum._#lambda182") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_def#toEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#fromEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFrom#Prelude.Enum") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFromThen#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFromTo#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_def#enumFromThenTo#Prelude.Enum") 4 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#()") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#()") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","()") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") 3 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3])))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]))))))) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]))))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Ordering") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Ordering") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Enum#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("Prelude","_def#+#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#-#Prelude.Num") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#*#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#negate#Prelude.Num") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#abs#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#signum#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#fromInt#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Num#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Num#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_def#/#Prelude.Fractional") 3 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#recip#Prelude.Fractional") 2 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_def#fromFloat#Prelude.Fractional") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Fractional#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Fractional") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","_def#div#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#div#Prelude.Integral._#selFP2#q") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","_def#mod#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#mod#Prelude.Integral._#selFP4#r") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","_def#quot#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#quot#Prelude.Integral._#selFP6#q") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","_def#rem#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","_def#rem#Prelude.Integral._#selFP8#r") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","_def#divMod#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_def#quotRem#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Real#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Real#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Float") []]) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Integral#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Integral") [TCons ("Prelude","Int") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","_def#fmap#Prelude.Functor") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Functor#[]") 0 Public (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","[]") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#fmap#Prelude.Functor#[]") 0 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_def#>>=#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [] (Var 0)),Func ("Prelude","_def#>>#Prelude.Monad") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [] (Var 0)),Func ("Prelude","_def#>>#Prelude.Monad._#lambda183") 2 Private (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_def#return#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_def#fail#Prelude.Monad") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#Prelude.IO") 0 Public (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","IO") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") 0 Public (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","Maybe") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") 2 Public (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 1])) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") 0 Public (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") 0 Public (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Monad#[]") 0 Public (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","[]") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#[]") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184._#lambda185") 1 Private (FuncType (TVar 0) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","_impl#>>#Prelude.Monad#[]") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","_impl#return#Prelude.Monad#[]") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_impl#fail#Prelude.Monad#[]") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Bool") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda186") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda186._#lambda189") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda191") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda191._#lambda194") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Ordering") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Ordering") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Ordering") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Ordering") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda211") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda211._#lambda214") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216._#lambda219") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216._#lambda219._#lambda223") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Either") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Either") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225._#lambda228") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225._#lambda228._#lambda232") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234._#lambda237") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234._#lambda237._#lambda241") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Eq#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","IOError") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Show#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","IOError") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IOError") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","_inst#Prelude.Read#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","IOError") []]) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243._#lambda246") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243._#lambda246._#lambda250") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252._#lambda255") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252._#lambda255._#lambda259") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261._#lambda264") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261._#lambda264._#lambda268") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270._#lambda273") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270._#lambda273._#lambda277") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","IOError") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude",".") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude",".._#lambda279") 3 Private (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","id") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","const") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","curry") 3 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 2)) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2)))) (Rule [] (Var 0)),Func ("Prelude","uncurry") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 2))) (Rule [] (Var 0)),Func ("Prelude","flip") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TVar 1) (FuncType (TVar 0) (TVar 2)))) (Rule [] (Var 0)),Func ("Prelude","until") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","seq") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","ensureNotFree") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","ensureSpine") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","ensureSpine.ensureList.20") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","$") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","$!") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","$!!") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","$#") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","$##") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","error") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","prim_error") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","failed") 0 Public (TVar 0) (Rule [] (Var 0)),Func ("Prelude","&&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","||") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","not") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","otherwise") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","if_then_else") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","solve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","&>") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","=:=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","eqChar") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","eqInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","eqFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","ltEqChar") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","ltEqInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","ltEqFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","fst") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","snd") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 1)) (Rule [] (Var 0)),Func ("Prelude","head") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","tail") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","null") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","++") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","length") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","length.len.80") 3 Private (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","!!") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","map") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","foldl") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","foldl1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","foldr") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude","foldr1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","filter") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","zip") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","zip3") 3 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","zipWith") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 2])))) (Rule [] (Var 0)),Func ("Prelude","zipWith3") 4 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3)))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 3]))))) (Rule [] (Var 0)),Func ("Prelude","unzip") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]])) (Rule [] (Var 0)),Func ("Prelude","unzip._#selFP10#xs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","unzip._#selFP11#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 1])) (Rule [] (Var 0)),Func ("Prelude","unzip3") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]])) (Rule [] (Var 0)),Func ("Prelude","unzip3._#selFP13#xs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","unzip3._#selFP14#ys") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 1])) (Rule [] (Var 0)),Func ("Prelude","unzip3._#selFP15#zs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 2])) (Rule [] (Var 0)),Func ("Prelude","concat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","concatMap") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","iterate") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","repeat") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","replicate") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","take") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","take.takep.197") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","drop") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","splitAt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","splitAt.splitAtp.211") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","splitAt.splitAtp.211._#selFP17#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","splitAt.splitAtp.211._#selFP18#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","takeWhile") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","dropWhile") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","span") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","span._#selFP20#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","span._#selFP21#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","break") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","lines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","lines.splitline.241") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","lines.splitline.241._#selFP23#ds") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","lines.splitline.241._#selFP24#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","lines._#selFP26#l") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","lines._#selFP27#xs_l") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","unlines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","words") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","words._#selFP29#w") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","words._#selFP30#s2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","unwords") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","unwords._#lambda282") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","reverse") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","and") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","or") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","any") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","all") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","elem") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","notElem") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","lookup") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","enumFrom_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Var 0)),Func ("Prelude","enumFromThen_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","enumFromTo_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","enumFromThenTo_") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [] (Var 0)),Func ("Prelude","enumFromThenTo_.p.287") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))))) (Rule [] (Var 0)),Func ("Prelude","ord") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","prim_ord") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","chr") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","prim_chr") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Var 0)),Func ("Prelude","+$") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","-$") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","*$") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","div_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","mod_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","divMod_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","quot_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","rem_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","quotRem_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [] (Var 0)),Func ("Prelude","negate_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [] (Var 0)),Func ("Prelude","negateFloat") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","success") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Var 0)),Func ("Prelude","maybe") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","either") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 2]) (TVar 1)))) (Rule [] (Var 0)),Func ("Prelude",">>=$") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","returnIO") 1 Private (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude",">>$") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude",">>$._#lambda283") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","done") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Var 0)),Func ("Prelude","putChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","prim_putChar") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","getChar") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","Char") []]) (Rule [] (Var 0)),Func ("Prelude","readFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","prim_readFile") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","writeFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","prim_writeFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","appendFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","prim_appendFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","putStr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","putStrLn") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","getLine") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Var 0)),Func ("Prelude","getLine._#lambda285") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","getLine._#lambda285._#lambda288") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [] (Var 0)),Func ("Prelude","userError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IOError") [])) (Rule [] (Var 0)),Func ("Prelude","ioError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","prim_ioError") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","showError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","catch") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (TCons ("Prelude","IO") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","show_") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","prim_show") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Prelude","print") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","doSolve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","sequenceIO") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [] (Var 0)),Func ("Prelude","sequenceIO._#lambda292") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","sequenceIO._#lambda292._#lambda294") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [] (Var 0)),Func ("Prelude","sequenceIO_") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Var 0)),Func ("Prelude","mapIO") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","mapIO_") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","foldIO") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","foldIO._#lambda296") 3 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1]))) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","liftIO") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","forIO") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","forIO_") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","when") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","?") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","anyOf") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","unknown") 0 Public (TVar 0) (Rule [] (Var 0)),Func ("Prelude","PEVAL") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","normalForm") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","groundNormalForm") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [] (Var 0)),Func ("Prelude","apply") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [] (Var 0)),Func ("Prelude","cond") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","=:<=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Prelude","showList'") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","showList'.showl.401") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","shows") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","showChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showString") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","showSigned") 4 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [] (Var 0)),Func ("Prelude","showTuple") 1 Private (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showTuple._#lambda297") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","appPrec") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("Prelude","appPrec1") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("Prelude","readListDefault") 1 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.424") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.424._#lambda312") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.424._#lambda316") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.424._#lambda316._#lambda320") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl'.424._#lambda316._#lambda320._#lambda324") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.424") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.424._#lambda300") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.424._#lambda304") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault.readl.424._#lambda304._#lambda308") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault._#lambda326") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readListDefault._#lambda326._#lambda329") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readListDefault._#lambda326._#lambda329._#lambda331") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [] (Var 0)),Func ("Prelude","reads") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readParen.optional.442") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.442") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.442._#lambda334") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.442._#lambda334._#lambda338") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readParen.mandatory.442._#lambda334._#lambda338._#lambda342") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","read") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","read._#lambda346") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","read._#lambda346._#lambda350") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","readSigned") 2 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read''.462") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read''.462._#lambda363") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read''.462._#lambda363._#lambda367") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read'.462") 3 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read'.462._#lambda355") 4 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","readSigned.read'.462._#lambda355._#lambda359") 3 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readNatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readNatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","readFloatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readFloatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","readCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","readStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","prim_readStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.isSingle.480") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lex.isSym.480") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lex.isIdChar.480") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.480._#lambda382") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.480._#lambda382._#lambda386") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","lex.lexExp.480._#lambda390") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex.lexFracExp.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexFracExp.480._#lambda372") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex.lexFracExp.480._#lambda372._#lambda376") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex.lexStrItem.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexStrItem.480._#lambda405") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex.lexString.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lex.lexString.480._#lambda396") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex.lexString.480._#lambda396._#lambda400") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda412") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda416") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda420") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda424") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda428") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda428._#lambda432") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda436") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda440") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda444") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda448") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda452") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","lex._#lambda452._#lambda456") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Prelude","lexLitChar") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lexLitChar.isCharName.542") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","lexLitChar.prefix.542") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]))) (Rule [] (Var 0)),Func ("Prelude","lexLitChar.lexEsc.542") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","lexDigits") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Prelude","nonNull") 2 Private (FuncType (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","nonNull._#lambda477") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","isUpper") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isLower") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isAlpha") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isAlphaNum") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isBinDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isOctDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isHexDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","isSpace") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Prelude","uppermostCharacter") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Var 0)),Func ("Prelude","boundedEnumFrom") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","boundedEnumFromThen") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","asTypeOf") 0 Public (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","+.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_Float_plus") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","-.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_Float_minus") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","*.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_Float_times") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","/.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","prim_Float_div") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Var 0)),Func ("Prelude","i2f") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","prim_i2f") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [] (Var 0)),Func ("Prelude","sequence") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))) (Rule [] (Var 0)),Func ("Prelude","sequence._#lambda479") 3 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [] (Var 0)),Func ("Prelude","sequence._#lambda479._#lambda480") 3 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [] (Var 0)),Func ("Prelude","sequence._#lambda479._#lambda480._#lambda481") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [] (Var 0)),Func ("Prelude","sequence_") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]))) (Rule [] (Var 0)),Func ("Prelude","mapM") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","mapM_") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","foldM") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [] (Var 0)),Func ("Prelude","foldM._#lambda482") 4 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 1,TVar 2]))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 2]))))) (Rule [] (Var 0)),Func ("Prelude","liftM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [] (Var 0)),Func ("Prelude","liftM2") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3))) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))) (Rule [] (Var 0)),Func ("Prelude","liftM2._#lambda485") 4 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))) (Rule [] (Var 0)),Func ("Prelude","liftM2._#lambda485._#lambda487") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (FuncType (TVar 0) (FuncType (TVar 2) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 3]))))) (Rule [] (Var 0)),Func ("Prelude","forM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [] (Var 0)),Func ("Prelude","forM_") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","unlessM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","whenM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [] (Var 0)),Func ("Prelude","==") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","/=") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Ord#Prelude.Eq") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","compare") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [] (Var 0)),Func ("Prelude","<=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude",">=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","<") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude",">") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Prelude","min") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","max") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","show") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Prelude","showsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Prelude","showList") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Prelude","readsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Prelude","readList") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Prelude","minBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","maxBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","succ") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","pred") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","toEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","fromEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Prelude","enumFrom") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [] (Var 0)),Func ("Prelude","enumFromThen") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","enumFromTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","enumFromThenTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [] (Var 0)),Func ("Prelude","+") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","-") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","*") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","negate") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","abs") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","signum") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","fromInt") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Fractional#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (TCons ("Prelude","_Dict#Num") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","/") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","recip") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","fromFloat") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Real#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (TCons ("Prelude","_Dict#Num") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Real#Prelude.Ord") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","_super#Prelude.Integral#Prelude.Real") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (TCons ("Prelude","_Dict#Real") [TVar 0])) (Rule [] (Var 0)),Func ("Prelude","div") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","mod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","quot") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","rem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [] (Var 0)),Func ("Prelude","divMod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","quotRem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [] (Var 0)),Func ("Prelude","fmap") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [] (Var 0)),Func ("Prelude",">>=") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [] (Var 0)),Func ("Prelude",">>") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [] (Var 0)),Func ("Prelude","return") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [] (Var 0)),Func ("Prelude","fail") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [] (Var 0))] [Op ("Prelude","!!") InfixlOp 9,Op ("Prelude","++") InfixrOp 5,Op ("Prelude","=:=") InfixOp 4,Op ("Prelude","=:<=") InfixOp 4,Op ("Prelude","&&") InfixrOp 3,Op ("Prelude","||") InfixrOp 2,Op ("Prelude","$") InfixrOp 0,Op ("Prelude","$!") InfixrOp 0,Op ("Prelude","$!!") InfixrOp 0,Op ("Prelude","$#") InfixrOp 0,Op ("Prelude","$##") InfixrOp 0,Op ("Prelude","seq") InfixrOp 0,Op ("Prelude","&") InfixrOp 0,Op ("Prelude","&>") InfixrOp 0,Op ("Prelude","?") InfixrOp 0]