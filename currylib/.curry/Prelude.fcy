Prog "Prelude" [] [Type ("Prelude","()") Public [] [Cons ("Prelude","()") 0 Public []],Type ("Prelude","(,)") Public [0,1] [Cons ("Prelude","(,)") 2 Public [TVar 0,TVar 1]],Type ("Prelude","(,,)") Public [0,1,2] [Cons ("Prelude","(,,)") 3 Public [TVar 0,TVar 1,TVar 2]],Type ("Prelude","(,,,)") Public [0,1,2,3] [Cons ("Prelude","(,,,)") 4 Public [TVar 0,TVar 1,TVar 2,TVar 3]],Type ("Prelude","(,,,,)") Public [0,1,2,3,4] [Cons ("Prelude","(,,,,)") 5 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],Type ("Prelude","(,,,,,)") Public [0,1,2,3,4,5] [Cons ("Prelude","(,,,,,)") 6 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]],Type ("Prelude","(,,,,,,)") Public [0,1,2,3,4,5,6] [Cons ("Prelude","(,,,,,,)") 7 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]],Type ("Prelude","(,,,,,,,)") Public [0,1,2,3,4,5,6,7] [Cons ("Prelude","(,,,,,,,)") 8 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7]],Type ("Prelude","(,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8] [Cons ("Prelude","(,,,,,,,,)") 9 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8]],Type ("Prelude","(,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9] [Cons ("Prelude","(,,,,,,,,,)") 10 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9]],Type ("Prelude","(,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10] [Cons ("Prelude","(,,,,,,,,,,)") 11 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10]],Type ("Prelude","(,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11] [Cons ("Prelude","(,,,,,,,,,,,)") 12 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11]],Type ("Prelude","(,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12] [Cons ("Prelude","(,,,,,,,,,,,,)") 13 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12]],Type ("Prelude","(,,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12,13] [Cons ("Prelude","(,,,,,,,,,,,,,)") 14 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13]],Type ("Prelude","(,,,,,,,,,,,,,,)") Public [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] [Cons ("Prelude","(,,,,,,,,,,,,,,)") 15 Public [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6,TVar 7,TVar 8,TVar 9,TVar 10,TVar 11,TVar 12,TVar 13,TVar 14]],Type ("Prelude","(->)") Public [0,1] [],Type ("Prelude","Bool") Public [] [Cons ("Prelude","False") 0 Public [],Cons ("Prelude","True") 0 Public []],Type ("Prelude","Char") Public [] [],TypeSyn ("Prelude","DET") Public [0] (TVar 0),Type ("Prelude","Either") Public [0,1] [Cons ("Prelude","Left") 1 Public [TVar 0],Cons ("Prelude","Right") 1 Public [TVar 1]],Type ("Prelude","Float") Public [] [],Type ("Prelude","IO") Public [0] [],Type ("Prelude","IOError") Public [] [Cons ("Prelude","IOError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","UserError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","FailError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],Cons ("Prelude","NondetError") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Prelude","Int") Public [] [],Type ("Prelude","Maybe") Public [0] [Cons ("Prelude","Nothing") 0 Public [],Cons ("Prelude","Just") 1 Public [TVar 0]],Type ("Prelude","Ordering") Public [] [Cons ("Prelude","LT") 0 Public [],Cons ("Prelude","EQ") 0 Public [],Cons ("Prelude","GT") 0 Public []],TypeSyn ("Prelude","ReadS") Public [0] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),TypeSyn ("Prelude","ShowS") Public [] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])),TypeSyn ("Prelude","String") Public [] (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),TypeSyn ("Prelude","Success") Public [] (TCons ("Prelude","Bool") []),Type ("Prelude","[]") Public [0] [Cons ("Prelude","[]") 0 Public [],Cons ("Prelude",":") 2 Public [TVar 0,TCons ("Prelude","[]") [TVar 0]]],Type ("Prelude","_Dict#Bounded") Public [0] [Cons ("Prelude","_Dict#Bounded") 2 Public [FuncType (TCons ("Prelude","()") []) (TVar 0),FuncType (TCons ("Prelude","()") []) (TVar 0)]],Type ("Prelude","_Dict#Enum") Public [0] [Cons ("Prelude","_Dict#Enum") 8 Public [FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0),FuncType (TVar 0) (TCons ("Prelude","Int") []),FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))]],Type ("Prelude","_Dict#Eq") Public [0] [Cons ("Prelude","_Dict#Eq") 2 Public [FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))]],Type ("Prelude","_Dict#Fractional") Public [0] [Cons ("Prelude","_Dict#Fractional") 4 Public [TCons ("Prelude","_Dict#Num") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Float") []) (TVar 0)]],Type ("Prelude","_Dict#Functor") Public [0] [Cons ("Prelude","_Dict#Functor") 1 Public [ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))]],Type ("Prelude","_Dict#Integral") Public [0] [Cons ("Prelude","_Dict#Integral") 7 Public [TCons ("Prelude","_Dict#Real") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0]))]],Type ("Prelude","_Dict#Monad") Public [0] [Cons ("Prelude","_Dict#Monad") 4 Public [ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))),ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])),ForallType [1] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))]],Type ("Prelude","_Dict#Num") Public [0] [Cons ("Prelude","_Dict#Num") 7 Public [FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TVar 0) (TVar 0),FuncType (TCons ("Prelude","Int") []) (TVar 0)]],Type ("Prelude","_Dict#Ord") Public [0] [Cons ("Prelude","_Dict#Ord") 8 Public [TCons ("Prelude","_Dict#Eq") [TVar 0],FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)),FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))]],Type ("Prelude","_Dict#Read") Public [0] [Cons ("Prelude","_Dict#Read") 2 Public [FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])),FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])]],Type ("Prelude","_Dict#Real") Public [0] [Cons ("Prelude","_Dict#Real") 2 Public [TCons ("Prelude","_Dict#Num") [TVar 0],TCons ("Prelude","_Dict#Ord") [TVar 0]]],Type ("Prelude","_Dict#Show") Public [0] [Cons ("Prelude","_Dict#Show") 3 Public [FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]),FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))),FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))]]] [Func ("Prelude","_def#==#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 2],Var 3]])),Func ("Prelude","_def#/=#Prelude.Eq") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2],Var 3]])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") []])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","eqChar") [Var 1,Var 2])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") []])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","eqInt") [Var 1,Var 2])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") []])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") []])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","eqFloat") [Var 1,Var 2])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Float") []])),Func ("Prelude","_inst#Prelude.Eq#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#[]") [Var 1],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#[]") [Var 1]])),Func ("Prelude","_impl#==#Prelude.Eq#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 6],Var 8],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Var 1,Var 7,Var 9]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#[]") [Var 1]])),Func ("Prelude","_inst#Prelude.Eq#()") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","()") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#()") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#()") []])),Func ("Prelude","_impl#==#Prelude.Eq#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#/=#Prelude.Eq#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#()") []])),Func ("Prelude","_inst#Prelude.Eq#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#==#Prelude.Eq#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 5],Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 6],Var 8]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,)") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Eq#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#==#Prelude.Eq#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 6],Var 9],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 7],Var 10],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Var 8],Var 11]]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_inst#Prelude.Eq#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 7],Var 11],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 8],Var 12],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Var 9],Var 13],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 4],Var 10],Var 14]]]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_inst#Prelude.Eq#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 8],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 9],Var 14],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Var 10],Var 15],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 4],Var 11],Var 16],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 5],Var 12],Var 17]]]]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_inst#Prelude.Eq#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]]))))))) (Rule [1,2,3,4,5,6] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,)") 8 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6,7,8] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,,)") [9,10,11,12,13,14]) (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,)") [15,16,17,18,19,20]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 9],Var 15],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 10],Var 16],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Var 11],Var 17],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 4],Var 12],Var 18],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 5],Var 13],Var 19],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 6],Var 14],Var 20]]]]]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (FuncType (TCons ("Prelude","(,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5]) (TCons ("Prelude","Bool") []))))))))) (Rule [1,2,3,4,5,6] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6]])),Func ("Prelude","_inst#Prelude.Eq#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]])))))))) (Rule [1,2,3,4,5,6,7] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]])),Func ("Prelude","_impl#==#Prelude.Eq#(,,,,,,)") 9 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (TCons ("Prelude","Bool") [])))))))))) (Rule [1,2,3,4,5,6,7,8,9] (Case Flex (Var 8) [Branch (Pattern ("Prelude","(,,,,,,)") [10,11,12,13,14,15,16]) (Case Flex (Var 9) [Branch (Pattern ("Prelude","(,,,,,,)") [17,18,19,20,21,22,23]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 10],Var 17],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 11],Var 18],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 3],Var 12],Var 19],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 4],Var 13],Var 20],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 5],Var 14],Var 21],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 6],Var 15],Var 22],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 7],Var 16],Var 23]]]]]]])])])),Func ("Prelude","_impl#/=#Prelude.Eq#(,,,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 4]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 5]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (FuncType (TCons ("Prelude","(,,,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4,TVar 5,TVar 6]) (TCons ("Prelude","Bool") [])))))))))) (Rule [1,2,3,4,5,6,7] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5,Var 6,Var 7]])),Func ("Prelude","_def#compare#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 2],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 2],Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Prelude","_def#<=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 2],Var 3],Comb ConsCall ("Prelude","EQ") []],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","compare") [Var 1],Var 2],Var 3],Comb ConsCall ("Prelude","LT") []]])),Func ("Prelude","_def#>=#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 3],Var 2])),Func ("Prelude","_def#<#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 2],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 2],Var 3]])),Func ("Prelude","_def#>#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 2],Var 3]])),Func ("Prelude","_def#min#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 2],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_def#max#Prelude.Ord") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">=") [Var 1],Var 2],Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") [],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqChar") [Var 1,Var 2])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") [],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqInt") [Var 1,Var 2])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") [],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","ltEqFloat") [Var 1,Var 2])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_inst#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Var 1],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#[]") [Var 1],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#[]") [Var 1],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#[]") [Var 1],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#[]") [Var 1],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#[]") [Var 1],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_impl#compare#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_impl#<=#Prelude.Ord#[]") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 6],Var 8]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#[]") [Var 1,Var 7,Var 9]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 6],Var 8]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Prelude","_impl#>=#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_impl#<#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_impl#>#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_impl#min#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_impl#max#Prelude.Ord#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Var 1]])),Func ("Prelude","_inst#Prelude.Ord#()") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","()") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#()") [],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#()") [],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#()") [],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#()") [],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#()") [],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#()") [],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#()") [],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#()") []])),Func ("Prelude","_impl#compare#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") []])),Func ("Prelude","_impl#<=#Prelude.Ord#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#>=#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") []])),Func ("Prelude","_impl#<#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") []])),Func ("Prelude","_impl#>#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") []])),Func ("Prelude","_impl#min#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") []])),Func ("Prelude","_impl#max#Prelude.Ord#()") 0 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#()") []])),Func ("Prelude","_inst#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,)") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [Var 1,Var 2],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#compare#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#<=#Prelude.Ord#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 5],Var 7],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 5],Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 2],Var 6],Var 8]]])])])),Func ("Prelude","_impl#>=#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#<#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#>#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#min#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#max#Prelude.Ord#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","(,)") [TVar 0,TVar 1]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,)") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,)") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#compare#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Ordering") [])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#<=#Prelude.Ord#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3,4,5] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [9,10,11]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 6],Var 9],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 6],Var 9],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 2],Var 7],Var 10]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 6],Var 9],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Var 7],Var 10],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 3],Var 8],Var 11]]]]])])])),Func ("Prelude","_impl#>=#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#<#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#>#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","Bool") [])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#min#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#max#Prelude.Ord#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_inst#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,)") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 4]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Ordering") []))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [11,12,13,14]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 7],Var 11],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 7],Var 11],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 2],Var 8],Var 12]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 7],Var 11],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Var 8],Var 12],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 3],Var 9],Var 13]]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 7],Var 11],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Var 8],Var 12],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3]],Var 9],Var 13],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 4],Var 10],Var 14]]]]]]])])])),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#<#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#>#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","Bool") []))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#min#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#max#Prelude.Ord#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_inst#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#(,,,,)") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 4],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 5]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#compare#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Ordering") [])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#<=#Prelude.Ord#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [13,14,15,16,17]) (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 1],Var 8],Var 13],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 8],Var 13],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 2],Var 9],Var 14]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 8],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Var 9],Var 14],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 3],Var 10],Var 15]]],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 8],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Var 9],Var 14],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3]],Var 10],Var 15],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Var 4],Var 11],Var 16]]]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Var 8],Var 13],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Var 9],Var 14],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 3]],Var 10],Var 15],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 4]],Var 11],Var 16],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 5],Var 12],Var 17]]]]]]]]])])])),Func ("Prelude","_impl#>=#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#<#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#>#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","Bool") [])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#min#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#max#Prelude.Ord#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_def#show#Prelude.Show") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 1],Var 2],Comb ConsCall ("Prelude","[]") []])),Func ("Prelude","_def#showsPrec#Prelude.Show") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","show") [Var 1],Var 3],Var 4])),Func ("Prelude","_def#showList#Prelude.Show") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","showList'") [Comb FuncCall ("Prelude","shows") [Var 1],Var 2,Var 3])),Func ("Prelude","_inst#Prelude.Show#()") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","()") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#()") [],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#()") [],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#()") []])),Func ("Prelude","_impl#show#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#()") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#()") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude","[]") []]]])])),Func ("Prelude","_impl#showList#Prelude.Show#()") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","()") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#()") []])),Func ("Prelude","_inst#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,)") [Var 1,Var 2],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#show#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","showTuple") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 1],Var 5],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 2],Var 6],Comb ConsCall ("Prelude","[]") []]]])])),Func ("Prelude","_impl#showList#Prelude.Show#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,)") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,)") [Var 1,Var 2,Var 3],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#show#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","(,,)") [6,7,8]) (Comb FuncCall ("Prelude","showTuple") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 1],Var 6],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 2],Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 3],Var 8],Comb ConsCall ("Prelude","[]") []]]]])])),Func ("Prelude","_impl#showList#Prelude.Show#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_inst#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#show#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","(,,,)") [7,8,9,10]) (Comb FuncCall ("Prelude","showTuple") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 1],Var 7],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 2],Var 8],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 3],Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 4],Var 10],Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("Prelude","_impl#showList#Prelude.Show#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_inst#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#show#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#(,,,,)") 7 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))))))) (Rule [1,2,3,4,5,6,7] (Case Flex (Var 7) [Branch (Pattern ("Prelude","(,,,,)") [8,9,10,11,12]) (Comb FuncCall ("Prelude","showTuple") [Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 1],Var 8],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 2],Var 9],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 3],Var 10],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 4],Var 11],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","shows") [Var 5],Var 12],Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("Prelude","_impl#showList#Prelude.Show#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))))) (Rule [1,2,3,4,5] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_inst#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#[]") [Var 1],Comb (FuncPartCall 1) ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Var 1],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#[]") [Var 1]])),Func ("Prelude","_impl#show#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#[]") [Var 1]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2] (Comb FuncCall ("Prelude","showList") [Var 1])),Func ("Prelude","_impl#showList#Prelude.Show#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#[]") [Var 1]])),Func ("Prelude","_inst#Prelude.Show#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Char") [],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") [],Comb (FuncPartCall 1) ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") []])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","showString") [Comb FuncCall ("Prelude","show_") [Var 2]])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","null") [Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb FuncCall ("Prelude","show_") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_inst#Prelude.Show#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") []])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Int") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","showSigned") [Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("Prelude","showString") [],Comb (FuncPartCall 1) ("Prelude","show_") []]])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Int") []])),Func ("Prelude","_inst#Prelude.Show#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") []])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Float") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","showSigned") [Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") [],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 2) ("Prelude","showString") [],Comb (FuncPartCall 1) ("Prelude","show_") []]])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Float") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Float") []])),Func ("Prelude","_def#readsPrec#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#readList#Prelude.Read") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readListDefault") [Var 1])),Func ("Prelude","_inst#Prelude.Read#()") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","()") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#()") [],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#()") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1._#lambda4") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1._#lambda4") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1._#lambda4._#lambda8") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [7,8]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#()._#lambda1._#lambda4._#lambda8") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","()") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","()") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [7,8]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readList#Prelude.Read#()") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","()") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#()") []])),Func ("Prelude","_inst#Prelude.Read#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readSigned") [Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","lexDigits") [],Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readNatLiteral") [Var 3]],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int._#lambda10._#lambda13._#lambda17") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 1],Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Var 3)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Int") []])),Func ("Prelude","_inst#Prelude.Read#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") [],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readSigned") [Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.865") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","all") [Comb (FuncPartCall 1) ("Prelude","isDigit") []],Var 1]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.865._#lambda21") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readNatLiteral") [Var 1]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","readFloatLiteral") [Var 1])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.865._#lambda21") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","i2f") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [Comb FuncCall ("Prelude","head") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float.readFloat.865") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float._#lambda23._#lambda26._#lambda30") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 1],Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Var 3)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Float") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Float") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Float") []])),Func ("Prelude","_inst#Prelude.Read#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") [],Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Comb FuncCall ("Prelude","head") [Var 3],Lit (Charc '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readCharLiteral") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char._#lambda32._#lambda35._#lambda39") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 1],Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Var 3)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") []],Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readListDefault") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") []],Var 1]])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","not") [Comb FuncCall ("Prelude","null") [Var 3]]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Comb FuncCall ("Prelude","head") [Var 3],Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readStringLiteral") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 2])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Char._#lambda41._#lambda44._#lambda48") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 1],Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Var 3)])])),Func ("Prelude","_inst#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Var 1],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#[]") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#[]") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","readList") [Var 1])),Func ("Prelude","_impl#readList#Prelude.Read#[]") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [Var 1]])),Func ("Prelude","_inst#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,)") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50") [Var 2,Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 3]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 2],Var 6]],Var 4]),Branch (Pattern ("Prelude",":") [9,10]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 5]],Var 3])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 2],Var 6]],Var 4]),Branch (Pattern ("Prelude",":") [9,10]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TVar 1,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65._#lambda69") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 5]],Var 3])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,)._#lambda50._#lambda53._#lambda57._#lambda61._#lambda65._#lambda69") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,)") [Var 2,Var 1],Var 6],Var 4]),Branch (Pattern ("Prelude",":") [9,10]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","_impl#readList#Prelude.Read#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#(,)") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") [Var 1,Var 2,Var 3],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71") [Var 3,Var 2,Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74") [Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 4]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 3],Var 7]],Var 5]),Branch (Pattern ("Prelude",":") [10,11]) (Var 5)]),Branch (Pattern ("Prelude","False") []) (Var 5)]),Branch (Pattern ("Prelude","[]") []) (Var 5)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78") 4 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82") [Var 5,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 6]],Var 4])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82") 5 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 3],Var 7]],Var 5]),Branch (Pattern ("Prelude",":") [10,11]) (Var 5)]),Branch (Pattern ("Prelude","False") []) (Var 5)]),Branch (Pattern ("Prelude","[]") []) (Var 5)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 0,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90") [Var 5,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 6]],Var 4])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 3],Var 7]],Var 5]),Branch (Pattern ("Prelude",":") [10,11]) (Var 5)]),Branch (Pattern ("Prelude","False") []) (Var 5)]),Branch (Pattern ("Prelude","[]") []) (Var 5)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94") 4 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","(,)") [TVar 2,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 1,TVar 0,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94._#lambda98") [Var 5,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 6]],Var 4])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,)._#lambda71._#lambda74._#lambda78._#lambda82._#lambda86._#lambda90._#lambda94._#lambda98") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,)") [TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,)") [Var 3,Var 2,Var 1],Var 7],Var 5]),Branch (Pattern ("Prelude",":") [10,11]) (Var 5)]),Branch (Pattern ("Prelude","False") []) (Var 5)]),Branch (Pattern ("Prelude","[]") []) (Var 5)])])),Func ("Prelude","_impl#readList#Prelude.Read#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_inst#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100") [Var 4,Var 3,Var 2,Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103") [Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 5]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107") [Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 4],Var 8]],Var 6]),Branch (Pattern ("Prelude",":") [11,12]) (Var 6)]),Branch (Pattern ("Prelude","False") []) (Var 6)]),Branch (Pattern ("Prelude","[]") []) (Var 6)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107") 5 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 7]],Var 5])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111") 6 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115") [Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 4],Var 8]],Var 6]),Branch (Pattern ("Prelude",":") [11,12]) (Var 6)]),Branch (Pattern ("Prelude","False") []) (Var 6)]),Branch (Pattern ("Prelude","[]") []) (Var 6)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115") 5 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 0,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 7]],Var 5])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123") [Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 4],Var 8]],Var 6]),Branch (Pattern ("Prelude",":") [11,12]) (Var 6)]),Branch (Pattern ("Prelude","False") []) (Var 6)]),Branch (Pattern ("Prelude","[]") []) (Var 6)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 1,TVar 0,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 7]],Var 5])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131") [Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 4],Var 8]],Var 6]),Branch (Pattern ("Prelude",":") [11,12]) (Var 6)]),Branch (Pattern ("Prelude","False") []) (Var 6)]),Branch (Pattern ("Prelude","[]") []) (Var 6)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131") 5 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","(,)") [TVar 3,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 2,TVar 1,TVar 0,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131._#lambda135") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 7]],Var 5])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,)._#lambda100._#lambda103._#lambda107._#lambda111._#lambda115._#lambda119._#lambda123._#lambda127._#lambda131._#lambda135") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,)") [TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,,)") [Var 4,Var 3,Var 2,Var 1],Var 8],Var 6]),Branch (Pattern ("Prelude",":") [11,12]) (Var 6)]),Branch (Pattern ("Prelude","False") []) (Var 6)]),Branch (Pattern ("Prelude","[]") []) (Var 6)])])),Func ("Prelude","_impl#readList#Prelude.Read#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_inst#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137") [Var 5,Var 4,Var 3,Var 2,Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 6]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140") 7 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144") [Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 5],Var 9]],Var 7]),Branch (Pattern ("Prelude",":") [12,13]) (Var 7)]),Branch (Pattern ("Prelude","False") []) (Var 7)]),Branch (Pattern ("Prelude","[]") []) (Var 7)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144") 6 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148") [Var 7,Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 8]],Var 6])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148") 7 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152") [Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 5],Var 9]],Var 7]),Branch (Pattern ("Prelude",":") [12,13]) (Var 7)]),Branch (Pattern ("Prelude","False") []) (Var 7)]),Branch (Pattern ("Prelude","[]") []) (Var 7)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152") 6 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 4,TVar 3,TVar 2,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156") [Var 7,Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 8]],Var 6])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160") [Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 5],Var 9]],Var 7]),Branch (Pattern ("Prelude",":") [12,13]) (Var 7)]),Branch (Pattern ("Prelude","False") []) (Var 7)]),Branch (Pattern ("Prelude","[]") []) (Var 7)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 1,TVar 0,TVar 4,TVar 3,TVar 2],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164") [Var 7,Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 8]],Var 6])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168") [Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 5],Var 9]],Var 7]),Branch (Pattern ("Prelude",":") [12,13]) (Var 7)]),Branch (Pattern ("Prelude","False") []) (Var 7)]),Branch (Pattern ("Prelude","[]") []) (Var 7)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 2,TVar 1,TVar 0,TVar 4,TVar 3],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172") [Var 7,Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 8]],Var 6])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176") [Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 5],Var 9]],Var 7]),Branch (Pattern ("Prelude",":") [12,13]) (Var 7)]),Branch (Pattern ("Prelude","False") []) (Var 7)]),Branch (Pattern ("Prelude","[]") []) (Var 7)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176") 6 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TCons ("Prelude","(,)") [TVar 4,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 3,TVar 2,TVar 1,TVar 0,TVar 4],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176._#lambda180") [Var 7,Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 8]],Var 6])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#(,,,,)._#lambda137._#lambda140._#lambda144._#lambda148._#lambda152._#lambda156._#lambda160._#lambda164._#lambda168._#lambda172._#lambda176._#lambda180") 7 Private (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (FuncType (TVar 3) (FuncType (TVar 4) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","(,,,,)") [TVar 4,TVar 3,TVar 2,TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","(,,,,)") [Var 5,Var 4,Var 3,Var 2,Var 1],Var 9],Var 7]),Branch (Pattern ("Prelude",":") [12,13]) (Var 7)]),Branch (Pattern ("Prelude","False") []) (Var 7)]),Branch (Pattern ("Prelude","[]") []) (Var 7)])])),Func ("Prelude","_impl#readList#Prelude.Read#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 4]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_def#minBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("Prelude","_def#maxBound#Prelude.Bounded") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("Prelude","_def#succ#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","toEnum") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [],Lit (Intc 1)],Comb FuncCall ("Prelude","fromEnum") [Var 1]]])),Func ("Prelude","_def#pred#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","toEnum") [Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","_def#pred#Prelude.Enum._#lambda182") [],Comb FuncCall ("Prelude","fromEnum") [Var 1]]])),Func ("Prelude","_def#pred#Prelude.Enum._#lambda182") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)])),Func ("Prelude","_def#toEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#fromEnum#Prelude.Enum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#enumFrom#Prelude.Enum") 2 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 2]]])),Func ("Prelude","_def#enumFromThen#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 3]]])),Func ("Prelude","_def#enumFromTo#Prelude.Enum") 3 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 3]]])),Func ("Prelude","_def#enumFromThenTo#Prelude.Enum") 4 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 2]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 1],Var 4]]])),Func ("Prelude","_inst#Prelude.Bounded#()") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","()") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#()") [],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#()") []])),Func ("Prelude","_impl#minBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","()") [])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","()") [])])),Func ("Prelude","_inst#Prelude.Enum#()") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","()") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#()") [],Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#()") [],Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#()") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#()") [],Comb (FuncPartCall 1) ("Prelude","_impl#enumFrom#Prelude.Enum#()") [],Comb (FuncPartCall 2) ("Prelude","_impl#enumFromThen#Prelude.Enum#()") [],Comb (FuncPartCall 2) ("Prelude","_impl#enumFromTo#Prelude.Enum#()") [],Comb (FuncPartCall 3) ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") []])),Func ("Prelude","_impl#succ#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_impl#pred#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","()") [])) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_impl#toEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","()") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","()") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_impl#fromEnum#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Lit (Intc 0))])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#()") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","()") [],Comb ConsCall ("Prelude","[]") []])])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Let [(3,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","()") [],Var 3])] (Var 3))])])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#()") 2 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","()") [],Comb ConsCall ("Prelude","[]") []])])])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#()") 3 Public (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","[]") [TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","()") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Let [(4,Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","()") [],Var 4])] (Var 4))])])])),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") [],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") []])),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","_inst#Prelude.Enum#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") [],Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") [],Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") []])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Bool") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Lit (Intc 0)),Branch (Pattern ("Prelude","True") []) (Lit (Intc 1))])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","boundedEnumFrom") [Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") [],Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") []])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen") [Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Bool") [],Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") []])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum") [Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") []])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","_def#enumFromThenTo#Prelude.Enum") [Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Bool") []])),Func ("Prelude","_inst#Prelude.Bounded#(,)") 2 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,)") [Var 1,Var 2],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") [Var 1,Var 2]])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 2],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,)") [TVar 0,TVar 1])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 2],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_inst#Prelude.Bounded#(,,)") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") [Var 1,Var 2,Var 3],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") [Var 1,Var 2,Var 3]])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 2],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 3],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 2],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 3],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_inst#Prelude.Bounded#(,,,)") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3]]))))) (Rule [1,2,3,4] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") [Var 1,Var 2,Var 3,Var 4],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") [Var 1,Var 2,Var 3,Var 4]])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3])))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 2],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 3],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 4],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,)") [TVar 0,TVar 1,TVar 2,TVar 3])))))) (Rule [1,2,3,4,5] (Case Flex (Var 5) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 2],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 3],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 4],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_inst#Prelude.Bounded#(,,,,)") 5 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]])))))) (Rule [1,2,3,4,5] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") [Var 1,Var 2,Var 3,Var 4,Var 5]])),Func ("Prelude","_impl#minBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 2],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 3],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 4],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 5],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#(,,,,)") 6 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 1]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 2]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 3]) (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 4]) (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","(,,,,)") [TVar 0,TVar 1,TVar 2,TVar 3,TVar 4]))))))) (Rule [1,2,3,4,5,6] (Case Flex (Var 6) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","(,,,,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 1],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 2],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 3],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 4],Comb ConsCall ("Prelude","()") []],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 5],Comb ConsCall ("Prelude","()") []]])])),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Ordering") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") [],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") []])),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","LT") [])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb ConsCall ("Prelude","GT") [])])),Func ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Ordering") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") [],Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") [],Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") []])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","GT") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","LT") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","EQ") [])])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Ordering") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 1)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 2)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Ordering") 1 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","LT") []) (Lit (Intc 0)),Branch (Pattern ("Prelude","EQ") []) (Lit (Intc 1)),Branch (Pattern ("Prelude","GT") []) (Lit (Intc 2))])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","boundedEnumFrom") [Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") [],Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") []])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen") [Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Ordering") [],Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") []])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum") [Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") []])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","_def#enumFromThenTo#Prelude.Enum") [Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Ordering") []])),Func ("Prelude","_inst#Prelude.Bounded#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Bounded") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Bounded") [Comb (FuncPartCall 1) ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") [],Comb (FuncPartCall 1) ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") []])),Func ("Prelude","_impl#minBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","chr") [Lit (Intc 0)])])),Func ("Prelude","_impl#maxBound#Prelude.Bounded#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","()") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","()") []) (Comb FuncCall ("Prelude","chr") [Comb FuncCall ("Prelude","uppermostCharacter") []])])),Func ("Prelude","_inst#Prelude.Enum#Prelude.Char") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Char") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") [],Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") [],Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") []])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","ord") [Var 1]],Comb FuncCall ("Prelude","uppermostCharacter") []]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","chr") [],Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","ord") [Var 1],Lit (Intc 1)]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Char") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Comb FuncCall ("Prelude","ord") [Var 1]],Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","chr") [],Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","ord") [Var 1],Lit (Intc 1)]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","chr") [])),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","ord") [])),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","boundedEnumFrom") [Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Char") [],Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") []])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","boundedEnumFromThen") [Comb FuncCall ("Prelude","_inst#Prelude.Bounded#Prelude.Char") [],Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") []])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#enumFromTo#Prelude.Enum") [Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") []])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Char") 0 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","_def#enumFromThenTo#Prelude.Enum") [Comb FuncCall ("Prelude","_inst#Prelude.Enum#Prelude.Char") []])),Func ("Prelude","_inst#Prelude.Enum#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Enum") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Enum") [Comb (FuncPartCall 1) ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") []])),Func ("Prelude","_impl#succ#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)])),Func ("Prelude","_impl#pred#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)])),Func ("Prelude","_impl#toEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1)),Func ("Prelude","_impl#fromEnum#Prelude.Enum#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1)),Func ("Prelude","_impl#enumFrom#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","enumFrom_") [])),Func ("Prelude","_impl#enumFromThen#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","enumFromThen_") [])),Func ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","enumFromTo_") [])),Func ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [] (Comb (FuncPartCall 3) ("Prelude","enumFromThenTo_") [])),Func ("Prelude","_def#+#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#-#Prelude.Num") 3 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","negate") [Var 1],Var 3]])),Func ("Prelude","_def#*#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#negate#Prelude.Num") 2 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","-") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 0)]],Var 2])),Func ("Prelude","_def#abs#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#signum#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#fromInt#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_inst#Prelude.Num#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Num") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [],Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [],Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") []])),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","+$") [Var 1,Var 2])),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","-$") [Var 1,Var 2])),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [1,2] (Comb FuncCall ("Prelude","*$") [Var 1,Var 2])),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Lit (Intc 0),Var 1])),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [],Var 1],Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 1],Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 1)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Intc 0)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Int") [Lit (Intc 1)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Int") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Var 1)),Func ("Prelude","_inst#Prelude.Num#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Num") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Num") [Comb (FuncPartCall 2) ("Prelude","_impl#+#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 2) ("Prelude","_impl#-#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 2) ("Prelude","_impl#*#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") []])),Func ("Prelude","_impl#+#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","+.") [Var 1,Var 2])),Func ("Prelude","_impl#-#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","-.") [Var 1,Var 2])),Func ("Prelude","_impl#*#Prelude.Num#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","*.") [Var 1,Var 2])),Func ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","negateFloat") [Var 1])),Func ("Prelude","_impl#abs#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Float") [],Var 1],Lit (Floatc 0.0)]) [Branch (Pattern ("Prelude","True") []) (Var 1),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","_impl#signum#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Float") [],Var 1],Lit (Floatc 0.0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Floatc 1.0)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") [Var 1,Lit (Floatc 0.0)]) [Branch (Pattern ("Prelude","True") []) (Lit (Floatc 0.0)),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#negate#Prelude.Num#Prelude.Float") [Lit (Floatc 1.0)]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Prelude","_impl#fromInt#Prelude.Num#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","i2f") [Var 1])),Func ("Prelude","_def#/#Prelude.Fractional") 3 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","*") [Comb FuncCall ("Prelude","_super#Prelude.Fractional#Prelude.Num") [Var 1]],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","recip") [Var 1],Var 3]])),Func ("Prelude","_def#recip#Prelude.Fractional") 2 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Fractional#Prelude.Num") [Var 1]],Lit (Intc 1)]],Var 2])),Func ("Prelude","_def#fromFloat#Prelude.Fractional") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_inst#Prelude.Fractional#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Fractional") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Fractional") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Float") [],Comb (FuncPartCall 2) ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") [],Comb (FuncPartCall 1) ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") []])),Func ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") 2 Public (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","/.") [Var 1,Var 2])),Func ("Prelude","_impl#recip#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#/#Prelude.Fractional#Prelude.Float") [Lit (Floatc 1.0),Var 1])),Func ("Prelude","_impl#fromFloat#Prelude.Fractional#Prelude.Float") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (Rule [1] (Var 1)),Func ("Prelude","_def#div#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","divMod") [Var 1],Var 2],Var 3])] (Comb FuncCall ("Prelude","_def#div#Prelude.Integral._#selFP2#q") [Var 4]))),Func ("Prelude","_def#div#Prelude.Integral._#selFP2#q") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","_def#mod#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","divMod") [Var 1],Var 2],Var 3])] (Comb FuncCall ("Prelude","_def#mod#Prelude.Integral._#selFP4#r") [Var 4]))),Func ("Prelude","_def#mod#Prelude.Integral._#selFP4#r") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","_def#quot#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","quotRem") [Var 1],Var 2],Var 3])] (Comb FuncCall ("Prelude","_def#quot#Prelude.Integral._#selFP6#q") [Var 4]))),Func ("Prelude","_def#quot#Prelude.Integral._#selFP6#q") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","_def#rem#Prelude.Integral") 3 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Let [(4,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","quotRem") [Var 1],Var 2],Var 3])] (Comb FuncCall ("Prelude","_def#rem#Prelude.Integral._#selFP8#r") [Var 4]))),Func ("Prelude","_def#rem#Prelude.Integral._#selFP8#r") 1 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","_def#divMod#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#quotRem#Prelude.Integral") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_inst#Prelude.Real#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Real") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []])),Func ("Prelude","_inst#Prelude.Real#Prelude.Float") 0 Public (TCons ("Prelude","_Dict#Real") [TCons ("Prelude","Float") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Real") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Float") [],Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Float") []])),Func ("Prelude","_inst#Prelude.Integral#Prelude.Int") 0 Public (TCons ("Prelude","_Dict#Integral") [TCons ("Prelude","Int") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Integral") [Comb FuncCall ("Prelude","_inst#Prelude.Real#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") [],Comb FuncCall ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") [],Comb (FuncPartCall 2) ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") [],Comb (FuncPartCall 2) ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") []])),Func ("Prelude","_impl#div#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#div#Prelude.Integral") [Comb FuncCall ("Prelude","_inst#Prelude.Integral#Prelude.Int") []])),Func ("Prelude","_impl#mod#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#mod#Prelude.Integral") [Comb FuncCall ("Prelude","_inst#Prelude.Integral#Prelude.Int") []])),Func ("Prelude","_impl#quot#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#quot#Prelude.Integral") [Comb FuncCall ("Prelude","_inst#Prelude.Integral#Prelude.Int") []])),Func ("Prelude","_impl#rem#Prelude.Integral#Prelude.Int") 0 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#rem#Prelude.Integral") [Comb FuncCall ("Prelude","_inst#Prelude.Integral#Prelude.Int") []])),Func ("Prelude","_impl#divMod#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","div_") [Var 1,Var 2],Comb FuncCall ("Prelude","mod_") [Var 1,Var 2]])),Func ("Prelude","_impl#quotRem#Prelude.Integral#Prelude.Int") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","quot_") [Var 1,Var 2],Comb FuncCall ("Prelude","rem_") [Var 1,Var 2]])),Func ("Prelude","_def#fmap#Prelude.Functor") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_inst#Prelude.Functor#[]") 0 Public (TCons ("Prelude","_Dict#Functor") [TCons ("Prelude","[]") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Functor") [Comb FuncCall ("Prelude","_impl#fmap#Prelude.Functor#[]") []])),Func ("Prelude","_impl#fmap#Prelude.Functor#[]") 0 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","map") [])),Func ("Prelude","_def#>>=#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#>>#Prelude.Monad") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Var 2],Comb (FuncPartCall 1) ("Prelude","_def#>>#Prelude.Monad._#lambda183") [Var 3]])),Func ("Prelude","_def#>>#Prelude.Monad._#lambda183") 2 Private (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [1,2] (Var 1)),Func ("Prelude","_def#return#Prelude.Monad") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [1] (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","_def#fail#Prelude.Monad") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","error") [Var 2])),Func ("Prelude","_inst#Prelude.Monad#Prelude.IO") 0 Public (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","IO") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Monad") [Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [],Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") []])),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=$") [Var 1,Var 2])),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>$") [Var 1,Var 2])),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") 1 Public (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","returnIO") [Var 1])),Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.IO") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TVar 0])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#fail#Prelude.Monad") [Comb FuncCall ("Prelude","_inst#Prelude.Monad#Prelude.IO") []])),Func ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") 0 Public (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","Maybe") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Monad") [Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") [],Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") [],Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") [],Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") []])),Func ("Prelude","_impl#>>=#Prelude.Monad#Prelude.Maybe") 2 Public (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 1])) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude","Just") [3]) (Comb FuncCall ("Prelude","apply") [Var 2,Var 3])])),Func ("Prelude","_impl#>>#Prelude.Monad#Prelude.Maybe") 0 Public (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TCons ("Prelude","Maybe") [TVar 1]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>>#Prelude.Monad") [Comb FuncCall ("Prelude","_inst#Prelude.Monad#Prelude.Maybe") []])),Func ("Prelude","_impl#return#Prelude.Monad#Prelude.Maybe") 0 Public (FuncType (TVar 0) (TCons ("Prelude","Maybe") [TVar 0])) (Rule [] (Comb (ConsPartCall 1) ("Prelude","Just") [])),Func ("Prelude","_impl#fail#Prelude.Monad#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Maybe") [TVar 0])) (Rule [1] (Comb ConsCall ("Prelude","Nothing") [])),Func ("Prelude","_inst#Prelude.Monad#[]") 0 Public (TCons ("Prelude","_Dict#Monad") [TCons ("Prelude","[]") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Monad") [Comb (FuncPartCall 2) ("Prelude","_impl#>>=#Prelude.Monad#[]") [],Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#[]") [],Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#[]") [],Comb (FuncPartCall 1) ("Prelude","_impl#fail#Prelude.Monad#[]") []])),Func ("Prelude","_impl#>>=#Prelude.Monad#[]") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184") [Var 2]],Var 1])),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184") 2 Private (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184._#lambda185") [],Comb FuncCall ("Prelude","apply") [Var 1,Var 2]])),Func ("Prelude","_impl#>>=#Prelude.Monad#[]._#lambda184._#lambda185") 1 Private (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1)),Func ("Prelude","_impl#>>#Prelude.Monad#[]") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>>#Prelude.Monad") [Comb FuncCall ("Prelude","_inst#Prelude.Monad#[]") []])),Func ("Prelude","_impl#return#Prelude.Monad#[]") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb ConsCall ("Prelude",":") [Var 1,Comb ConsCall ("Prelude","[]") []])),Func ("Prelude","_impl#fail#Prelude.Monad#[]") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb ConsCall ("Prelude","[]") [])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") []])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","True") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Bool") []])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") [],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","False") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","True") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Bool") []])),Func ("Prelude","_inst#Prelude.Show#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") [],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") []])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Bool") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Bool") []])),Func ("Prelude","_inst#Prelude.Read#Prelude.Bool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Bool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") [],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda186") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda191") []],Var 2]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda186") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda186._#lambda189") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda186._#lambda189") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","False") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda191") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda191._#lambda194") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool._#lambda191._#lambda194") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","True") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [13,14]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Bool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Bool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Bool") []])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Ordering") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") []])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") []])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Ordering") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") [],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","LT") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","EQ") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","GT") []) (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","GT") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","Ordering") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Ordering") []])),Func ("Prelude","_inst#Prelude.Show#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Ordering") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") [],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") []])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","Ordering") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Ordering") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Ordering") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","LT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","EQ") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude","[]") []]]]),Branch (Pattern ("Prelude","GT") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude","[]") []]]])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Ordering") []])),Func ("Prelude","_inst#Prelude.Read#Prelude.Ordering") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Ordering") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") [],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") []],Var 2]]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda196._#lambda199") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","LT") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [9,10]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda201._#lambda204") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'Q')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","EQ") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [9,10]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Ordering._#lambda206._#lambda209") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Ordering") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'G')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","GT") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [9,10]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Ordering") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Ordering") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Ordering") []])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [4]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","Just") [5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 5],Var 6])])])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Var 1]])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") [Var 1],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","Nothing") []) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","Just") [4]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","Just") [5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Just") [6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 5],Var 6])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","Maybe") [TVar 0])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Var 1]])),Func ("Prelude","_inst#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") [Var 1],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Maybe") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude","[]") []]]]]]]]]),Branch (Pattern ("Prelude","Just") [4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'J'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 4]]])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Maybe") [Var 1]])),Func ("Prelude","_inst#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Maybe") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Var 1],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda211") []],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216") [Var 1]],Var 3]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda211") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda211._#lambda214") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda211._#lambda214") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Nothing") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [19,20]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216._#lambda219") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216._#lambda219") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'J')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216._#lambda219._#lambda223") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe._#lambda216._#lambda219._#lambda223") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Just") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Maybe") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Maybe") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Maybe") [Var 1]])),Func ("Prelude","_inst#Prelude.Eq#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Left") [5]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 5],Var 6]),Branch (Pattern ("Prelude","Right") [7]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","Right") [8]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Right") [10]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 2],Var 8],Var 10])])])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (TCons ("Prelude","_Dict#Ord") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Either") [Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 1],Comb FuncCall ("Prelude","_super#Prelude.Ord#Prelude.Eq") [Var 2]],Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") [Var 1,Var 2],Comb (FuncPartCall 2) ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#compare#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Ordering") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#compare#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#<=#Prelude.Ord#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Left") [5]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 1],Var 5],Var 6]),Branch (Pattern ("Prelude","Right") [7]) (Comb ConsCall ("Prelude","True") [])]),Branch (Pattern ("Prelude","Right") [8]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","Right") [10]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<=") [Var 2],Var 8],Var 10])])])),Func ("Prelude","_impl#>=#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#<#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#>#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Bool") []))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#min#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Either") [TVar 0,TVar 1]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#max#Prelude.Ord#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","Either") [TVar 0,TVar 1]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.Either") [Var 1,Var 2],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","Left") [5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 5]]]),Branch (Pattern ("Prelude","Right") [6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 2],Lit (Intc 11)],Var 6]]])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Show") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","Either") [TVar 0,TVar 1]]))) (Rule [1,2] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") [Var 1,Var 2],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either") 4 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 3],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225") [Var 1]],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 3],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234") [Var 2]],Var 4]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225._#lambda228") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225._#lambda228") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225._#lambda228._#lambda232") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda225._#lambda228._#lambda232") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 0,TVar 1],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Left") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234._#lambda237") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234._#lambda237") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234._#lambda237._#lambda241") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Either._#lambda234._#lambda237._#lambda241") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Either") [TVar 1,TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","Right") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.Either") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Either") [TVar 0,TVar 1]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Either") [Var 1,Var 2]])),Func ("Prelude","_inst#Prelude.Eq#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Prelude","IOError") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") [],Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") []])),Func ("Prelude","_impl#==#Prelude.Eq#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","IOError") [3]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [4]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 3,Var 4]),Branch (Pattern ("Prelude","UserError") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","FailError") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","NondetError") [7]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","UserError") [8]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","UserError") [10]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 8,Var 10]),Branch (Pattern ("Prelude","FailError") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","NondetError") [12]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","FailError") [13]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","UserError") [15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","FailError") [16]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 13,Var 16]),Branch (Pattern ("Prelude","NondetError") [17]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Prelude","NondetError") [18]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","UserError") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","FailError") [21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","NondetError") [22]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 18,Var 22])])])),Func ("Prelude","_impl#/=#Prelude.Eq#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.IOError") []])),Func ("Prelude","_inst#Prelude.Show#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Prelude","IOError") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") [],Comb (FuncPartCall 2) ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") [],Comb FuncCall ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") []])),Func ("Prelude","_impl#show#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.IOError") []])),Func ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","IOError") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","IOError") [3]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 3]]]),Branch (Pattern ("Prelude","UserError") [4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 4]]]),Branch (Pattern ("Prelude","FailError") [5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 5]]]),Branch (Pattern ("Prelude","NondetError") [6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 6]]])])),Func ("Prelude","_impl#showList#Prelude.Show#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IOError") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.IOError") []])),Func ("Prelude","_inst#Prelude.Read#Prelude.IOError") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Prelude","IOError") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") [],Comb FuncCall ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") []])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270") []],Var 2]]]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243._#lambda246") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243._#lambda246") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'O')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243._#lambda246._#lambda250") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [19,20]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda243._#lambda246._#lambda250") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","IOError") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252._#lambda255") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252._#lambda255") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'U')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252._#lambda255._#lambda259") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda252._#lambda255._#lambda259") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","UserError") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261._#lambda264") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261._#lambda264") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261._#lambda264._#lambda268") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda261._#lambda264._#lambda268") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","FailError") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270._#lambda273") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270._#lambda273") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270._#lambda273._#lambda277") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [27,28]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.IOError._#lambda270._#lambda273._#lambda277") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","IOError") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","NondetError") [Var 3],Var 4],Var 2])])),Func ("Prelude","_impl#readList#Prelude.Read#Prelude.IOError") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","IOError") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.IOError") []])),Func ("Prelude",".") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1)))) (Rule [1,2] (Comb (FuncPartCall 1) ("Prelude",".._#lambda279") [Var 1,Var 2])),Func ("Prelude",".._#lambda279") 3 Private (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 0)) (FuncType (TVar 2) (TVar 1)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])),Func ("Prelude","id") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1)),Func ("Prelude","const") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (Rule [1,2] (Var 1)),Func ("Prelude","curry") 3 Public (FuncType (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 2)) (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Var 1,Comb ConsCall ("Prelude","(,)") [Var 2,Var 3]])),Func ("Prelude","uncurry") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 2))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 4])])),Func ("Prelude","flip") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TVar 1) (FuncType (TVar 0) (TVar 2)))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Var 2])),Func ("Prelude","until") 3 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","until") [Var 1,Var 2,Comb FuncCall ("Prelude","apply") [Var 2,Var 3]])])),Func ("Prelude","seq") 2 Public (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Comb (FuncPartCall 1) ("Prelude","const") [Var 2],Var 1])),Func ("Prelude","ensureNotFree") 1 Public (FuncType (TVar 0) (TVar 0)) (External "Prelude.ensureNotFree"),Func ("Prelude","ensureSpine") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","ensureSpine.ensureList.20") [Comb FuncCall ("Prelude","ensureNotFree") [Var 1]])),Func ("Prelude","ensureSpine.ensureList.20") 1 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("Prelude","ensureSpine") [Var 3]])])),Func ("Prelude","$") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Var 1,Var 2])),Func ("Prelude","$!") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.$!"),Func ("Prelude","$!!") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.$!!"),Func ("Prelude","$#") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (Rule [1,2] (Comb FuncCall ("Prelude","$!") [Var 1,Comb FuncCall ("Prelude","ensureNotFree") [Var 2]])),Func ("Prelude","$##") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.$##"),Func ("Prelude","error") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_error") [],Var 1])),Func ("Prelude","prim_error") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0)) (External "Prelude.prim_error"),Func ("Prelude","failed") 0 Public (TVar 0) (External "Prelude.failed"),Func ("Prelude","&&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","||") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Prelude","not") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","otherwise") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb ConsCall ("Prelude","True") [])),Func ("Prelude","if_then_else") 3 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","solve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","True") [])])),Func ("Prelude","&>") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2)])),Func ("Prelude","=:=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (External "Prelude.=:="),Func ("Prelude","&") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","Bool") []))) (External "Prelude.&"),Func ("Prelude","eqChar") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (External "Prelude.eqChar"),Func ("Prelude","eqInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (External "Prelude.eqInt"),Func ("Prelude","eqFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (External "Prelude.eqFloat"),Func ("Prelude","ltEqChar") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") []))) (External "Prelude.ltEqChar"),Func ("Prelude","ltEqInt") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))) (External "Prelude.ltEqInt"),Func ("Prelude","ltEqFloat") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Bool") []))) (External "Prelude.ltEqFloat"),Func ("Prelude","fst") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","snd") 1 Public (FuncType (TCons ("Prelude","(,)") [TVar 0,TVar 1]) (TVar 1)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","head") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 2)])),Func ("Prelude","tail") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Var 3)])),Func ("Prelude","null") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb ConsCall ("Prelude","False") [])])),Func ("Prelude","++") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Prelude","++") [Var 4,Var 2]])])),Func ("Prelude","length") 1 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","length.len.80") [Comb FuncCall ("Prelude","_inst#Prelude.Num#Prelude.Int") [],Var 1,Lit (Intc 0)])),Func ("Prelude","length.len.80") 3 Private (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TVar 0) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [4,5]) (Let [(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","+") [Var 1],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Var 1],Lit (Intc 1)]])] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Prelude","length.len.80") [Var 1,Var 5],Var 6]))])),Func ("Prelude","!!") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 2,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 2],Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","!!") [Var 4,Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Lit (Intc 1)]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Prelude","map") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","map") [Var 1,Var 4]])])),Func ("Prelude","foldl") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 0))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","foldl") [Var 1,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4],Var 5])])),Func ("Prelude","foldl1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","foldl") [Var 1,Var 3,Var 4])])),Func ("Prelude","foldr") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 1))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 1)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Var 2),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("Prelude","foldr") [Var 1,Var 2,Var 5]])])),Func ("Prelude","foldr1") 2 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 3],Comb FuncCall ("Prelude","foldr1") [Var 1,Var 4]])])])),Func ("Prelude","filter") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Prelude","filter") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","filter") [Var 1,Var 4])])])),Func ("Prelude","zip") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 5],Comb FuncCall ("Prelude","zip") [Var 4,Var 6]])])])),Func ("Prelude","zip3") 3 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]])))) (Rule [1,2,3] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [6,7]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [8,9]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,,)") [Var 4,Var 6,Var 8],Comb FuncCall ("Prelude","zip3") [Var 5,Var 7,Var 9]])])])])),Func ("Prelude","zipWith") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TVar 2))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","[]") [TVar 2])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [6,7]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Var 6],Comb FuncCall ("Prelude","zipWith") [Var 1,Var 5,Var 7]])])])),Func ("Prelude","zipWith3") 4 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3)))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","[]") [TVar 3]))))) (Rule [1,2,3,4] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [5,6]) (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [7,8]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [9,10]) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 5],Var 7],Var 9],Comb FuncCall ("Prelude","zipWith3") [Var 1,Var 6,Var 8,Var 10]])])])])),Func ("Prelude","unzip") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Let [(6,Comb FuncCall ("Prelude","unzip") [Var 3]),(7,Comb FuncCall ("Prelude","unzip._#selFP10#xs") [Var 6]),(8,Comb FuncCall ("Prelude","unzip._#selFP11#ys") [Var 6])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 4,Var 7],Comb ConsCall ("Prelude",":") [Var 5,Var 8]]))])])),Func ("Prelude","unzip._#selFP10#xs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","unzip._#selFP11#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","[]") [TVar 1])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","unzip3") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,,)") [TVar 0,TVar 1,TVar 2]]) (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,,)") [4,5,6]) (Let [(7,Comb FuncCall ("Prelude","unzip3") [Var 3]),(8,Comb FuncCall ("Prelude","unzip3._#selFP13#xs") [Var 7]),(9,Comb FuncCall ("Prelude","unzip3._#selFP14#ys") [Var 7]),(10,Comb FuncCall ("Prelude","unzip3._#selFP15#zs") [Var 7])] (Comb ConsCall ("Prelude","(,,)") [Comb ConsCall ("Prelude",":") [Var 4,Var 8],Comb ConsCall ("Prelude",":") [Var 5,Var 9],Comb ConsCall ("Prelude",":") [Var 6,Var 10]]))])])),Func ("Prelude","unzip3._#selFP13#xs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 2)])),Func ("Prelude","unzip3._#selFP14#ys") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 1])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 3)])),Func ("Prelude","unzip3._#selFP15#zs") 1 Private (FuncType (TCons ("Prelude","(,,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 1],TCons ("Prelude","[]") [TVar 2]]) (TCons ("Prelude","[]") [TVar 2])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,,)") [2,3,4]) (Var 4)])),Func ("Prelude","concat") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude","[]") [],Var 1])),Func ("Prelude","concatMap") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 1]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","concat") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Prelude","iterate") 2 Public (FuncType (FuncType (TVar 0) (TVar 0)) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Var 2,Comb FuncCall ("Prelude","iterate") [Var 1,Comb FuncCall ("Prelude","apply") [Var 1,Var 2]]])),Func ("Prelude","repeat") 1 Public (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","repeat") [Var 1]])),Func ("Prelude","replicate") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Comb FuncCall ("Prelude","take") [Var 1,Comb FuncCall ("Prelude","repeat") [Var 2]])),Func ("Prelude","take") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","take.takep.197") [Var 1,Var 2])])),Func ("Prelude","take.takep.197") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Prelude","take") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 4]])])),Func ("Prelude","drop") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Comb FuncCall ("Prelude","drop") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 4])])])),Func ("Prelude","splitAt") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 1,Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 2]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","splitAt.splitAtp.211") [Var 1,Var 2])])),Func ("Prelude","splitAt.splitAtp.211") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Let [(5,Comb FuncCall ("Prelude","splitAt") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 4]),(6,Comb FuncCall ("Prelude","splitAt.splitAtp.211._#selFP17#ys") [Var 5]),(7,Comb FuncCall ("Prelude","splitAt.splitAtp.211._#selFP18#zs") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7]))])),Func ("Prelude","splitAt.splitAtp.211._#selFP17#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","splitAt.splitAtp.211._#selFP18#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","takeWhile") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Var 3,Comb FuncCall ("Prelude","takeWhile") [Var 1,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])])])),Func ("Prelude","dropWhile") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","dropWhile") [Var 1,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 3,Var 4])])])),Func ("Prelude","span") 2 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Var 1,Var 3]) [Branch (Pattern ("Prelude","True") []) (Let [(5,Comb FuncCall ("Prelude","span") [Var 1,Var 4]),(6,Comb FuncCall ("Prelude","span._#selFP20#ys") [Var 5]),(7,Comb FuncCall ("Prelude","span._#selFP21#zs") [Var 5])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 3,Var 6],Var 7])),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 3,Var 4]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Prelude","span._#selFP20#ys") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","span._#selFP21#zs") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]) (TCons ("Prelude","[]") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","break") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TVar 0]]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","span") [Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","not") [],Var 1]])),Func ("Prelude","lines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Let [(4,Comb FuncCall ("Prelude","lines.splitline.241") [Comb ConsCall ("Prelude",":") [Var 2,Var 3]]),(5,Comb FuncCall ("Prelude","lines._#selFP26#l") [Var 4]),(6,Comb FuncCall ("Prelude","lines._#selFP27#xs_l") [Var 4])] (Comb ConsCall ("Prelude",":") [Var 5,Comb FuncCall ("Prelude","lines") [Var 6]]))])),Func ("Prelude","lines.splitline.241") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\n')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 3]),Branch (Pattern ("Prelude","False") []) (Let [(4,Comb FuncCall ("Prelude","lines.splitline.241") [Var 3]),(5,Comb FuncCall ("Prelude","lines.splitline.241._#selFP23#ds") [Var 4]),(6,Comb FuncCall ("Prelude","lines.splitline.241._#selFP24#es") [Var 4])] (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Var 5],Var 6]))])])),Func ("Prelude","lines.splitline.241._#selFP23#ds") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","lines.splitline.241._#selFP24#es") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","lines._#selFP26#l") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","lines._#selFP27#xs_l") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","unlines") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","concatMap") [Comb (FuncPartCall 1) ("Prelude","flip") [Comb (FuncPartCall 2) ("Prelude","++") [],Comb ConsCall ("Prelude",":") [Lit (Charc '\n'),Comb ConsCall ("Prelude","[]") []]]],Var 1])),Func ("Prelude","words") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","isSpace") [],Var 1])] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 2,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Let [(3,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","break") [Comb (FuncPartCall 1) ("Prelude","isSpace") []],Var 2]),(4,Comb FuncCall ("Prelude","words._#selFP29#w") [Var 3]),(5,Comb FuncCall ("Prelude","words._#selFP30#s2") [Var 3])] (Comb ConsCall ("Prelude",":") [Var 4,Comb FuncCall ("Prelude","words") [Var 5]]))]))),Func ("Prelude","words._#selFP29#w") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Prelude","words._#selFP30#s2") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Prelude","unwords") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []],Var 1,Comb ConsCall ("Prelude","[]") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","foldr1") [Comb (FuncPartCall 2) ("Prelude","unwords._#lambda282") [],Var 1])])),Func ("Prelude","unwords._#lambda282") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Var 1,Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Var 2]])),Func ("Prelude","reverse") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldl") [Comb (FuncPartCall 2) ("Prelude","flip") [Comb (ConsPartCall 2) ("Prelude",":") []],Comb ConsCall ("Prelude","[]") []])),Func ("Prelude","and") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","&&") [],Comb ConsCall ("Prelude","True") []])),Func ("Prelude","or") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Bool") []]) (TCons ("Prelude","Bool") [])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","||") [],Comb ConsCall ("Prelude","False") []])),Func ("Prelude","any") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","or") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Prelude","all") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") []))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","and") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Prelude","elem") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2] (Comb FuncCall ("Prelude","any") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2]])),Func ("Prelude","notElem") 2 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2] (Comb FuncCall ("Prelude","all") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","/=") [Var 1],Var 2]])),Func ("Prelude","lookup") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TVar 1]]) (TCons ("Prelude","Maybe") [TVar 1])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","Nothing") []),Branch (Pattern ("Prelude",":") [4,5]) (Case Flex (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 2],Var 6]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","Just") [Var 7]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","lookup") [Var 1,Var 2,Var 5]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])),Func ("Prelude","enumFrom_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])) (Rule [1] (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","enumFrom_") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)]]])),Func ("Prelude","enumFromThen_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","iterate") [Comb (FuncPartCall 1) ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Var 2,Var 1]],Var 1])),Func ("Prelude","enumFromTo_") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 1],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","enumFromTo_") [Comb FuncCall ("Prelude","_impl#+#Prelude.Num#Prelude.Int") [Var 1,Lit (Intc 1)],Var 2]])])),Func ("Prelude","enumFromThenTo_") 3 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","[]") [TCons ("Prelude","Int") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","takeWhile") [Comb (FuncPartCall 1) ("Prelude","enumFromThenTo_.p.287") [Var 3,Var 1,Var 2],Comb FuncCall ("Prelude","enumFromThen_") [Var 1,Var 2]])),Func ("Prelude","enumFromThenTo_.p.287") 4 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Bool") []))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [],Var 3],Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Int") [Var 4,Var 1]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [],Var 4],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","ord") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("Prelude","prim_ord") [],Var 1])),Func ("Prelude","prim_ord") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Int") [])) (External "Prelude.prim_ord"),Func ("Prelude","chr") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (Rule [1] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [],Var 1],Lit (Intc 0)]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("Prelude","prim_chr") [],Var 1]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("Prelude","prim_chr") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Char") [])) (External "Prelude.prim_chr"),Func ("Prelude","+$") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.+$"),Func ("Prelude","-$") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.-$"),Func ("Prelude","*$") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.*$"),Func ("Prelude","div_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.div_"),Func ("Prelude","mod_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.mod_"),Func ("Prelude","divMod_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (External "Prelude.divMod_"),Func ("Prelude","quot_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.quot_"),Func ("Prelude","rem_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") []))) (External "Prelude.rem_"),Func ("Prelude","quotRem_") 2 Private (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","Int") []]))) (External "Prelude.quotRem_"),Func ("Prelude","negate_") 1 Public (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Int") [])) (Rule [1] (Comb FuncCall ("Prelude","_impl#-#Prelude.Num#Prelude.Int") [Lit (Intc 0),Var 1])),Func ("Prelude","negateFloat") 1 Public (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") [])) (External "Prelude.negateFloat"),Func ("Prelude","success") 0 Public (TCons ("Prelude","Bool") []) (Rule [] (Comb ConsCall ("Prelude","True") [])),Func ("Prelude","maybe") 3 Public (FuncType (TVar 0) (FuncType (FuncType (TVar 1) (TVar 0)) (FuncType (TCons ("Prelude","Maybe") [TVar 1]) (TVar 0)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Nothing") []) (Var 1),Branch (Pattern ("Prelude","Just") [4]) (Comb FuncCall ("Prelude","apply") [Var 2,Var 4])])),Func ("Prelude","either") 3 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (FuncType (TVar 2) (TVar 1)) (FuncType (TCons ("Prelude","Either") [TVar 0,TVar 2]) (TVar 1)))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","Left") [4]) (Comb FuncCall ("Prelude","apply") [Var 1,Var 4]),Branch (Pattern ("Prelude","Right") [5]) (Comb FuncCall ("Prelude","apply") [Var 2,Var 5])])),Func ("Prelude",">>=$") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TVar 1]))) (External "Prelude.>>=$"),Func ("Prelude","returnIO") 1 Private (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 0])) (External "Prelude.returnIO"),Func ("Prelude",">>$") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TCons ("Prelude","IO") [TVar 1]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude",">>=$") [Var 1,Comb (FuncPartCall 1) ("Prelude",">>$._#lambda283") [Var 2]])),Func ("Prelude",">>$._#lambda283") 2 Private (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (Rule [1,2] (Var 1)),Func ("Prelude","done") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (Rule [] (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Comb ConsCall ("Prelude","()") []])),Func ("Prelude","putChar") 1 Public (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("Prelude","prim_putChar") [],Var 1])),Func ("Prelude","prim_putChar") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (External "Prelude.prim_putChar"),Func ("Prelude","getChar") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","Char") []]) (External "Prelude.getChar"),Func ("Prelude","readFile") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_readFile") [],Var 1])),Func ("Prelude","prim_readFile") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (External "Prelude.prim_readFile"),Func ("Prelude","writeFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$##") [Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 2) ("Prelude","prim_writeFile") [],Var 1],Var 2])),Func ("Prelude","prim_writeFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (External "Prelude.prim_writeFile"),Func ("Prelude","appendFile") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","$##") [Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 2) ("Prelude","prim_appendFile") [],Var 1],Var 2])),Func ("Prelude","prim_appendFile") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (External "Prelude.prim_appendFile"),Func ("Prelude","putStr") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","putChar") [Var 2],Comb FuncCall ("Prelude","putStr") [Var 3]])])),Func ("Prelude","putStrLn") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Comb FuncCall ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","putStr") [Var 1],Comb FuncCall ("Prelude","putChar") [Lit (Charc '\n')]])),Func ("Prelude","getLine") 0 Public (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (Rule [] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","getChar") [],Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285") []])),Func ("Prelude","getLine._#lambda285") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Let [(2,Var 1)] (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\n')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","getLine") [],Comb (FuncPartCall 1) ("Prelude","getLine._#lambda285._#lambda288") [Var 2]])]))),Func ("Prelude","getLine._#lambda285._#lambda288") 2 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]))) (Rule [1,2] (Let [(3,Var 2)] (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Comb ConsCall ("Prelude",":") [Var 1,Var 3]]))),Func ("Prelude","userError") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","IOError") [])) (Rule [1] (Comb ConsCall ("Prelude","UserError") [Var 1])),Func ("Prelude","ioError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_ioError") [],Var 1])),Func ("Prelude","prim_ioError") 1 Private (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (External "Prelude.prim_ioError"),Func ("Prelude","showError") 1 Public (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","IOError") [2]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Var 2]),Branch (Pattern ("Prelude","UserError") [3]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 3]),Branch (Pattern ("Prelude","FailError") [4]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Var 4]),Branch (Pattern ("Prelude","NondetError") [5]) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Var 5])])),Func ("Prelude","catch") 2 Public (FuncType (TCons ("Prelude","IO") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","IOError") []) (TCons ("Prelude","IO") [TVar 0])) (TCons ("Prelude","IO") [TVar 0]))) (External "Prelude.catch"),Func ("Prelude","show_") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_show") [],Var 1])),Func ("Prelude","prim_show") 1 Private (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (External "Prelude.prim_show"),Func ("Prelude","print") 2 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","putStrLn") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","show") [Var 1],Var 2]])),Func ("Prelude","doSolve") 1 Public (FuncType (TCons ("Prelude","Bool") []) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])),Func ("Prelude","sequenceIO") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Var 2,Comb (FuncPartCall 1) ("Prelude","sequenceIO._#lambda292") [Var 3]])])),Func ("Prelude","sequenceIO._#lambda292") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (FuncType (TVar 0) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Let [(3,Var 2)] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","sequenceIO") [Var 1],Comb (FuncPartCall 1) ("Prelude","sequenceIO._#lambda292._#lambda294") [Var 3]]))),Func ("Prelude","sequenceIO._#lambda292._#lambda294") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 0]]))) (Rule [1,2] (Let [(3,Var 2)] (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Comb ConsCall ("Prelude",":") [Var 1,Var 3]]))),Func ("Prelude","sequenceIO_") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","IO") [TVar 0]]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","_impl#>>#Prelude.Monad#Prelude.IO") [],Comb FuncCall ("Prelude","done") []])),Func ("Prelude","mapIO") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","sequenceIO") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Prelude","mapIO_") 1 Public (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","sequenceIO_") [],Comb (FuncPartCall 1) ("Prelude","map") [Var 1]])),Func ("Prelude","foldIO") 3 Public (FuncType (FuncType (TVar 0) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 0]))) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","IO") [TVar 0])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [Var 2]),Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Var 4],Comb (FuncPartCall 1) ("Prelude","foldIO._#lambda296") [Var 5,Var 1]])])),Func ("Prelude","foldIO._#lambda296") 3 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1]))) (FuncType (TVar 1) (TCons ("Prelude","IO") [TVar 1])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","foldIO") [Var 2,Var 3,Var 1])),Func ("Prelude","liftIO") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TCons ("Prelude","IO") [TVar 0]) (TCons ("Prelude","IO") [TVar 1]))) (Rule [1,2] (Comb FuncCall ("Prelude","_impl#>>=#Prelude.Monad#Prelude.IO") [Var 2,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","_impl#return#Prelude.Monad#Prelude.IO") [],Var 1]])),Func ("Prelude","forIO") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TCons ("Prelude","[]") [TVar 1]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO") [Var 2],Var 1])),Func ("Prelude","forIO_") 2 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (FuncType (TVar 0) (TCons ("Prelude","IO") [TVar 1])) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapIO_") [Var 2],Var 1])),Func ("Prelude","unless") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","done") []),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Prelude","when") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","IO") [TCons ("Prelude","()") []]) (TCons ("Prelude","IO") [TCons ("Prelude","()") []]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Var 2),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","done") [])])),Func ("Prelude","?") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (Rule [1,2] (Or (Var 1) (Var 2))),Func ("Prelude","anyOf") 0 Public (FuncType (TCons ("Prelude","[]") [TVar 0]) (TVar 0)) (Rule [] (Comb (FuncPartCall 1) ("Prelude","foldr1") [Comb (FuncPartCall 2) ("Prelude","?") []])),Func ("Prelude","unknown") 0 Public (TVar 0) (Rule [] (Free [1] (Var 1))),Func ("Prelude","PEVAL") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Var 1)),Func ("Prelude","normalForm") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","$!!") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 1])),Func ("Prelude","groundNormalForm") 1 Public (FuncType (TVar 0) (TVar 0)) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","id") [],Var 1])),Func ("Prelude","apply") 2 Public (FuncType (FuncType (TVar 0) (TVar 1)) (FuncType (TVar 0) (TVar 1))) (External "Prelude.apply"),Func ("Prelude","cond") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (TVar 0) (TVar 0))) (External "Prelude.cond"),Func ("Prelude","=:<=") 2 Public (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") []))) (External "Prelude.=:<="),Func ("Prelude","showList'") 3 Private (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude","[]") []]],Var 3]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 1,Var 4],Comb FuncCall ("Prelude","showList'.showl.401") [Var 3,Var 1,Var 5]]])])),Func ("Prelude","showList'.showl.401") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Var 1]),Branch (Pattern ("Prelude",":") [4,5]) (Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 4],Comb FuncCall ("Prelude","showList'.showl.401") [Var 1,Var 2,Var 5]]])])),Func ("Prelude","shows") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 0)])),Func ("Prelude","showChar") 2 Public (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb ConsCall ("Prelude",":") [Var 1,Var 2])),Func ("Prelude","showString") 2 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","showChar") [],Var 2,Var 1])),Func ("Prelude","showParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '(')],Comb FuncCall ("Prelude",".") [Var 2,Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ')')]]]),Branch (Pattern ("Prelude","False") []) (Var 2)])),Func ("Prelude","showSigned") 4 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))))) (Rule [1,2,3,4] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","<") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Ord") [Var 1]],Var 4],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromInt") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Var 1]],Lit (Intc 0)]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>#Prelude.Ord#Prelude.Int") [],Var 3],Lit (Intc 6)],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '-')],Comb FuncCall ("Prelude","apply") [Var 2,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","negate") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Var 1]],Var 4]]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Var 2,Var 4]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])),Func ("Prelude","showTuple") 1 Private (FuncType (TCons ("Prelude","[]") [FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc '(')],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","foldr1") [Comb (FuncPartCall 2) ("Prelude","showTuple._#lambda297") [],Var 1],Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ')')]]])),Func ("Prelude","showTuple._#lambda297") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [Var 1,Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showChar") [Lit (Charc ',')],Var 2]])),Func ("Prelude","appPrec") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc 10))),Func ("Prelude","appPrec1") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc 11))),Func ("Prelude","readListDefault") 1 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326") [Var 1]])),Func ("Prelude","readListDefault.readl'.424") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.424._#lambda312") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.424._#lambda316") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]]])),Func ("Prelude","readListDefault.readl'.424._#lambda312") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc ']')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [7,8]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","readListDefault.readl'.424._#lambda316") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc ',')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.424._#lambda316._#lambda320") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","readListDefault.readl'.424._#lambda316._#lambda320") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl'.424._#lambda316._#lambda320._#lambda324") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readListDefault.readl'.424") [Var 1,Var 5]],Var 3])])),Func ("Prelude","readListDefault.readl'.424._#lambda316._#lambda320._#lambda324") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","readListDefault.readl.424") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.424._#lambda300") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.424._#lambda304") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 2]]])),Func ("Prelude","readListDefault.readl.424._#lambda300") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc ']')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [7,8]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","readListDefault.readl.424._#lambda304") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault.readl.424._#lambda304._#lambda308") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readListDefault.readl'.424") [Var 1,Var 5]],Var 3])])),Func ("Prelude","readListDefault.readl.424._#lambda304._#lambda308") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","readListDefault._#lambda326") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readListDefault._#lambda326._#lambda329") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Prelude","readListDefault._#lambda326._#lambda329") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc '[')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","readListDefault._#lambda326._#lambda329._#lambda331") [],Comb FuncCall ("Prelude","readListDefault.readl.424") [Var 1,Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","readListDefault._#lambda326._#lambda329._#lambda331") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]])) (Rule [1] (Var 1)),Func ("Prelude","reads") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 0)])),Func ("Prelude","readParen") 2 Public (FuncType (TCons ("Prelude","Bool") []) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","True") []) (Comb (FuncPartCall 1) ("Prelude","readParen.mandatory.442") [Var 2]),Branch (Pattern ("Prelude","False") []) (Comb (FuncPartCall 1) ("Prelude","readParen.optional.442") [Var 2])])),Func ("Prelude","readParen.optional.442") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Var 1,Var 2],Comb FuncCall ("Prelude","readParen.mandatory.442") [Var 1,Var 2]])),Func ("Prelude","readParen.mandatory.442") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.442._#lambda334") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Prelude","readParen.mandatory.442._#lambda334") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc '(')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.442._#lambda334._#lambda338") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readParen.optional.442") [Var 1,Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","readParen.mandatory.442._#lambda334._#lambda338") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readParen.mandatory.442._#lambda334._#lambda338._#lambda342") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 4]],Var 2])])),Func ("Prelude","readParen.mandatory.442._#lambda334._#lambda338._#lambda342") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc ')')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 1,Var 5],Var 3]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Prelude","read") 2 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TVar 0))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","read._#lambda346") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","reads") [Var 1],Var 2]]) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Var 3),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]])])),Func ("Prelude","read._#lambda346") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","read._#lambda346._#lambda350") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 4]],Var 2])])),Func ("Prelude","read._#lambda346._#lambda350") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude","[]") []) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Var 1,Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Var 3)]),Branch (Pattern ("Prelude",":") [8,9]) (Var 3)])])),Func ("Prelude","readSigned") 2 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2] (Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Prelude","readSigned.read'.462") [Var 1,Var 2]])),Func ("Prelude","readSigned.read''.462") 2 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readSigned.read''.462._#lambda363") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Prelude","readSigned.read''.462._#lambda363") 3 Private (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readSigned.read''.462._#lambda363._#lambda367") [Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Var 1,Var 4]],Var 3])])),Func ("Prelude","readSigned.read''.462._#lambda363._#lambda367") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 4,Var 1],Var 3]),Branch (Pattern ("Prelude",":") [6,7]) (Var 3)])])),Func ("Prelude","readSigned.read'.462") 3 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","readSigned.read''.462") [Var 2,Var 3],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readSigned.read'.462._#lambda355") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 3]]])),Func ("Prelude","readSigned.read'.462._#lambda355") 4 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Case Rigid (Var 5) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc '-')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","readSigned.read'.462._#lambda355._#lambda359") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","readSigned.read''.462") [Var 2,Var 6]],Var 4]),Branch (Pattern ("Prelude",":") [9,10]) (Var 4)]),Branch (Pattern ("Prelude","False") []) (Var 4)]),Branch (Pattern ("Prelude","[]") []) (Var 4)])])),Func ("Prelude","readSigned.read'.462._#lambda355._#lambda359") 3 Private (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","negate") [Comb FuncCall ("Prelude","_super#Prelude.Real#Prelude.Num") [Var 1]],Var 4],Var 5],Var 3])])),Func ("Prelude","readNatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_readNatLiteral") [],Var 1])),Func ("Prelude","prim_readNatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (External "Prelude.prim_readNatLiteral"),Func ("Prelude","readFloatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_readFloatLiteral") [],Var 1])),Func ("Prelude","prim_readFloatLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (External "Prelude.prim_readFloatLiteral"),Func ("Prelude","readCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_readCharLiteral") [],Var 1])),Func ("Prelude","prim_readCharLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (External "Prelude.prim_readCharLiteral"),Func ("Prelude","readStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","$##") [Comb (FuncPartCall 1) ("Prelude","prim_readStringLiteral") [],Var 1])),Func ("Prelude","prim_readStringLiteral") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (External "Prelude.prim_readStringLiteral"),Func ("Prelude","lex") 1 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude","[]") []],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","isSpace") [Var 2]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","$") [Comb (FuncPartCall 1) ("Prelude","lex") [],Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","isSpace") [],Var 3]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda412") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lexLitChar") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda416") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexString.480") [Var 5]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","lex.isSingle.480") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 4,Comb ConsCall ("Prelude","[]") []],Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","lex.isSym.480") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda420") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","lex.isSym.480") [],Var 5],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isAlpha") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda424") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","lex.isIdChar.480") [],Var 5],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda428") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isDigit") [],Var 5],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])])])])])])])])),Func ("Prelude","lex.isSingle.480") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc ','),Comb ConsCall ("Prelude",":") [Lit (Charc ';'),Comb ConsCall ("Prelude",":") [Lit (Charc '('),Comb ConsCall ("Prelude",":") [Lit (Charc ')'),Comb ConsCall ("Prelude",":") [Lit (Charc '['),Comb ConsCall ("Prelude",":") [Lit (Charc ']'),Comb ConsCall ("Prelude",":") [Lit (Charc '{'),Comb ConsCall ("Prelude",":") [Lit (Charc '}'),Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc '`'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]])),Func ("Prelude","lex.isSym.480") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '!'),Comb ConsCall ("Prelude",":") [Lit (Charc '@'),Comb ConsCall ("Prelude",":") [Lit (Charc '#'),Comb ConsCall ("Prelude",":") [Lit (Charc '$'),Comb ConsCall ("Prelude",":") [Lit (Charc '%'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude",":") [Lit (Charc '*'),Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc '/'),Comb ConsCall ("Prelude",":") [Lit (Charc '<'),Comb ConsCall ("Prelude",":") [Lit (Charc '='),Comb ConsCall ("Prelude",":") [Lit (Charc '>'),Comb ConsCall ("Prelude",":") [Lit (Charc '?'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Lit (Charc '|'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude",":") [Lit (Charc '~'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]])),Func ("Prelude","lex.isIdChar.480") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","isAlphaNum") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 1],Comb ConsCall ("Prelude",":") [Lit (Charc '_'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]])),Func ("Prelude","lex.lexExp.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexExp.480._#lambda382") [Var 2],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Var 3,Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexExp.480._#lambda390") [Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","lexDigits") [],Var 3]]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") []])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude","[]") [],Var 1],Comb ConsCall ("Prelude","[]") []])])),Func ("Prelude","lex.lexExp.480._#lambda382") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude",":") [4,5]) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 4],Comb ConsCall ("Prelude",":") [Lit (Charc '+'),Comb ConsCall ("Prelude",":") [Lit (Charc '-'),Comb ConsCall ("Prelude","[]") []]]]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexExp.480._#lambda382._#lambda386") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","lexDigits") [],Var 5]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 3]),Branch (Pattern ("Prelude","[]") []) (Var 3)])),Func ("Prelude","lex.lexExp.480._#lambda382._#lambda386") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude",":") [Var 1,Var 5]],Var 6],Var 4])])),Func ("Prelude","lex.lexExp.480._#lambda390") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","lex.lexFracExp.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '.')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexFracExp.480._#lambda372") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","lexDigits") [],Comb ConsCall ("Prelude",":") [Var 4,Var 5]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lex.lexExp.480") [Var 1])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lex.lexExp.480") [Var 1])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lex.lexExp.480") [Var 1])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lex.lexExp.480") [Var 1])])),Func ("Prelude","lex.lexFracExp.480._#lambda372") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexFracExp.480._#lambda372._#lambda376") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexExp.480") [Var 4]],Var 2])])),Func ("Prelude","lex.lexFracExp.480._#lambda372._#lambda376") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb FuncCall ("Prelude","++") [Var 1,Var 4]],Var 5],Var 3])])),Func ("Prelude","lex.lexStrItem.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [4,5]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 4,Lit (Charc '&')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]],Var 5],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isSpace") [Var 4]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexStrItem.480._#lambda405") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","dropWhile") [Comb (FuncPartCall 1) ("Prelude","isSpace") [],Var 5],Comb ConsCall ("Prelude","[]") []]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar") [Var 1])])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lexLitChar") [Var 1])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","lexLitChar") [Var 1])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","lexLitChar") [Var 1])])),Func ("Prelude","lex.lexStrItem.480._#lambda405") 2 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [3,4]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 3,Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '&'),Comb ConsCall ("Prelude","[]") []]],Var 4],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])),Func ("Prelude","lex.lexString.480") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '"')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexString.480._#lambda396") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexStrItem.480") [Var 1]])]),Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexString.480._#lambda396") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexStrItem.480") [Var 1]])])),Func ("Prelude","lex.lexString.480._#lambda396") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex.lexString.480._#lambda396._#lambda400") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexString.480") [Var 4]],Var 2])])),Func ("Prelude","lex.lexString.480._#lambda396._#lambda400") 3 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Prelude","++") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","lex._#lambda412") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []],Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]],Var 6],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","lex._#lambda416") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Var 3],Var 4],Var 2])])),Func ("Prelude","lex._#lambda420") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","lex._#lambda424") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","lex._#lambda428") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda428._#lambda432") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexFracExp.480") [Var 5]],Var 3])])),Func ("Prelude","lex._#lambda428._#lambda432") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Var 5]],Var 6],Var 4])])),Func ("Prelude","lex._#lambda436") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc '\'')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","++") [Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []],Var 3],Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb FuncCall ("Prelude","++") [Var 3,Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]],Var 6],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])],Var 2]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","lex._#lambda440") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Var 3],Var 4],Var 2])])),Func ("Prelude","lex._#lambda444") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","lex._#lambda448") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 4],Var 5],Var 3])])),Func ("Prelude","lex._#lambda452") 3 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","lex._#lambda452._#lambda456") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex.lexFracExp.480") [Var 5]],Var 3])])),Func ("Prelude","lex._#lambda452._#lambda456") 4 Private (FuncType (TCons ("Prelude","Char") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Comb FuncCall ("Prelude","++") [Var 2,Var 5]],Var 6],Var 4])])),Func ("Prelude","lexLitChar") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") []),Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 2,Lit (Charc '\\')]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb (FuncPartCall 1) ("Prelude","lexLitChar.prefix.542") [Lit (Charc '\\')],Comb FuncCall ("Prelude","lexLitChar.lexEsc.542") [Var 3]]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude","[]") []])])])),Func ("Prelude","lexLitChar.isCharName.542") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","isUpper") [Var 1],Comb FuncCall ("Prelude","isDigit") [Var 1]])),Func ("Prelude","lexLitChar.prefix.542") 2 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]) (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TVar 1]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 1,Var 3],Var 4])])),Func ("Prelude","lexLitChar.lexEsc.542") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Case Rigid (Var 1) [Branch (Pattern ("Prelude",":") [2,3]) (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 2],Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc '\\'),Comb ConsCall ("Prelude",":") [Lit (Charc '"'),Comb ConsCall ("Prelude",":") [Lit (Charc '\''),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Var 2,Comb ConsCall ("Prelude","[]") []],Var 3],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(4,Var 1)] (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc '^')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 7],Lit (Charc '@')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 7,Lit (Charc '_')]]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Prelude",":") [Lit (Charc '^'),Comb ConsCall ("Prelude",":") [Var 7,Comb ConsCall ("Prelude","[]") []]],Var 8],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(9,Var 1)] (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [Var 10]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isDigit") [],Var 9],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(12,Var 1)] (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","isUpper") [Var 13]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","lexLitChar.isCharName.542") [],Var 12],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]))]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]))]),Branch (Pattern ("Prelude","[]") []) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isDigit") [],Var 4],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(15,Var 1)] (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","isUpper") [Var 16]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","lexLitChar.isCharName.542") [],Var 15],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]))])]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","lexLitChar.prefix.542") [Lit (Charc 'b'),Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isBinDigit") [],Var 6]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","lexLitChar.prefix.542") [Lit (Charc 'o'),Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isOctDigit") [],Var 6]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","lexLitChar.prefix.542") [Lit (Charc 'x'),Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isHexDigit") [],Var 6]],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","isDigit") [Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","isDigit") [],Var 4],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Let [(18,Var 1)] (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","isUpper") [Var 19]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Comb (FuncPartCall 1) ("Prelude","lexLitChar.isCharName.542") [],Var 18],Comb ConsCall ("Prelude","[]") []]),Branch (Pattern ("Prelude","False") []) (Comb ConsCall ("Prelude","[]") [])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]))])])])])]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])]))]),Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude","[]") [])])),Func ("Prelude","lexDigits") 0 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","nonNull") [Comb (FuncPartCall 1) ("Prelude","isDigit") []])),Func ("Prelude","nonNull") 2 Private (FuncType (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","nonNull._#lambda477") [],Comb ConsCall ("Prelude","[]") [],Comb ConsCall ("Prelude",":") [Comb FuncCall ("Prelude","span") [Var 1,Var 2],Comb ConsCall ("Prelude","[]") []]])),Func ("Prelude","nonNull._#lambda477") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Var 3,Var 4],Var 2]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Prelude","isUpper") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc 'A')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc 'Z')]])),Func ("Prelude","isLower") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc 'a')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc 'z')]])),Func ("Prelude","isAlpha") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","isUpper") [Var 1],Comb FuncCall ("Prelude","isLower") [Var 1]])),Func ("Prelude","isDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc '0')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc '9')]])),Func ("Prelude","isAlphaNum") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","isAlpha") [Var 1],Comb FuncCall ("Prelude","isDigit") [Var 1]])),Func ("Prelude","isBinDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc '0')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc '1')]])),Func ("Prelude","isOctDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc '0')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc '7')]])),Func ("Prelude","isHexDigit") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","isDigit") [Var 1],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc 'A')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc 'F')]],Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Char") [],Var 1],Lit (Charc 'a')],Comb FuncCall ("Prelude","_impl#<=#Prelude.Ord#Prelude.Char") [Var 1,Lit (Charc 'f')]]]])),Func ("Prelude","isSpace") 1 Private (FuncType (TCons ("Prelude","Char") []) (TCons ("Prelude","Bool") [])) (Rule [1] (Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc ' ')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '\t')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '\n')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '\r')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '\f')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '\v')],Comb FuncCall ("Prelude","||") [Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 1,Lit (Charc '\160')],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","elem") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb FuncCall ("Prelude","ord") [Var 1]],Comb ConsCall ("Prelude",":") [Lit (Intc 5760),Comb ConsCall ("Prelude",":") [Lit (Intc 6158),Comb ConsCall ("Prelude",":") [Lit (Intc 8192),Comb ConsCall ("Prelude",":") [Lit (Intc 8239),Comb ConsCall ("Prelude",":") [Lit (Intc 8287),Comb ConsCall ("Prelude",":") [Lit (Intc 12288),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]])),Func ("Prelude","uppermostCharacter") 0 Private (TCons ("Prelude","Int") []) (Rule [] (Lit (Intc 1114111))),Func ("Prelude","boundedEnumFrom") 3 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromTo#Prelude.Enum#Prelude.Int") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 2],Var 3]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","asTypeOf") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 1],Comb ConsCall ("Prelude","()") []]],Var 3]]]])),Func ("Prelude","boundedEnumFromThen") 4 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1,2,3,4] (Let [(5,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 2],Var 3]),(6,Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 2],Var 4])] (Case Rigid (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#>=#Prelude.Ord#Prelude.Int") [],Var 6],Var 5]) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") [],Var 5],Var 6],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","asTypeOf") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","maxBound") [Var 1],Comb ConsCall ("Prelude","()") []]],Var 3]]]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","map") [Comb FuncCall ("Prelude","toEnum") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#enumFromThenTo#Prelude.Enum#Prelude.Int") [],Var 5],Var 6],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","fromEnum") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","asTypeOf") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","minBound") [Var 1],Comb ConsCall ("Prelude","()") []]],Var 3]]]]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])]))),Func ("Prelude","asTypeOf") 0 Public (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","const") [])),Func ("Prelude","+.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Prelude","prim_Float_plus") [],Var 2],Var 1])),Func ("Prelude","prim_Float_plus") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "Prelude.prim_Float_plus"),Func ("Prelude","-.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Prelude","prim_Float_minus") [],Var 2],Var 1])),Func ("Prelude","prim_Float_minus") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "Prelude.prim_Float_minus"),Func ("Prelude","*.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Prelude","prim_Float_times") [],Var 2],Var 1])),Func ("Prelude","prim_Float_times") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "Prelude.prim_Float_times"),Func ("Prelude","/.") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (Rule [1,2] (Comb FuncCall ("Prelude","$#") [Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 2) ("Prelude","prim_Float_div") [],Var 2],Var 1])),Func ("Prelude","prim_Float_div") 2 Private (FuncType (TCons ("Prelude","Float") []) (FuncType (TCons ("Prelude","Float") []) (TCons ("Prelude","Float") []))) (External "Prelude.prim_Float_div"),Func ("Prelude","i2f") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (Rule [1] (Comb FuncCall ("Prelude","$#") [Comb (FuncPartCall 1) ("Prelude","prim_i2f") [],Var 1])),Func ("Prelude","prim_i2f") 1 Private (FuncType (TCons ("Prelude","Int") []) (TCons ("Prelude","Float") [])) (External "Prelude.prim_i2f"),Func ("Prelude","sequence") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb (FuncPartCall 2) ("Prelude","sequence._#lambda479") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 1],Comb ConsCall ("Prelude","[]") []]])),Func ("Prelude","sequence._#lambda479") 3 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Var 2],Comb (FuncPartCall 1) ("Prelude","sequence._#lambda479._#lambda480") [Var 1,Var 3]])),Func ("Prelude","sequence._#lambda479._#lambda480") 3 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]]) (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 1]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Var 2],Comb (FuncPartCall 1) ("Prelude","sequence._#lambda479._#lambda480._#lambda481") [Var 3,Var 1]])),Func ("Prelude","sequence._#lambda479._#lambda480._#lambda481") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (TCons ("Prelude","Apply") [TVar 1,TCons ("Prelude","[]") [TVar 0]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 2],Comb ConsCall ("Prelude",":") [Var 1,Var 3]])),Func ("Prelude","sequence_") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Apply") [TVar 0,TVar 1]]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","foldr") [Comb FuncCall ("Prelude",">>") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 1],Comb ConsCall ("Prelude","()") []]])),Func ("Prelude","mapM") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","sequence") [Var 1],Comb (FuncPartCall 1) ("Prelude","map") [Var 2]])),Func ("Prelude","mapM_") 2 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (FuncType (TCons ("Prelude","[]") [TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [1,2] (Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","sequence_") [Var 1],Comb (FuncPartCall 1) ("Prelude","map") [Var 2]])),Func ("Prelude","foldM") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))) (FuncType (TVar 1) (FuncType (TCons ("Prelude","[]") [TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 1]))))) (Rule [1,2,3,4] (Case Flex (Var 4) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 1],Var 3]),Branch (Pattern ("Prelude",":") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 2,Var 3],Var 5]],Comb (FuncPartCall 1) ("Prelude","foldM._#lambda482") [Var 6,Var 1,Var 2]])])),Func ("Prelude","foldM._#lambda482") 4 Private (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 0) (TCons ("Prelude","Apply") [TVar 1,TVar 2]))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 2]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","foldM") [Var 2,Var 3,Var 4,Var 1])),Func ("Prelude","liftM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Var 3],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","return") [Var 1],Var 2]])),Func ("Prelude","liftM2") 4 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (FuncType (TVar 1) (FuncType (TVar 2) (TVar 3))) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))) (Rule [1,2,3,4] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Var 3],Comb (FuncPartCall 1) ("Prelude","liftM2._#lambda485") [Var 1,Var 4,Var 2]])),Func ("Prelude","liftM2._#lambda485") 4 Private (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 2) (FuncType (TVar 1) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 0,TVar 3]))))) (Rule [1,2,3,4] (Let [(5,Var 4)] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude",">>=") [Var 1],Var 2],Comb (FuncPartCall 1) ("Prelude","liftM2._#lambda485._#lambda487") [Var 5,Var 1,Var 3]]))),Func ("Prelude","liftM2._#lambda485._#lambda487") 4 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 1]) (FuncType (FuncType (TVar 0) (FuncType (TVar 2) (TVar 3))) (FuncType (TVar 2) (TCons ("Prelude","Apply") [TVar 1,TVar 3]))))) (Rule [1,2,3,4] (Let [(5,Var 4)] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Var 3,Var 1],Var 5]]))),Func ("Prelude","forM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","[]") [TVar 2]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapM") [Var 1,Var 3],Var 2])),Func ("Prelude","forM_") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","mapM_") [Var 1,Var 3],Var 2])),Func ("Prelude","unlessM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 1],Comb ConsCall ("Prelude","()") []]),Branch (Pattern ("Prelude","False") []) (Var 3)])),Func ("Prelude","whenM") 3 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []]) (TCons ("Prelude","Apply") [TVar 0,TCons ("Prelude","()") []])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","True") []) (Var 3),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","return") [Var 1],Comb ConsCall ("Prelude","()") []])])),Func ("Prelude","==") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Eq") [2,3]) (Var 2)])),Func ("Prelude","/=") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Eq") [2,3]) (Var 3)])),Func ("Prelude","_super#Prelude.Ord#Prelude.Eq") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 2)])),Func ("Prelude","compare") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Ordering") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 3)])),Func ("Prelude","<=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 4)])),Func ("Prelude",">=") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 5)])),Func ("Prelude","<") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 6)])),Func ("Prelude",">") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","Bool") [])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 7)])),Func ("Prelude","min") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 8)])),Func ("Prelude","max") 1 Public (FuncType (TCons ("Prelude","_Dict#Ord") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Ord") [2,3,4,5,6,7,8,9]) (Var 9)])),Func ("Prelude","show") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Show") [2,3,4]) (Var 2)])),Func ("Prelude","showsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Show") [2,3,4]) (Var 3)])),Func ("Prelude","showList") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Show") [2,3,4]) (Var 4)])),Func ("Prelude","readsPrec") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Read") [2,3]) (Var 2)])),Func ("Prelude","readList") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Read") [2,3]) (Var 3)])),Func ("Prelude","minBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Bounded") [2,3]) (Var 2)])),Func ("Prelude","maxBound") 1 Public (FuncType (TCons ("Prelude","_Dict#Bounded") [TVar 0]) (FuncType (TCons ("Prelude","()") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Bounded") [2,3]) (Var 3)])),Func ("Prelude","succ") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 2)])),Func ("Prelude","pred") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 3)])),Func ("Prelude","toEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 4)])),Func ("Prelude","fromEnum") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","Int") []))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 5)])),Func ("Prelude","enumFrom") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 6)])),Func ("Prelude","enumFromThen") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 7)])),Func ("Prelude","enumFromTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 8)])),Func ("Prelude","enumFromThenTo") 1 Public (FuncType (TCons ("Prelude","_Dict#Enum") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","[]") [TVar 0]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Enum") [2,3,4,5,6,7,8,9]) (Var 9)])),Func ("Prelude","+") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 2)])),Func ("Prelude","-") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 3)])),Func ("Prelude","*") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 4)])),Func ("Prelude","negate") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 5)])),Func ("Prelude","abs") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 6)])),Func ("Prelude","signum") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 7)])),Func ("Prelude","fromInt") 1 Public (FuncType (TCons ("Prelude","_Dict#Num") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Num") [2,3,4,5,6,7,8]) (Var 8)])),Func ("Prelude","_super#Prelude.Fractional#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (TCons ("Prelude","_Dict#Num") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 2)])),Func ("Prelude","/") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 3)])),Func ("Prelude","recip") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TVar 0) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 4)])),Func ("Prelude","fromFloat") 1 Public (FuncType (TCons ("Prelude","_Dict#Fractional") [TVar 0]) (FuncType (TCons ("Prelude","Float") []) (TVar 0))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Fractional") [2,3,4,5]) (Var 5)])),Func ("Prelude","_super#Prelude.Real#Prelude.Num") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (TCons ("Prelude","_Dict#Num") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Real") [2,3]) (Var 2)])),Func ("Prelude","_super#Prelude.Real#Prelude.Ord") 1 Public (FuncType (TCons ("Prelude","_Dict#Real") [TVar 0]) (TCons ("Prelude","_Dict#Ord") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Real") [2,3]) (Var 3)])),Func ("Prelude","_super#Prelude.Integral#Prelude.Real") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (TCons ("Prelude","_Dict#Real") [TVar 0])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 2)])),Func ("Prelude","div") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 3)])),Func ("Prelude","mod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 4)])),Func ("Prelude","quot") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 5)])),Func ("Prelude","rem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TVar 0)))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 6)])),Func ("Prelude","divMod") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 7)])),Func ("Prelude","quotRem") 1 Public (FuncType (TCons ("Prelude","_Dict#Integral") [TVar 0]) (FuncType (TVar 0) (FuncType (TVar 0) (TCons ("Prelude","(,)") [TVar 0,TVar 0])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Integral") [2,3,4,5,6,7,8]) (Var 8)])),Func ("Prelude","fmap") 1 Public (FuncType (TCons ("Prelude","_Dict#Functor") [TVar 0]) (ForallType [1,2] (FuncType (FuncType (TVar 1) (TVar 2)) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Functor") [2]) (Var 2)])),Func ("Prelude",">>=") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 2])) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 2)])),Func ("Prelude",">>") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1,2] (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 1]) (FuncType (TCons ("Prelude","Apply") [TVar 0,TVar 2]) (TCons ("Prelude","Apply") [TVar 0,TVar 2]))))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 3)])),Func ("Prelude","return") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1] (FuncType (TVar 1) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 4)])),Func ("Prelude","fail") 1 Public (FuncType (TCons ("Prelude","_Dict#Monad") [TVar 0]) (ForallType [1] (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","Apply") [TVar 0,TVar 1])))) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","_Dict#Monad") [2,3,4,5]) (Var 5)]))] [Op ("Prelude","!!") InfixlOp 9,Op ("Prelude","++") InfixrOp 5,Op ("Prelude","=:=") InfixOp 4,Op ("Prelude","=:<=") InfixOp 4,Op ("Prelude","&&") InfixrOp 3,Op ("Prelude","||") InfixrOp 2,Op ("Prelude","$") InfixrOp 0,Op ("Prelude","$!") InfixrOp 0,Op ("Prelude","$!!") InfixrOp 0,Op ("Prelude","$#") InfixrOp 0,Op ("Prelude","$##") InfixrOp 0,Op ("Prelude","seq") InfixrOp 0,Op ("Prelude","&") InfixrOp 0,Op ("Prelude","&>") InfixrOp 0,Op ("Prelude","?") InfixrOp 0]