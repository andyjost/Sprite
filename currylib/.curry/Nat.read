
module "Nat"
  import
    "Prelude"
  data "Nat.Nat"
    constructor "Nat.IHi" 0 0
    constructor "Nat.O" 1 1
    constructor "Nat.I" 1 2
  data "Nat.BinInt"
    constructor "Nat.Neg" 1 0
    constructor "Nat.Zero" 0 1
    constructor "Nat.Pos" 1 2
  function "Nat._inst#Prelude.Eq#Nat.Nat" 0
    code
      return
        Node "Prelude._Dict#Eq" (
          partial 2 (
            Node "Nat._impl#==#Prelude.Eq#Nat.Nat" ) ,
          Node "Nat._impl#/=#Prelude.Eq#Nat.Nat" )
  function "Nat._impl#==#Prelude.Eq#Nat.Nat" 2
    code
      declare_var 1 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat"),1)
      declare_var 2 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Nat._impl#==#Prelude.Eq#Nat.Nat_#A0" (
              reference_var 2 )
        "Nat.O" =>
          declare_var 5 IVar 1 (("Nat","O"),1)
          return
            Node "Nat._impl#==#Prelude.Eq#Nat.Nat_#A1" (
              reference_var 2 ,
              reference_var 5 )
        "Nat.I" =>
          declare_var 8 IVar 1 (("Nat","I"),1)
          return
            Node "Nat._impl#==#Prelude.Eq#Nat.Nat_#A2" (
              reference_var 2 ,
              reference_var 8 )
  function "Nat._impl#==#Prelude.Eq#Nat.Nat_#A2" 2
    code
      declare_var 2 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat_#A2"),1)
      declare_var 8 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat_#A2"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Prelude.False"
        "Nat.O" =>
          declare_var 9 IVar 2 (("Nat","O"),1)
          return
            Node "Prelude.False"
        "Nat.I" =>
          declare_var 10 IVar 2 (("Nat","I"),1)
          return
            Node "Nat._impl#==#Prelude.Eq#Nat.Nat" (
              reference_var 8 ,
              reference_var 10 )
  function "Nat._impl#==#Prelude.Eq#Nat.Nat_#A1" 2
    code
      declare_var 2 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat_#A1"),1)
      declare_var 5 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat_#A1"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Prelude.False"
        "Nat.O" =>
          declare_var 6 IVar 2 (("Nat","O"),1)
          return
            Node "Nat._impl#==#Prelude.Eq#Nat.Nat" (
              reference_var 5 ,
              reference_var 6 )
        "Nat.I" =>
          declare_var 7 IVar 2 (("Nat","I"),1)
          return
            Node "Prelude.False"
  function "Nat._impl#==#Prelude.Eq#Nat.Nat_#A0" 1
    code
      declare_var 2 ILhs (("Nat","_impl#==#Prelude.Eq#Nat.Nat_#A0"),1)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Prelude.True"
        "Nat.O" =>
          declare_var 3 IVar 2 (("Nat","O"),1)
          return
            Node "Prelude.False"
        "Nat.I" =>
          declare_var 4 IVar 2 (("Nat","I"),1)
          return
            Node "Prelude.False"
  function "Nat._impl#/=#Prelude.Eq#Nat.Nat" 0
    code
      return
        partial 2 (
          Node "Prelude._def#/=#Prelude.Eq" (
            Node "Nat._inst#Prelude.Eq#Nat.Nat" ) )
  function "Nat.cmpNat" 2
    code
      declare_var 1 ILhs (("Nat","cmpNat"),1)
      declare_var 2 ILhs (("Nat","cmpNat"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Nat.cmpNat_#A7" (
              reference_var 2 )
        "Nat.O" =>
          declare_var 5 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.cmpNat_#A8" (
              reference_var 2 ,
              reference_var 5 )
        "Nat.I" =>
          declare_var 9 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.cmpNat_#A9" (
              reference_var 2 ,
              reference_var 9 )
  function "Nat.cmpNat_#A9" 2
    code
      declare_var 2 ILhs (("Nat","cmpNat_#A9"),1)
      declare_var 9 ILhs (("Nat","cmpNat_#A9"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Prelude.GT"
        "Nat.O" =>
          declare_var 10 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.cmpNat_#A6" (
              reference_var 9 ,
              reference_var 10 )
        "Nat.I" =>
          declare_var 12 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.cmpNat" (
              reference_var 9 ,
              reference_var 12 )
  function "Nat.cmpNat_#A8" 2
    code
      declare_var 2 ILhs (("Nat","cmpNat_#A8"),1)
      declare_var 5 ILhs (("Nat","cmpNat_#A8"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Prelude.GT"
        "Nat.O" =>
          declare_var 6 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.cmpNat" (
              reference_var 5 ,
              reference_var 6 )
        "Nat.I" =>
          declare_var 7 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.cmpNat_#A5" (
              reference_var 5 ,
              reference_var 7 )
  function "Nat.cmpNat_#A7" 1
    code
      declare_var 2 ILhs (("Nat","cmpNat_#A7"),1)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Prelude.EQ"
        "Nat.O" =>
          declare_var 3 IVar 2 (("Nat","O"),1)
          return
            Node "Prelude.LT"
        "Nat.I" =>
          declare_var 4 IVar 2 (("Nat","I"),1)
          return
            Node "Prelude.LT"
  function "Nat.cmpNat_#A6" 2
    code
      declare_var 9 ILhs (("Nat","cmpNat_#A6"),1)
      declare_var 10 ILhs (("Nat","cmpNat_#A6"),2)
      comment "[(11,[])]"
      declare_var 11 IBind
      assign 11
        Node "Nat.cmpNat" (
          reference_var 9 ,
          reference_var 10 )
      return
        Node "Nat.cmpNat_#A4" (
          reference_var 11 )
  function "Nat.cmpNat_#A5" 2
    code
      declare_var 5 ILhs (("Nat","cmpNat_#A5"),1)
      declare_var 7 ILhs (("Nat","cmpNat_#A5"),2)
      comment "[(8,[])]"
      declare_var 8 IBind
      assign 8
        Node "Nat.cmpNat" (
          reference_var 5 ,
          reference_var 7 )
      return
        Node "Nat.cmpNat_#A3" (
          reference_var 8 )
  function "Nat.cmpNat_#A4" 1
    code
      declare_var 11 ILhs (("Nat","cmpNat_#A4"),1)
      ATable 1 3 rigid
        reference_var 11
        "Prelude.LT" =>
          return
            reference_var 11
        "Prelude.EQ" =>
          return
            Node "Prelude.GT"
        "Prelude.GT" =>
          return
            reference_var 11
  function "Nat.cmpNat_#A3" 1
    code
      declare_var 8 ILhs (("Nat","cmpNat_#A3"),1)
      ATable 1 3 rigid
        reference_var 8
        "Prelude.LT" =>
          return
            reference_var 8
        "Prelude.EQ" =>
          return
            Node "Prelude.LT"
        "Prelude.GT" =>
          return
            reference_var 8
  function "Nat.succ" 1
    code
      declare_var 1 ILhs (("Nat","succ"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Nat.O" (
              Node "Nat.IHi" )
        "Nat.O" =>
          declare_var 2 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.I" (
              reference_var 2 )
        "Nat.I" =>
          declare_var 3 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.O" (
              Node "Nat.succ" (
                reference_var 3 ) )
  function "Nat.pred" 1
    code
      declare_var 1 ILhs (("Nat","pred"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Prelude.failed"
        "Nat.O" =>
          declare_var 2 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.pred_#A10" (
              reference_var 2 )
        "Nat.I" =>
          declare_var 5 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.O" (
              reference_var 5 )
  function "Nat.pred_#A10" 1
    code
      declare_var 2 ILhs (("Nat","pred_#A10"),1)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Nat.IHi"
        "Nat.O" =>
          declare_var 3 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.I" (
              Node "Nat.pred" (
                reference_var 2 ) )
        "Nat.I" =>
          declare_var 4 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.I" (
              Node "Nat.O" (
                reference_var 4 ) )
  function "Nat.+^" 2
    code
      declare_var 1 ILhs (("Nat","+^"),1)
      declare_var 2 ILhs (("Nat","+^"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Nat.succ" (
              reference_var 2 )
        "Nat.O" =>
          declare_var 3 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.+^_#A11" (
              reference_var 2 ,
              reference_var 3 )
        "Nat.I" =>
          declare_var 6 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.+^_#A12" (
              reference_var 2 ,
              reference_var 6 )
  function "Nat.+^_#A12" 2
    code
      declare_var 2 ILhs (("Nat","+^_#A12"),1)
      declare_var 6 ILhs (("Nat","+^_#A12"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Nat.O" (
              Node "Nat.succ" (
                reference_var 6 ) )
        "Nat.O" =>
          declare_var 7 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.I" (
              Node "Nat.+^" (
                reference_var 6 ,
                reference_var 7 ) )
        "Nat.I" =>
          declare_var 8 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.O" (
              Node "Nat.+^" (
                Node "Nat.succ" (
                  reference_var 6 ) ,
                reference_var 8 ) )
  function "Nat.+^_#A11" 2
    code
      declare_var 2 ILhs (("Nat","+^_#A11"),1)
      declare_var 3 ILhs (("Nat","+^_#A11"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Nat.I" (
              reference_var 3 )
        "Nat.O" =>
          declare_var 4 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.O" (
              Node "Nat.+^" (
                reference_var 3 ,
                reference_var 4 ) )
        "Nat.I" =>
          declare_var 5 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.I" (
              Node "Nat.+^" (
                reference_var 3 ,
                reference_var 5 ) )
  function "Nat.-^" 2
    code
      declare_var 1 ILhs (("Nat","-^"),1)
      declare_var 2 ILhs (("Nat","-^"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Nat.inc" (
              Node "Nat.Neg" (
                reference_var 2 ) )
        "Nat.O" =>
          declare_var 3 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.-^_#A13" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 3 )
        "Nat.I" =>
          declare_var 6 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.-^_#A14" (
              reference_var 2 ,
              reference_var 6 )
  function "Nat.-^_#A14" 2
    code
      declare_var 2 ILhs (("Nat","-^_#A14"),1)
      declare_var 6 ILhs (("Nat","-^_#A14"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Nat.Pos" (
              Node "Nat.O" (
                reference_var 6 ) )
        "Nat.O" =>
          declare_var 7 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.inc" (
              Node "Nat.mult2" (
                Node "Nat.-^" (
                  reference_var 6 ,
                  reference_var 7 ) ) )
        "Nat.I" =>
          declare_var 8 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.mult2" (
              Node "Nat.-^" (
                reference_var 6 ,
                reference_var 8 ) )
  function "Nat.-^_#A13" 3
    code
      declare_var 1 ILhs (("Nat","-^_#A13"),1)
      declare_var 2 ILhs (("Nat","-^_#A13"),2)
      declare_var 3 ILhs (("Nat","-^_#A13"),3)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Nat.Pos" (
              Node "Nat.pred" (
                reference_var 1 ) )
        "Nat.O" =>
          declare_var 4 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.mult2" (
              Node "Nat.-^" (
                reference_var 3 ,
                reference_var 4 ) )
        "Nat.I" =>
          declare_var 5 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.dec" (
              Node "Nat.mult2" (
                Node "Nat.-^" (
                  reference_var 3 ,
                  reference_var 5 ) ) )
  function "Nat.mult2" 1
    code
      declare_var 1 ILhs (("Nat","mult2"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 3 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.O" (
                reference_var 3 ) )
        "Nat.Zero" =>
          return
            Node "Nat.Zero"
        "Nat.Pos" =>
          declare_var 2 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.O" (
                reference_var 2 ) )
  function "Nat.*^" 2
    code
      declare_var 1 ILhs (("Nat","*^"),1)
      declare_var 2 ILhs (("Nat","*^"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            reference_var 2
        "Nat.O" =>
          declare_var 3 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.O" (
              Node "Nat.*^" (
                reference_var 3 ,
                reference_var 2 ) )
        "Nat.I" =>
          declare_var 4 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.+^" (
              reference_var 2 ,
              Node "Nat.O" (
                Node "Nat.*^" (
                  reference_var 4 ,
                  reference_var 2 ) ) )
  function "Nat.div2" 1
    code
      declare_var 1 ILhs (("Nat","div2"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Prelude.failed"
        "Nat.O" =>
          declare_var 2 IVar 1 (("Nat","O"),1)
          return
            reference_var 2
        "Nat.I" =>
          declare_var 3 IVar 1 (("Nat","I"),1)
          return
            reference_var 3
  function "Nat.mod2" 1
    code
      declare_var 1 ILhs (("Nat","mod2"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Nat.Pos" (
              Node "Nat.IHi" )
        "Nat.O" =>
          declare_var 2 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.Zero"
        "Nat.I" =>
          declare_var 3 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.IHi" )
  function "Nat.quotRemNat" 2
    code
      declare_var 1 ILhs (("Nat","quotRemNat"),1)
      declare_var 2 ILhs (("Nat","quotRemNat"),2)
      return
        Node "Nat.quotRemNat_#B0" (
          Node "Nat._impl#==#Prelude.Eq#Nat.Nat" (
            reference_var 2 ,
            Node "Nat.IHi" ) ,
          reference_var 1 ,
          reference_var 2 )
  function "Nat.quotRemNat_#B0" 3
    code
      declare_var 3 ILhs (("Nat","quotRemNat_#B0"),1)
      declare_var 1 ILhs (("Nat","quotRemNat_#B0"),2)
      declare_var 2 ILhs (("Nat","quotRemNat_#B0"),3)
      ATable 1 2 rigid
        reference_var 3
        "Prelude.False" =>
          return
            Node "Nat.quotRemNat_#A22" (
              reference_var 1 ,
              reference_var 2 )
        "Prelude.True" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Pos" (
                reference_var 1 ) ,
              Node "Nat.Zero" )
  function "Nat.quotRemNat_#A22" 2
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A22"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A22"),2)
      return
        Node "Nat.quotRemNat_#A22_#B2" (
          Node "Nat._impl#==#Prelude.Eq#Nat.Nat" (
            reference_var 1 ,
            Node "Nat.IHi" ) ,
          reference_var 1 ,
          reference_var 2 )
  function "Nat.quotRemNat_#A22_#B2" 3
    code
      declare_var 3 ILhs (("Nat","quotRemNat_#A22_#B2"),1)
      declare_var 1 ILhs (("Nat","quotRemNat_#A22_#B2"),2)
      declare_var 2 ILhs (("Nat","quotRemNat_#A22_#B2"),3)
      ATable 1 2 rigid
        reference_var 3
        "Prelude.False" =>
          return
            Node "Nat.quotRemNat_#A21" (
              reference_var 1 ,
              reference_var 2 )
        "Prelude.True" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Zero" ,
              Node "Nat.Pos" (
                Node "Nat.IHi" ) )
  function "Nat.quotRemNat_#A21" 2
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A21"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A21"),2)
      return
        Node "Nat.quotRemNat_#A21_#B4" (
          Node "Prelude.otherwise" ,
          reference_var 1 ,
          reference_var 2 )
  function "Nat.quotRemNat_#A21_#B4" 3
    code
      declare_var 3 ILhs (("Nat","quotRemNat_#A21_#B4"),1)
      declare_var 1 ILhs (("Nat","quotRemNat_#A21_#B4"),2)
      declare_var 2 ILhs (("Nat","quotRemNat_#A21_#B4"),3)
      ATable 1 2 rigid
        reference_var 3
        "Prelude.False" =>
          return
            Node "Prelude.failed"
        "Prelude.True" =>
          return
            Node "Nat.quotRemNat_#A20" (
              reference_var 1 ,
              reference_var 2 )
  function "Nat.quotRemNat_#A20" 2
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A20"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A20"),2)
      return
        Node "Nat.quotRemNat_#A20_#B6" (
          Node "Nat.cmpNat" (
            reference_var 1 ,
            reference_var 2 ) ,
          reference_var 1 ,
          reference_var 2 )
  function "Nat.quotRemNat_#A20_#B6" 3
    code
      declare_var 3 ILhs (("Nat","quotRemNat_#A20_#B6"),1)
      declare_var 1 ILhs (("Nat","quotRemNat_#A20_#B6"),2)
      declare_var 2 ILhs (("Nat","quotRemNat_#A20_#B6"),3)
      ATable 1 3 rigid
        reference_var 3
        "Prelude.LT" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Zero" ,
              Node "Nat.Pos" (
                reference_var 1 ) )
        "Prelude.EQ" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Pos" (
                Node "Nat.IHi" ) ,
              Node "Nat.Zero" )
        "Prelude.GT" =>
          return
            Node "Nat.quotRemNat_#A19" (
              reference_var 1 ,
              reference_var 2 )
  function "Nat.quotRemNat_#A19" 2
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A19"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A19"),2)
      return
        Node "Nat.quotRemNat_#A19_#B8" (
          Node "Nat.quotRemNat" (
            Node "Nat.div2" (
              reference_var 1 ) ,
            reference_var 2 ) ,
          reference_var 1 ,
          reference_var 2 )
  function "Nat.quotRemNat_#A19_#B8" 3
    code
      declare_var 5 ILhs (("Nat","quotRemNat_#A19_#B8"),1)
      declare_var 1 ILhs (("Nat","quotRemNat_#A19_#B8"),2)
      declare_var 2 ILhs (("Nat","quotRemNat_#A19_#B8"),3)
      ATable 1 1 rigid
        reference_var 5
        "Prelude.(,)" =>
          declare_var 3 IVar 5 (("Prelude","(,)"),1)
          declare_var 4 IVar 5 (("Prelude","(,)"),2)
          return
            Node "Nat.quotRemNat_#A18" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 3 ,
              reference_var 4 )
  function "Nat.quotRemNat_#A18" 4
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A18"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A18"),2)
      declare_var 3 ILhs (("Nat","quotRemNat_#A18"),3)
      declare_var 4 ILhs (("Nat","quotRemNat_#A18"),4)
      ATable 1 3 rigid
        reference_var 3
        "Nat.Neg" =>
          declare_var 5 IVar 3 (("Nat","Neg"),1)
          return
            Node "Prelude.error" (
              Node "Prelude.:" (
                char 'q' ,
                Node "Prelude.:" (
                  char 'u' ,
                  Node "Prelude.:" (
                    char 'o' ,
                    Node "Prelude.:" (
                      char 't' ,
                      Node "Prelude.:" (
                        char 'R' ,
                        Node "Prelude.:" (
                          char 'e' ,
                          Node "Prelude.:" (
                            char 'm' ,
                            Node "Prelude.:" (
                              char 'N' ,
                              Node "Prelude.:" (
                                char 'a' ,
                                Node "Prelude.:" (
                                  char 't' ,
                                  Node "Prelude.:" (
                                    char ':' ,
                                    Node "Prelude.:" (
                                      char ' ' ,
                                      Node "Prelude.:" (
                                        char 'n' ,
                                        Node "Prelude.:" (
                                          char 'e' ,
                                          Node "Prelude.:" (
                                            char 'g' ,
                                            Node "Prelude.:" (
                                              char 'a' ,
                                              Node "Prelude.:" (
                                                char 't' ,
                                                Node "Prelude.:" (
                                                  char 'i' ,
                                                  Node "Prelude.:" (
                                                    char 'v' ,
                                                    Node "Prelude.:" (
                                                      char 'e' ,
                                                      Node "Prelude.:" (
                                                        char ' ' ,
                                                        Node "Prelude.:" (
                                                          char 'q' ,
                                                          Node "Prelude.:" (
                                                            char 'u' ,
                                                            Node "Prelude.:" (
                                                              char 'o' ,
                                                              Node "Prelude.:" (
                                                                char 't' ,
                                                                Node "Prelude.:" (
                                                                  char 'i' ,
                                                                  Node "Prelude.:" (
                                                                    char 'e' ,
                                                                    Node "Prelude.:" (
                                                                      char 'n' ,
                                                                      Node "Prelude.:" (
                                                                        char 't' ,
                                                                        Node "Prelude.[]" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Pos" (
                Node "Nat.IHi" ) ,
              Node "Nat.-^" (
                reference_var 1 ,
                reference_var 2 ) )
        "Nat.Pos" =>
          declare_var 6 IVar 3 (("Nat","Pos"),1)
          return
            Node "Nat.quotRemNat_#A17" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 4 ,
              reference_var 6 )
  function "Nat.quotRemNat_#A17" 4
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A17"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A17"),2)
      declare_var 4 ILhs (("Nat","quotRemNat_#A17"),3)
      declare_var 6 ILhs (("Nat","quotRemNat_#A17"),4)
      ATable 1 3 rigid
        reference_var 4
        "Nat.Neg" =>
          declare_var 7 IVar 4 (("Nat","Neg"),1)
          return
            Node "Prelude.error" (
              Node "Prelude.:" (
                char 'q' ,
                Node "Prelude.:" (
                  char 'u' ,
                  Node "Prelude.:" (
                    char 'o' ,
                    Node "Prelude.:" (
                      char 't' ,
                      Node "Prelude.:" (
                        char 'R' ,
                        Node "Prelude.:" (
                          char 'e' ,
                          Node "Prelude.:" (
                            char 'm' ,
                            Node "Prelude.:" (
                              char 'N' ,
                              Node "Prelude.:" (
                                char 'a' ,
                                Node "Prelude.:" (
                                  char 't' ,
                                  Node "Prelude.:" (
                                    char ':' ,
                                    Node "Prelude.:" (
                                      char ' ' ,
                                      Node "Prelude.:" (
                                        char 'n' ,
                                        Node "Prelude.:" (
                                          char 'e' ,
                                          Node "Prelude.:" (
                                            char 'g' ,
                                            Node "Prelude.:" (
                                              char 'a' ,
                                              Node "Prelude.:" (
                                                char 't' ,
                                                Node "Prelude.:" (
                                                  char 'i' ,
                                                  Node "Prelude.:" (
                                                    char 'v' ,
                                                    Node "Prelude.:" (
                                                      char 'e' ,
                                                      Node "Prelude.:" (
                                                        char ' ' ,
                                                        Node "Prelude.:" (
                                                          char 'r' ,
                                                          Node "Prelude.:" (
                                                            char 'e' ,
                                                            Node "Prelude.:" (
                                                              char 'm' ,
                                                              Node "Prelude.:" (
                                                                char 'a' ,
                                                                Node "Prelude.:" (
                                                                  char 'i' ,
                                                                  Node "Prelude.:" (
                                                                    char 'n' ,
                                                                    Node "Prelude.:" (
                                                                      char 'd' ,
                                                                      Node "Prelude.:" (
                                                                        char 'e' ,
                                                                        Node "Prelude.:" (
                                                                          char 'r' ,
                                                                          Node "Prelude.[]" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Pos" (
                Node "Nat.O" (
                  reference_var 6 ) ) ,
              Node "Nat.mod2" (
                reference_var 1 ) )
        "Nat.Pos" =>
          declare_var 8 IVar 4 (("Nat","Pos"),1)
          return
            Node "Nat.quotRemNat_#A16" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 6 ,
              reference_var 8 )
  function "Nat.quotRemNat_#A16" 4
    code
      declare_var 1 ILhs (("Nat","quotRemNat_#A16"),1)
      declare_var 2 ILhs (("Nat","quotRemNat_#A16"),2)
      declare_var 6 ILhs (("Nat","quotRemNat_#A16"),3)
      declare_var 8 ILhs (("Nat","quotRemNat_#A16"),4)
      return
        Node "Nat.quotRemNat_#A16_#B10" (
          Node "Nat.quotRemNat" (
            Node "Nat.quotRemNat.shift.104" (
              reference_var 1 ,
              reference_var 8 ) ,
            reference_var 2 ) ,
          reference_var 6 )
  function "Nat.quotRemNat_#A16_#B10" 2
    code
      declare_var 11 ILhs (("Nat","quotRemNat_#A16_#B10"),1)
      declare_var 6 ILhs (("Nat","quotRemNat_#A16_#B10"),2)
      ATable 1 1 rigid
        reference_var 11
        "Prelude.(,)" =>
          declare_var 9 IVar 11 (("Prelude","(,)"),1)
          declare_var 10 IVar 11 (("Prelude","(,)"),2)
          return
            Node "Nat.quotRemNat_#A15" (
              reference_var 6 ,
              reference_var 9 ,
              reference_var 10 )
  function "Nat.quotRemNat_#A15" 3
    code
      declare_var 6 ILhs (("Nat","quotRemNat_#A15"),1)
      declare_var 9 ILhs (("Nat","quotRemNat_#A15"),2)
      declare_var 10 ILhs (("Nat","quotRemNat_#A15"),3)
      ATable 1 3 rigid
        reference_var 9
        "Nat.Neg" =>
          declare_var 11 IVar 9 (("Nat","Neg"),1)
          return
            Node "Prelude.error" (
              Node "Prelude.:" (
                char 'q' ,
                Node "Prelude.:" (
                  char 'u' ,
                  Node "Prelude.:" (
                    char 'o' ,
                    Node "Prelude.:" (
                      char 't' ,
                      Node "Prelude.:" (
                        char 'R' ,
                        Node "Prelude.:" (
                          char 'e' ,
                          Node "Prelude.:" (
                            char 'm' ,
                            Node "Prelude.:" (
                              char 'N' ,
                              Node "Prelude.:" (
                                char 'a' ,
                                Node "Prelude.:" (
                                  char 't' ,
                                  Node "Prelude.:" (
                                    char ':' ,
                                    Node "Prelude.:" (
                                      char ' ' ,
                                      Node "Prelude.:" (
                                        char 'n' ,
                                        Node "Prelude.:" (
                                          char 'e' ,
                                          Node "Prelude.:" (
                                            char 'g' ,
                                            Node "Prelude.:" (
                                              char 'a' ,
                                              Node "Prelude.:" (
                                                char 't' ,
                                                Node "Prelude.:" (
                                                  char 'i' ,
                                                  Node "Prelude.:" (
                                                    char 'v' ,
                                                    Node "Prelude.:" (
                                                      char 'e' ,
                                                      Node "Prelude.:" (
                                                        char ' ' ,
                                                        Node "Prelude.:" (
                                                          char 'q' ,
                                                          Node "Prelude.:" (
                                                            char 'u' ,
                                                            Node "Prelude.:" (
                                                              char 'o' ,
                                                              Node "Prelude.:" (
                                                                char 't' ,
                                                                Node "Prelude.:" (
                                                                  char 'i' ,
                                                                  Node "Prelude.:" (
                                                                    char 'e' ,
                                                                    Node "Prelude.:" (
                                                                      char 'n' ,
                                                                      Node "Prelude.:" (
                                                                        char 't' ,
                                                                        Node "Prelude.[]" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Pos" (
                Node "Nat.O" (
                  reference_var 6 ) ) ,
              reference_var 10 )
        "Nat.Pos" =>
          declare_var 12 IVar 9 (("Nat","Pos"),1)
          return
            Node "Prelude.(,)" (
              Node "Nat.Pos" (
                Node "Nat.+^" (
                  Node "Nat.O" (
                    reference_var 6 ) ,
                  reference_var 12 ) ) ,
              reference_var 10 )
  function "Nat.quotRemNat.shift.104" 2
    code
      declare_var 1 ILhs (("Nat","quotRemNat.shift.104"),1)
      declare_var 2 ILhs (("Nat","quotRemNat.shift.104"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.IHi" =>
          return
            Node "Prelude.error" (
              Node "Prelude.:" (
                char 'q' ,
                Node "Prelude.:" (
                  char 'u' ,
                  Node "Prelude.:" (
                    char 'o' ,
                    Node "Prelude.:" (
                      char 't' ,
                      Node "Prelude.:" (
                        char 'R' ,
                        Node "Prelude.:" (
                          char 'e' ,
                          Node "Prelude.:" (
                            char 'm' ,
                            Node "Prelude.:" (
                              char 'N' ,
                              Node "Prelude.:" (
                                char 'a' ,
                                Node "Prelude.:" (
                                  char 't' ,
                                  Node "Prelude.:" (
                                    char '.' ,
                                    Node "Prelude.:" (
                                      char 's' ,
                                      Node "Prelude.:" (
                                        char 'h' ,
                                        Node "Prelude.:" (
                                          char 'i' ,
                                          Node "Prelude.:" (
                                            char 'f' ,
                                            Node "Prelude.:" (
                                              char 't' ,
                                              Node "Prelude.:" (
                                                char ':' ,
                                                Node "Prelude.:" (
                                                  char ' ' ,
                                                  Node "Prelude.:" (
                                                    char 'I' ,
                                                    Node "Prelude.:" (
                                                      char 'H' ,
                                                      Node "Prelude.:" (
                                                        char 'i' ,
                                                        Node "Prelude.[]" ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
        "Nat.O" =>
          declare_var 3 IVar 1 (("Nat","O"),1)
          return
            Node "Nat.O" (
              reference_var 2 )
        "Nat.I" =>
          declare_var 4 IVar 1 (("Nat","I"),1)
          return
            Node "Nat.I" (
              reference_var 2 )
  function "Nat.lteqInteger" 2
    code
      declare_var 1 ILhs (("Nat","lteqInteger"),1)
      declare_var 2 ILhs (("Nat","lteqInteger"),2)
      return
        Node "Prelude.apply" (
          Node "Prelude.apply" (
            Node "Prelude._impl#/=#Prelude.Eq#Prelude.Ordering" ,
            Node "Nat.cmpInteger" (
              reference_var 1 ,
              reference_var 2 ) ) ,
          Node "Prelude.GT" )
  function "Nat.cmpInteger" 2
    code
      declare_var 1 ILhs (("Nat","cmpInteger"),1)
      declare_var 2 ILhs (("Nat","cmpInteger"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 8 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.cmpInteger_#A25" (
              reference_var 2 ,
              reference_var 8 )
        "Nat.Zero" =>
          return
            Node "Nat.cmpInteger_#A23" (
              reference_var 2 )
        "Nat.Pos" =>
          declare_var 5 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.cmpInteger_#A24" (
              reference_var 2 ,
              reference_var 5 )
  function "Nat.cmpInteger_#A25" 2
    code
      declare_var 2 ILhs (("Nat","cmpInteger_#A25"),1)
      declare_var 8 ILhs (("Nat","cmpInteger_#A25"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 10 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.cmpNat" (
              reference_var 10 ,
              reference_var 8 )
        "Nat.Zero" =>
          return
            Node "Prelude.LT"
        "Nat.Pos" =>
          declare_var 9 IVar 2 (("Nat","Pos"),1)
          return
            Node "Prelude.LT"
  function "Nat.cmpInteger_#A24" 2
    code
      declare_var 2 ILhs (("Nat","cmpInteger_#A24"),1)
      declare_var 5 ILhs (("Nat","cmpInteger_#A24"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 7 IVar 2 (("Nat","Neg"),1)
          return
            Node "Prelude.GT"
        "Nat.Zero" =>
          return
            Node "Prelude.GT"
        "Nat.Pos" =>
          declare_var 6 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.cmpNat" (
              reference_var 5 ,
              reference_var 6 )
  function "Nat.cmpInteger_#A23" 1
    code
      declare_var 2 ILhs (("Nat","cmpInteger_#A23"),1)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 4 IVar 2 (("Nat","Neg"),1)
          return
            Node "Prelude.GT"
        "Nat.Zero" =>
          return
            Node "Prelude.EQ"
        "Nat.Pos" =>
          declare_var 3 IVar 2 (("Nat","Pos"),1)
          return
            Node "Prelude.LT"
  function "Nat.neg" 1
    code
      declare_var 1 ILhs (("Nat","neg"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 3 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.Pos" (
              reference_var 3 )
        "Nat.Zero" =>
          return
            Node "Nat.Zero"
        "Nat.Pos" =>
          declare_var 2 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.Neg" (
              reference_var 2 )
  function "Nat.inc" 1
    code
      declare_var 1 ILhs (("Nat","inc"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 3 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.inc_#A26" (
              reference_var 3 )
        "Nat.Zero" =>
          return
            Node "Nat.Pos" (
              Node "Nat.IHi" )
        "Nat.Pos" =>
          declare_var 2 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.succ" (
                reference_var 2 ) )
  function "Nat.inc_#A26" 1
    code
      declare_var 3 ILhs (("Nat","inc_#A26"),1)
      ATable 1 3 flex
        reference_var 3
        "Nat.IHi" =>
          return
            Node "Nat.Zero"
        "Nat.O" =>
          declare_var 4 IVar 3 (("Nat","O"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.pred" (
                Node "Nat.O" (
                  reference_var 4 ) ) )
        "Nat.I" =>
          declare_var 5 IVar 3 (("Nat","I"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.O" (
                reference_var 5 ) )
  function "Nat.dec" 1
    code
      declare_var 1 ILhs (("Nat","dec"),1)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 5 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.succ" (
                reference_var 5 ) )
        "Nat.Zero" =>
          return
            Node "Nat.Neg" (
              Node "Nat.IHi" )
        "Nat.Pos" =>
          declare_var 2 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.dec_#A27" (
              reference_var 2 )
  function "Nat.dec_#A27" 1
    code
      declare_var 2 ILhs (("Nat","dec_#A27"),1)
      ATable 1 3 flex
        reference_var 2
        "Nat.IHi" =>
          return
            Node "Nat.Zero"
        "Nat.O" =>
          declare_var 3 IVar 2 (("Nat","O"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.pred" (
                Node "Nat.O" (
                  reference_var 3 ) ) )
        "Nat.I" =>
          declare_var 4 IVar 2 (("Nat","I"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.O" (
                reference_var 4 ) )
  function "Nat.+#" 2
    code
      declare_var 1 ILhs (("Nat","+#"),1)
      declare_var 2 ILhs (("Nat","+#"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 6 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.+#_#A29" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 6 )
        "Nat.Zero" =>
          return
            reference_var 2
        "Nat.Pos" =>
          declare_var 3 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.+#_#A28" (
              reference_var 1 ,
              reference_var 2 ,
              reference_var 3 )
  function "Nat.+#_#A29" 3
    code
      declare_var 1 ILhs (("Nat","+#_#A29"),1)
      declare_var 2 ILhs (("Nat","+#_#A29"),2)
      declare_var 6 ILhs (("Nat","+#_#A29"),3)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 8 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.+^" (
                reference_var 6 ,
                reference_var 8 ) )
        "Nat.Zero" =>
          return
            reference_var 1
        "Nat.Pos" =>
          declare_var 7 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.-^" (
              reference_var 7 ,
              reference_var 6 )
  function "Nat.+#_#A28" 3
    code
      declare_var 1 ILhs (("Nat","+#_#A28"),1)
      declare_var 2 ILhs (("Nat","+#_#A28"),2)
      declare_var 3 ILhs (("Nat","+#_#A28"),3)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 5 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.-^" (
              reference_var 3 ,
              reference_var 5 )
        "Nat.Zero" =>
          return
            reference_var 1
        "Nat.Pos" =>
          declare_var 4 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.+^" (
                reference_var 3 ,
                reference_var 4 ) )
  function "Nat.-#" 2
    code
      declare_var 1 ILhs (("Nat","-#"),1)
      declare_var 2 ILhs (("Nat","-#"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 4 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.+#" (
              reference_var 1 ,
              Node "Nat.Pos" (
                reference_var 4 ) )
        "Nat.Zero" =>
          return
            reference_var 1
        "Nat.Pos" =>
          declare_var 3 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.+#" (
              reference_var 1 ,
              Node "Nat.Neg" (
                reference_var 3 ) )
  function "Nat.*#" 2
    code
      declare_var 1 ILhs (("Nat","*#"),1)
      declare_var 2 ILhs (("Nat","*#"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 6 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.*#_#A31" (
              reference_var 2 ,
              reference_var 6 )
        "Nat.Zero" =>
          return
            Node "Nat.Zero"
        "Nat.Pos" =>
          declare_var 3 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.*#_#A30" (
              reference_var 2 ,
              reference_var 3 )
  function "Nat.*#_#A31" 2
    code
      declare_var 2 ILhs (("Nat","*#_#A31"),1)
      declare_var 6 ILhs (("Nat","*#_#A31"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 8 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.*^" (
                reference_var 6 ,
                reference_var 8 ) )
        "Nat.Zero" =>
          return
            Node "Nat.Zero"
        "Nat.Pos" =>
          declare_var 7 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.*^" (
                reference_var 6 ,
                reference_var 7 ) )
  function "Nat.*#_#A30" 2
    code
      declare_var 2 ILhs (("Nat","*#_#A30"),1)
      declare_var 3 ILhs (("Nat","*#_#A30"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 5 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.Neg" (
              Node "Nat.*^" (
                reference_var 3 ,
                reference_var 5 ) )
        "Nat.Zero" =>
          return
            Node "Nat.Zero"
        "Nat.Pos" =>
          declare_var 4 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.Pos" (
              Node "Nat.*^" (
                reference_var 3 ,
                reference_var 4 ) )
  function "Nat.quotRemInteger" 2
    code
      declare_var 1 ILhs (("Nat","quotRemInteger"),1)
      declare_var 2 ILhs (("Nat","quotRemInteger"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 9 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.quotRemInteger_#A36" (
              reference_var 1 ,
              reference_var 9 )
        "Nat.Zero" =>
          return
            Node "Prelude.failed"
        "Nat.Pos" =>
          declare_var 3 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.quotRemInteger_#A35" (
              reference_var 1 ,
              reference_var 3 )
  function "Nat.quotRemInteger_#A36" 2
    code
      declare_var 1 ILhs (("Nat","quotRemInteger_#A36"),1)
      declare_var 9 ILhs (("Nat","quotRemInteger_#A36"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 14 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.quotRemInteger_#A34" (
              reference_var 9 ,
              reference_var 14 )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Zero" ,
              Node "Nat.Zero" )
        "Nat.Pos" =>
          declare_var 10 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.quotRemInteger_#A33" (
              reference_var 9 ,
              reference_var 10 )
  function "Nat.quotRemInteger_#A35" 2
    code
      declare_var 1 ILhs (("Nat","quotRemInteger_#A35"),1)
      declare_var 3 ILhs (("Nat","quotRemInteger_#A35"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 5 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.quotRemInteger_#A32" (
              reference_var 3 ,
              reference_var 5 )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Zero" ,
              Node "Nat.Zero" )
        "Nat.Pos" =>
          declare_var 4 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.quotRemNat" (
              reference_var 4 ,
              reference_var 3 )
  function "Nat.quotRemInteger_#A34" 2
    code
      declare_var 9 ILhs (("Nat","quotRemInteger_#A34"),1)
      declare_var 14 ILhs (("Nat","quotRemInteger_#A34"),2)
      comment "[(15,[]),(16,[]),(17,[])]"
      declare_var 15 IBind
      assign 15
        Node "Nat.quotRemNat" (
          reference_var 14 ,
          reference_var 9 )
      declare_var 16 IBind
      assign 16
        Node "Nat.quotRemInteger._#selFP8#d" (
          reference_var 15 )
      declare_var 17 IBind
      assign 17
        Node "Nat.quotRemInteger._#selFP9#m" (
          reference_var 15 )
      return
        Node "Prelude.(,)" (
          reference_var 16 ,
          Node "Nat.neg" (
            reference_var 17 ) )
  function "Nat.quotRemInteger_#A33" 2
    code
      declare_var 9 ILhs (("Nat","quotRemInteger_#A33"),1)
      declare_var 10 ILhs (("Nat","quotRemInteger_#A33"),2)
      comment "[(11,[]),(12,[]),(13,[])]"
      declare_var 11 IBind
      assign 11
        Node "Nat.quotRemNat" (
          reference_var 10 ,
          reference_var 9 )
      declare_var 12 IBind
      assign 12
        Node "Nat.quotRemInteger._#selFP5#d" (
          reference_var 11 )
      declare_var 13 IBind
      assign 13
        Node "Nat.quotRemInteger._#selFP6#m" (
          reference_var 11 )
      return
        Node "Prelude.(,)" (
          Node "Nat.neg" (
            reference_var 12 ) ,
          reference_var 13 )
  function "Nat.quotRemInteger_#A32" 2
    code
      declare_var 3 ILhs (("Nat","quotRemInteger_#A32"),1)
      declare_var 5 ILhs (("Nat","quotRemInteger_#A32"),2)
      comment "[(6,[]),(7,[]),(8,[])]"
      declare_var 6 IBind
      assign 6
        Node "Nat.quotRemNat" (
          reference_var 5 ,
          reference_var 3 )
      declare_var 7 IBind
      assign 7
        Node "Nat.quotRemInteger._#selFP2#d" (
          reference_var 6 )
      declare_var 8 IBind
      assign 8
        Node "Nat.quotRemInteger._#selFP3#m" (
          reference_var 6 )
      return
        Node "Prelude.(,)" (
          Node "Nat.neg" (
            reference_var 7 ) ,
          Node "Nat.neg" (
            reference_var 8 ) )
  function "Nat.quotRemInteger._#selFP2#d" 1
    code
      declare_var 1 ILhs (("Nat","quotRemInteger._#selFP2#d"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "Nat.quotRemInteger._#selFP3#m" 1
    code
      declare_var 1 ILhs (("Nat","quotRemInteger._#selFP3#m"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "Nat.quotRemInteger._#selFP5#d" 1
    code
      declare_var 1 ILhs (("Nat","quotRemInteger._#selFP5#d"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "Nat.quotRemInteger._#selFP6#m" 1
    code
      declare_var 1 ILhs (("Nat","quotRemInteger._#selFP6#m"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "Nat.quotRemInteger._#selFP8#d" 1
    code
      declare_var 1 ILhs (("Nat","quotRemInteger._#selFP8#d"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "Nat.quotRemInteger._#selFP9#m" 1
    code
      declare_var 1 ILhs (("Nat","quotRemInteger._#selFP9#m"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "Nat.divModInteger" 2
    code
      declare_var 1 ILhs (("Nat","divModInteger"),1)
      declare_var 2 ILhs (("Nat","divModInteger"),2)
      ATable 1 3 flex
        reference_var 2
        "Nat.Neg" =>
          declare_var 12 IVar 2 (("Nat","Neg"),1)
          return
            Node "Nat.divModInteger_#A43" (
              reference_var 1 ,
              reference_var 12 )
        "Nat.Zero" =>
          return
            Node "Prelude.failed"
        "Nat.Pos" =>
          declare_var 3 IVar 2 (("Nat","Pos"),1)
          return
            Node "Nat.divModInteger_#A42" (
              reference_var 1 ,
              reference_var 3 )
  function "Nat.divModInteger_#A43" 2
    code
      declare_var 1 ILhs (("Nat","divModInteger_#A43"),1)
      declare_var 12 ILhs (("Nat","divModInteger_#A43"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 20 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.divModInteger_#A41" (
              reference_var 12 ,
              reference_var 20 )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Zero" ,
              Node "Nat.Zero" )
        "Nat.Pos" =>
          declare_var 13 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.divModInteger_#A40" (
              reference_var 12 ,
              reference_var 13 )
  function "Nat.divModInteger_#A42" 2
    code
      declare_var 1 ILhs (("Nat","divModInteger_#A42"),1)
      declare_var 3 ILhs (("Nat","divModInteger_#A42"),2)
      ATable 1 3 flex
        reference_var 1
        "Nat.Neg" =>
          declare_var 5 IVar 1 (("Nat","Neg"),1)
          return
            Node "Nat.divModInteger_#A39" (
              reference_var 3 ,
              reference_var 5 )
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.Zero" ,
              Node "Nat.Zero" )
        "Nat.Pos" =>
          declare_var 4 IVar 1 (("Nat","Pos"),1)
          return
            Node "Nat.quotRemNat" (
              reference_var 4 ,
              reference_var 3 )
  function "Nat.divModInteger_#A41" 2
    code
      declare_var 12 ILhs (("Nat","divModInteger_#A41"),1)
      declare_var 20 ILhs (("Nat","divModInteger_#A41"),2)
      comment "[(21,[]),(22,[]),(23,[])]"
      declare_var 21 IBind
      assign 21
        Node "Nat.quotRemNat" (
          reference_var 20 ,
          reference_var 12 )
      declare_var 22 IBind
      assign 22
        Node "Nat.divModInteger._#selFP17#d" (
          reference_var 21 )
      declare_var 23 IBind
      assign 23
        Node "Nat.divModInteger._#selFP18#m" (
          reference_var 21 )
      return
        Node "Prelude.(,)" (
          reference_var 22 ,
          Node "Nat.neg" (
            reference_var 23 ) )
  function "Nat.divModInteger_#A40" 2
    code
      declare_var 12 ILhs (("Nat","divModInteger_#A40"),1)
      declare_var 13 ILhs (("Nat","divModInteger_#A40"),2)
      comment "[(14,[]),(15,[]),(16,[]),(17,[])]"
      declare_var 14 IBind
      assign 14
        Node "Nat.quotRemNat" (
          reference_var 13 ,
          reference_var 12 )
      declare_var 15 IBind
      assign 15
        Node "Nat.divModInteger._#selFP14#d" (
          reference_var 14 )
      declare_var 16 IBind
      assign 16
        Node "Nat.divModInteger._#selFP15#m" (
          reference_var 14 )
      declare_var 17 IBind
      assign 17
        Node "Prelude.(,)" (
          Node "Nat.neg" (
            Node "Nat.inc" (
              reference_var 15 ) ) ,
          Node "Nat.-#" (
            reference_var 16 ,
            Node "Nat.Pos" (
              reference_var 12 ) ) )
      return
        Node "Nat.divModInteger_#A38" (
          reference_var 15 ,
          reference_var 16 ,
          reference_var 17 )
  function "Nat.divModInteger_#A39" 2
    code
      declare_var 3 ILhs (("Nat","divModInteger_#A39"),1)
      declare_var 5 ILhs (("Nat","divModInteger_#A39"),2)
      comment "[(6,[]),(7,[]),(8,[]),(9,[])]"
      declare_var 6 IBind
      assign 6
        Node "Nat.quotRemNat" (
          reference_var 5 ,
          reference_var 3 )
      declare_var 7 IBind
      assign 7
        Node "Nat.divModInteger._#selFP11#d" (
          reference_var 6 )
      declare_var 8 IBind
      assign 8
        Node "Nat.divModInteger._#selFP12#m" (
          reference_var 6 )
      declare_var 9 IBind
      assign 9
        Node "Prelude.(,)" (
          Node "Nat.neg" (
            Node "Nat.inc" (
              reference_var 7 ) ) ,
          Node "Nat.-#" (
            Node "Nat.Pos" (
              reference_var 3 ) ,
            reference_var 8 ) )
      return
        Node "Nat.divModInteger_#A37" (
          reference_var 7 ,
          reference_var 8 ,
          reference_var 9 )
  function "Nat.divModInteger_#A38" 3
    code
      declare_var 15 ILhs (("Nat","divModInteger_#A38"),1)
      declare_var 16 ILhs (("Nat","divModInteger_#A38"),2)
      declare_var 17 ILhs (("Nat","divModInteger_#A38"),3)
      ATable 1 3 rigid
        reference_var 16
        "Nat.Neg" =>
          declare_var 18 IVar 16 (("Nat","Neg"),1)
          return
            reference_var 17
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.neg" (
                reference_var 15 ) ,
              reference_var 16 )
        "Nat.Pos" =>
          declare_var 19 IVar 16 (("Nat","Pos"),1)
          return
            reference_var 17
  function "Nat.divModInteger_#A37" 3
    code
      declare_var 7 ILhs (("Nat","divModInteger_#A37"),1)
      declare_var 8 ILhs (("Nat","divModInteger_#A37"),2)
      declare_var 9 ILhs (("Nat","divModInteger_#A37"),3)
      ATable 1 3 rigid
        reference_var 8
        "Nat.Neg" =>
          declare_var 10 IVar 8 (("Nat","Neg"),1)
          return
            reference_var 9
        "Nat.Zero" =>
          return
            Node "Prelude.(,)" (
              Node "Nat.neg" (
                reference_var 7 ) ,
              reference_var 8 )
        "Nat.Pos" =>
          declare_var 11 IVar 8 (("Nat","Pos"),1)
          return
            reference_var 9
  function "Nat.divModInteger._#selFP11#d" 1
    code
      declare_var 1 ILhs (("Nat","divModInteger._#selFP11#d"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "Nat.divModInteger._#selFP12#m" 1
    code
      declare_var 1 ILhs (("Nat","divModInteger._#selFP12#m"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "Nat.divModInteger._#selFP14#d" 1
    code
      declare_var 1 ILhs (("Nat","divModInteger._#selFP14#d"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "Nat.divModInteger._#selFP15#m" 1
    code
      declare_var 1 ILhs (("Nat","divModInteger._#selFP15#m"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "Nat.divModInteger._#selFP17#d" 1
    code
      declare_var 1 ILhs (("Nat","divModInteger._#selFP17#d"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 2
  function "Nat.divModInteger._#selFP18#m" 1
    code
      declare_var 1 ILhs (("Nat","divModInteger._#selFP18#m"),1)
      ATable 1 1 flex
        reference_var 1
        "Prelude.(,)" =>
          declare_var 2 IVar 1 (("Prelude","(,)"),1)
          declare_var 3 IVar 1 (("Prelude","(,)"),2)
          return
            reference_var 3
  function "Nat.divInteger" 2
    code
      declare_var 1 ILhs (("Nat","divInteger"),1)
      declare_var 2 ILhs (("Nat","divInteger"),2)
      return
        Node "Prelude.fst" (
          Node "Nat.divModInteger" (
            reference_var 1 ,
            reference_var 2 ) )
  function "Nat.modInteger" 2
    code
      declare_var 1 ILhs (("Nat","modInteger"),1)
      declare_var 2 ILhs (("Nat","modInteger"),2)
      return
        Node "Prelude.snd" (
          Node "Nat.divModInteger" (
            reference_var 1 ,
            reference_var 2 ) )
  function "Nat.quotInteger" 2
    code
      declare_var 1 ILhs (("Nat","quotInteger"),1)
      declare_var 2 ILhs (("Nat","quotInteger"),2)
      return
        Node "Prelude.fst" (
          Node "Nat.quotRemInteger" (
            reference_var 1 ,
            reference_var 2 ) )
  function "Nat.remInteger" 2
    code
      declare_var 1 ILhs (("Nat","remInteger"),1)
      declare_var 2 ILhs (("Nat","remInteger"),2)
      return
        Node "Prelude.snd" (
          Node "Nat.quotRemInteger" (
            reference_var 1 ,
            reference_var 2 ) )
