Prog "Nat" ["Prelude"] [Type ("Nat","Nat") Public [] [Cons ("Nat","IHi") 0 Public [],Cons ("Nat","O") 1 Public [TCons ("Nat","Nat") []],Cons ("Nat","I") 1 Public [TCons ("Nat","Nat") []]],Type ("Nat","BinInt") Public [] [Cons ("Nat","Neg") 1 Public [TCons ("Nat","Nat") []],Cons ("Nat","Zero") 0 Public [],Cons ("Nat","Pos") 1 Public [TCons ("Nat","Nat") []]]] [Func ("Nat","_inst#Prelude.Eq#Nat.Nat") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Nat","Nat") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Nat","_impl#==#Prelude.Eq#Nat.Nat") [],Comb FuncCall ("Nat","_impl#/=#Prelude.Eq#Nat.Nat") []])),Func ("Nat","_impl#==#Prelude.Eq#Nat.Nat") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Nat","O") [3]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Nat","I") [4]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Nat","O") [5]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Nat","O") [6]) (Comb FuncCall ("Nat","_impl#==#Prelude.Eq#Nat.Nat") [Var 5,Var 6]),Branch (Pattern ("Nat","I") [7]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Nat","I") [8]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Nat","O") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Nat","I") [10]) (Comb FuncCall ("Nat","_impl#==#Prelude.Eq#Nat.Nat") [Var 8,Var 10])])])),Func ("Nat","_impl#/=#Prelude.Eq#Nat.Nat") 0 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Nat","_inst#Prelude.Eq#Nat.Nat") []])),Func ("Nat","cmpNat") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Nat","O") [3]) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Nat","I") [4]) (Comb ConsCall ("Prelude","LT") [])]),Branch (Pattern ("Nat","O") [5]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Nat","O") [6]) (Comb FuncCall ("Nat","cmpNat") [Var 5,Var 6]),Branch (Pattern ("Nat","I") [7]) (Let [(8,Comb FuncCall ("Nat","cmpNat") [Var 5,Var 7])] (Case Rigid (Var 8) [Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Prelude","LT") []) (Var 8),Branch (Pattern ("Prelude","GT") []) (Var 8)]))]),Branch (Pattern ("Nat","I") [9]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Nat","O") [10]) (Let [(11,Comb FuncCall ("Nat","cmpNat") [Var 9,Var 10])] (Case Rigid (Var 11) [Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Prelude","LT") []) (Var 11),Branch (Pattern ("Prelude","GT") []) (Var 11)])),Branch (Pattern ("Nat","I") [12]) (Comb FuncCall ("Nat","cmpNat") [Var 9,Var 12])])])),Func ("Nat","succ") 1 Public (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","Nat") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","O") [Comb ConsCall ("Nat","IHi") []]),Branch (Pattern ("Nat","O") [2]) (Comb ConsCall ("Nat","I") [Var 2]),Branch (Pattern ("Nat","I") [3]) (Comb ConsCall ("Nat","O") [Comb FuncCall ("Nat","succ") [Var 3]])])),Func ("Nat","pred") 1 Public (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","Nat") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Nat","O") [2]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","IHi") []),Branch (Pattern ("Nat","O") [3]) (Comb ConsCall ("Nat","I") [Comb FuncCall ("Nat","pred") [Var 2]]),Branch (Pattern ("Nat","I") [4]) (Comb ConsCall ("Nat","I") [Comb ConsCall ("Nat","O") [Var 4]])]),Branch (Pattern ("Nat","I") [5]) (Comb ConsCall ("Nat","O") [Var 5])])),Func ("Nat","+^") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","Nat") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb FuncCall ("Nat","succ") [Var 2]),Branch (Pattern ("Nat","O") [3]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","I") [Var 3]),Branch (Pattern ("Nat","O") [4]) (Comb ConsCall ("Nat","O") [Comb FuncCall ("Nat","+^") [Var 3,Var 4]]),Branch (Pattern ("Nat","I") [5]) (Comb ConsCall ("Nat","I") [Comb FuncCall ("Nat","+^") [Var 3,Var 5]])]),Branch (Pattern ("Nat","I") [6]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","O") [Comb FuncCall ("Nat","succ") [Var 6]]),Branch (Pattern ("Nat","O") [7]) (Comb ConsCall ("Nat","I") [Comb FuncCall ("Nat","+^") [Var 6,Var 7]]),Branch (Pattern ("Nat","I") [8]) (Comb ConsCall ("Nat","O") [Comb FuncCall ("Nat","+^") [Comb FuncCall ("Nat","succ") [Var 6],Var 8]])])])),Func ("Nat","-^") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb FuncCall ("Nat","inc") [Comb ConsCall ("Nat","Neg") [Var 2]]),Branch (Pattern ("Nat","O") [3]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","pred") [Var 1]]),Branch (Pattern ("Nat","O") [4]) (Comb FuncCall ("Nat","mult2") [Comb FuncCall ("Nat","-^") [Var 3,Var 4]]),Branch (Pattern ("Nat","I") [5]) (Comb FuncCall ("Nat","dec") [Comb FuncCall ("Nat","mult2") [Comb FuncCall ("Nat","-^") [Var 3,Var 5]]])]),Branch (Pattern ("Nat","I") [6]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","O") [Var 6]]),Branch (Pattern ("Nat","O") [7]) (Comb FuncCall ("Nat","inc") [Comb FuncCall ("Nat","mult2") [Comb FuncCall ("Nat","-^") [Var 6,Var 7]]]),Branch (Pattern ("Nat","I") [8]) (Comb FuncCall ("Nat","mult2") [Comb FuncCall ("Nat","-^") [Var 6,Var 8]])])])),Func ("Nat","mult2") 1 Public (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","Pos") [2]) (Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","O") [Var 2]]),Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","Neg") [3]) (Comb ConsCall ("Nat","Neg") [Comb ConsCall ("Nat","O") [Var 3]])])),Func ("Nat","*^") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","Nat") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Var 2),Branch (Pattern ("Nat","O") [3]) (Comb ConsCall ("Nat","O") [Comb FuncCall ("Nat","*^") [Var 3,Var 2]]),Branch (Pattern ("Nat","I") [4]) (Comb FuncCall ("Nat","+^") [Var 2,Comb ConsCall ("Nat","O") [Comb FuncCall ("Nat","*^") [Var 4,Var 2]]])])),Func ("Nat","div2") 1 Public (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","Nat") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Nat","O") [2]) (Var 2),Branch (Pattern ("Nat","I") [3]) (Var 3)])),Func ("Nat","mod2") 1 Public (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","IHi") []]),Branch (Pattern ("Nat","O") [2]) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","I") [3]) (Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","IHi") []])])),Func ("Nat","quotRemNat") 2 Public (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]))) (Rule [1,2] (Case Rigid (Comb FuncCall ("Nat","_impl#==#Prelude.Eq#Nat.Nat") [Var 2,Comb ConsCall ("Nat","IHi") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Pos") [Var 1],Comb ConsCall ("Nat","Zero") []]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Nat","_impl#==#Prelude.Eq#Nat.Nat") [Var 1,Comb ConsCall ("Nat","IHi") []]) [Branch (Pattern ("Prelude","True") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Zero") [],Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","IHi") []]]),Branch (Pattern ("Prelude","False") []) (Case Rigid (Comb FuncCall ("Prelude","otherwise") []) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Comb FuncCall ("Nat","cmpNat") [Var 1,Var 2]) [Branch (Pattern ("Prelude","EQ") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","IHi") []],Comb ConsCall ("Nat","Zero") []]),Branch (Pattern ("Prelude","LT") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Zero") [],Comb ConsCall ("Nat","Pos") [Var 1]]),Branch (Pattern ("Prelude","GT") []) (Case Rigid (Comb FuncCall ("Nat","quotRemNat") [Comb FuncCall ("Nat","div2") [Var 1],Var 2]) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Nat","Neg") [5]) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","IHi") []],Comb FuncCall ("Nat","-^") [Var 1,Var 2]]),Branch (Pattern ("Nat","Pos") [6]) (Case Rigid (Var 4) [Branch (Pattern ("Nat","Neg") [7]) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","O") [Var 6]],Comb FuncCall ("Nat","mod2") [Var 1]]),Branch (Pattern ("Nat","Pos") [8]) (Case Rigid (Comb FuncCall ("Nat","quotRemNat") [Comb FuncCall ("Nat","quotRemNat.shift.104") [Var 1,Var 8],Var 2]) [Branch (Pattern ("Prelude","(,)") [9,10]) (Case Rigid (Var 9) [Branch (Pattern ("Nat","Neg") [11]) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","O") [Var 6]],Var 10]),Branch (Pattern ("Nat","Pos") [12]) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","+^") [Comb ConsCall ("Nat","O") [Var 6],Var 12]],Var 10])])])])])])]),Branch (Pattern ("Prelude","False") []) (Comb FuncCall ("Prelude","failed") [])])])])),Func ("Nat","quotRemNat.shift.104") 2 Private (FuncType (TCons ("Nat","Nat") []) (FuncType (TCons ("Nat","Nat") []) (TCons ("Nat","Nat") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","IHi") []) (Comb FuncCall ("Prelude","error") [Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc '.'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ':'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'H'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Nat","O") [3]) (Comb ConsCall ("Nat","O") [Var 2]),Branch (Pattern ("Nat","I") [4]) (Comb ConsCall ("Nat","I") [Var 2])])),Func ("Nat","lteqInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#/=#Prelude.Eq#Prelude.Ordering") [],Comb FuncCall ("Nat","cmpInteger") [Var 1,Var 2]],Comb ConsCall ("Prelude","GT") []])),Func ("Nat","cmpInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","EQ") []),Branch (Pattern ("Nat","Pos") [3]) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Nat","Neg") [4]) (Comb ConsCall ("Prelude","GT") [])]),Branch (Pattern ("Nat","Pos") [5]) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","GT") []),Branch (Pattern ("Nat","Pos") [6]) (Comb FuncCall ("Nat","cmpNat") [Var 5,Var 6]),Branch (Pattern ("Nat","Neg") [7]) (Comb ConsCall ("Prelude","GT") [])]),Branch (Pattern ("Nat","Neg") [8]) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Nat","Pos") [9]) (Comb ConsCall ("Prelude","LT") []),Branch (Pattern ("Nat","Neg") [10]) (Comb FuncCall ("Nat","cmpNat") [Var 10,Var 8])])])),Func ("Nat","neg") 1 Public (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","Pos") [2]) (Comb ConsCall ("Nat","Neg") [Var 2]),Branch (Pattern ("Nat","Neg") [3]) (Comb ConsCall ("Nat","Pos") [Var 3])])),Func ("Nat","inc") 1 Public (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","IHi") []]),Branch (Pattern ("Nat","Pos") [2]) (Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","succ") [Var 2]]),Branch (Pattern ("Nat","Neg") [3]) (Case Flex (Var 3) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","O") [4]) (Comb ConsCall ("Nat","Neg") [Comb FuncCall ("Nat","pred") [Comb ConsCall ("Nat","O") [Var 4]]]),Branch (Pattern ("Nat","I") [5]) (Comb ConsCall ("Nat","Neg") [Comb ConsCall ("Nat","O") [Var 5]])])])),Func ("Nat","dec") 1 Public (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Neg") [Comb ConsCall ("Nat","IHi") []]),Branch (Pattern ("Nat","Pos") [2]) (Case Flex (Var 2) [Branch (Pattern ("Nat","IHi") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","O") [3]) (Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","pred") [Comb ConsCall ("Nat","O") [Var 3]]]),Branch (Pattern ("Nat","I") [4]) (Comb ConsCall ("Nat","Pos") [Comb ConsCall ("Nat","O") [Var 4]])]),Branch (Pattern ("Nat","Neg") [5]) (Comb ConsCall ("Nat","Neg") [Comb FuncCall ("Nat","succ") [Var 5]])])),Func ("Nat","+#") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Var 2),Branch (Pattern ("Nat","Pos") [3]) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Var 1),Branch (Pattern ("Nat","Pos") [4]) (Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","+^") [Var 3,Var 4]]),Branch (Pattern ("Nat","Neg") [5]) (Comb FuncCall ("Nat","-^") [Var 3,Var 5])]),Branch (Pattern ("Nat","Neg") [6]) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Var 1),Branch (Pattern ("Nat","Pos") [7]) (Comb FuncCall ("Nat","-^") [Var 7,Var 6]),Branch (Pattern ("Nat","Neg") [8]) (Comb ConsCall ("Nat","Neg") [Comb FuncCall ("Nat","+^") [Var 6,Var 8]])])])),Func ("Nat","-#") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Var 1),Branch (Pattern ("Nat","Pos") [3]) (Comb FuncCall ("Nat","+#") [Var 1,Comb ConsCall ("Nat","Neg") [Var 3]]),Branch (Pattern ("Nat","Neg") [4]) (Comb FuncCall ("Nat","+#") [Var 1,Comb ConsCall ("Nat","Pos") [Var 4]])])),Func ("Nat","*#") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","Pos") [3]) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","Pos") [4]) (Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","*^") [Var 3,Var 4]]),Branch (Pattern ("Nat","Neg") [5]) (Comb ConsCall ("Nat","Neg") [Comb FuncCall ("Nat","*^") [Var 3,Var 5]])]),Branch (Pattern ("Nat","Neg") [6]) (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Nat","Zero") []),Branch (Pattern ("Nat","Pos") [7]) (Comb ConsCall ("Nat","Neg") [Comb FuncCall ("Nat","*^") [Var 6,Var 7]]),Branch (Pattern ("Nat","Neg") [8]) (Comb ConsCall ("Nat","Pos") [Comb FuncCall ("Nat","*^") [Var 6,Var 8]])])])),Func ("Nat","quotRemInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Nat","Pos") [3]) (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Zero") [],Comb ConsCall ("Nat","Zero") []]),Branch (Pattern ("Nat","Pos") [4]) (Comb FuncCall ("Nat","quotRemNat") [Var 4,Var 3]),Branch (Pattern ("Nat","Neg") [5]) (Let [(6,Comb FuncCall ("Nat","quotRemNat") [Var 5,Var 3]),(7,Comb FuncCall ("Nat","quotRemInteger._#selFP2#d") [Var 6]),(8,Comb FuncCall ("Nat","quotRemInteger._#selFP3#m") [Var 6])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Nat","neg") [Var 7],Comb FuncCall ("Nat","neg") [Var 8]]))]),Branch (Pattern ("Nat","Neg") [9]) (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Zero") [],Comb ConsCall ("Nat","Zero") []]),Branch (Pattern ("Nat","Pos") [10]) (Let [(11,Comb FuncCall ("Nat","quotRemNat") [Var 10,Var 9]),(12,Comb FuncCall ("Nat","quotRemInteger._#selFP5#d") [Var 11]),(13,Comb FuncCall ("Nat","quotRemInteger._#selFP6#m") [Var 11])] (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Nat","neg") [Var 12],Var 13])),Branch (Pattern ("Nat","Neg") [14]) (Let [(15,Comb FuncCall ("Nat","quotRemNat") [Var 14,Var 9]),(16,Comb FuncCall ("Nat","quotRemInteger._#selFP8#d") [Var 15]),(17,Comb FuncCall ("Nat","quotRemInteger._#selFP9#m") [Var 15])] (Comb ConsCall ("Prelude","(,)") [Var 16,Comb FuncCall ("Nat","neg") [Var 17]]))])])),Func ("Nat","quotRemInteger._#selFP2#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Nat","quotRemInteger._#selFP3#m") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Nat","quotRemInteger._#selFP5#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Nat","quotRemInteger._#selFP6#m") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Nat","quotRemInteger._#selFP8#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Nat","quotRemInteger._#selFP9#m") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Nat","divModInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Nat","Zero") []) (Comb FuncCall ("Prelude","failed") []),Branch (Pattern ("Nat","Pos") [3]) (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Zero") [],Comb ConsCall ("Nat","Zero") []]),Branch (Pattern ("Nat","Pos") [4]) (Comb FuncCall ("Nat","quotRemNat") [Var 4,Var 3]),Branch (Pattern ("Nat","Neg") [5]) (Let [(6,Comb FuncCall ("Nat","quotRemNat") [Var 5,Var 3]),(7,Comb FuncCall ("Nat","divModInteger._#selFP11#d") [Var 6]),(8,Comb FuncCall ("Nat","divModInteger._#selFP12#m") [Var 6]),(9,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Nat","neg") [Comb FuncCall ("Nat","inc") [Var 7]],Comb FuncCall ("Nat","-#") [Comb ConsCall ("Nat","Pos") [Var 3],Var 8]])] (Case Rigid (Var 8) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Nat","neg") [Var 7],Var 8]),Branch (Pattern ("Nat","Neg") [10]) (Var 9),Branch (Pattern ("Nat","Pos") [11]) (Var 9)]))]),Branch (Pattern ("Nat","Neg") [12]) (Case Flex (Var 1) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Nat","Zero") [],Comb ConsCall ("Nat","Zero") []]),Branch (Pattern ("Nat","Pos") [13]) (Let [(14,Comb FuncCall ("Nat","quotRemNat") [Var 13,Var 12]),(15,Comb FuncCall ("Nat","divModInteger._#selFP14#d") [Var 14]),(16,Comb FuncCall ("Nat","divModInteger._#selFP15#m") [Var 14]),(17,Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Nat","neg") [Comb FuncCall ("Nat","inc") [Var 15]],Comb FuncCall ("Nat","-#") [Var 16,Comb ConsCall ("Nat","Pos") [Var 12]]])] (Case Rigid (Var 16) [Branch (Pattern ("Nat","Zero") []) (Comb ConsCall ("Prelude","(,)") [Comb FuncCall ("Nat","neg") [Var 15],Var 16]),Branch (Pattern ("Nat","Neg") [18]) (Var 17),Branch (Pattern ("Nat","Pos") [19]) (Var 17)])),Branch (Pattern ("Nat","Neg") [20]) (Let [(21,Comb FuncCall ("Nat","quotRemNat") [Var 20,Var 12]),(22,Comb FuncCall ("Nat","divModInteger._#selFP17#d") [Var 21]),(23,Comb FuncCall ("Nat","divModInteger._#selFP18#m") [Var 21])] (Comb ConsCall ("Prelude","(,)") [Var 22,Comb FuncCall ("Nat","neg") [Var 23]]))])])),Func ("Nat","divModInteger._#selFP11#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Nat","divModInteger._#selFP12#m") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Nat","divModInteger._#selFP14#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Nat","divModInteger._#selFP15#m") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Nat","divModInteger._#selFP17#d") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 2)])),Func ("Nat","divModInteger._#selFP18#m") 1 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Nat","BinInt") [],TCons ("Nat","BinInt") []]) (TCons ("Nat","BinInt") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Prelude","(,)") [2,3]) (Var 3)])),Func ("Nat","divInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Comb FuncCall ("Prelude","fst") [Comb FuncCall ("Nat","divModInteger") [Var 1,Var 2]])),Func ("Nat","modInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Nat","divModInteger") [Var 1,Var 2]])),Func ("Nat","quotInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Comb FuncCall ("Prelude","fst") [Comb FuncCall ("Nat","quotRemInteger") [Var 1,Var 2]])),Func ("Nat","remInteger") 2 Public (FuncType (TCons ("Nat","BinInt") []) (FuncType (TCons ("Nat","BinInt") []) (TCons ("Nat","BinInt") []))) (Rule [1,2] (Comb FuncCall ("Prelude","snd") [Comb FuncCall ("Nat","quotRemInteger") [Var 1,Var 2]]))] []