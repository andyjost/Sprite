from cStringIO import StringIO
from curry import importer
from .. import config
from .. import utility
from .utility import handle_program_errors
import argparse
import os
import pydoc
import sys

__doc__ = '''\
Execute the toolchain to compile Curry code.

This program uses timestamps and prerequisites to lazily update targets.  Each
positional argument can be a Curry module name or Curry source file.  Modules
are located by searching the CURRYPATH environment variable.

Two target formats are supported.  Curry-formatted ICurry (extension:
.icy) is generated with the -i,--icy option.  These files can be read
into Curry programs using the standard module ICurry.Files.readICurry.

JSON-formatted ICurry (extension: .json) is generated with the -j,--json
option.  This format is more suitable when a Curry interpreter is not
available.  Sprite only reads the JSON format.  Note that an ICY file is the
prerequisite of JSON, meaning that --json also implies --icy.

Following the conventions of other Curry systems, output files are by default
written to <dir>/.curry/{intermediate_subdir}, where <dir> is the directory
containing the source code.  For example, a curry file /path/to/A.curry gives
rise to /path/to/.curry/{intermediate_subdir}/A.icy and
/path/to/.curry/{intermediate_subdir}/A.json.  The -o,--output option can be
used to specify the output file.

The -c,--compact option causes JSON output to be compacted by removing
insignificant whitespace.  Compacted JSON is less human-readable but smaller.

The -t,--tidy option removes any ICY files generated in the process of
creating JSON files.  It will not remove up-to-date ICY files that were
present before running this program.

The -z,--zip option causes JSON output to be compressed, in which case a .z
extension is appended to the JSON file.  JSON that is both compacted and zipped
is often smaller than JSON that is only zipped.

Environment Variables:
----------------------

    CURRYPATH
        a colon-separated list of paths to search for Curry modules.

    SPRITE_LOG_LEVEL
        adjusts logging output.  Values are CRITICAL, ERROR,
        WARNING (default), INFO, and DEBUG.

Examples:
---------

The following converts A.curry to the ICurry file A.icy.  Module A is found by
searching CURRYPATH.  The output is placed at
<dir>/.curry/{intermediate_subdir}/A.icy, where <dir> is the directory
containing A.curry.

    % curry-make --icurry A.curry

The following creates a compacted, zipped JSON file:

    % curry-make --json -czt /path/to/A.curry

The output is written to /path/to/.curry/{intermediate_subdir}/A.json.z.  The
intermediate file /path/to/.curry/{intermediate_subdir}/A.icy will be removed
unless it was up-to-date prior to the command running.

'''.format(intermediate_subdir=config.intermediate_subdir())

def main(progname, argv):
  '''
  Main function for sprite-make.
  '''
  parser = argparse.ArgumentParser(
      prog=progname
    , description='Make ICurry files.'
    )
  # E.g., sprite-make --icurry Prelude --json Nat
  parser.add_argument('-c', '--compact', action='store_true', help='compact JSON output')
  parser.add_argument('-M', '--man'    , action='store_true', help='show detailed usage')
  parser.add_argument('-i', '--icy'    , action='store_true', help='make ICY files')
  parser.add_argument('-j', '--json'   , action='store_true', help='make JSON files')
  parser.add_argument('-k', '--keep-going', action='store_true', help='keep working after an error')
  parser.add_argument('-o', '--output' , action='store', type=str, help='specify the output file')
  parser.add_argument('-q', '--quiet'  , action='store_true', help='work quietly')
  parser.add_argument('-S', '--subdir' , action='store_true'
    , help='print the subdirectory to which output files are written then exit')
  parser.add_argument('-t', '--tidy'   , action='store_true'
    , help='remove intermediate files generated by this program')
  parser.add_argument('-z', '--zip'    , action='store_true'
    , help='zip JSON output with zlib (adds .z extension)')
  parser.add_argument('names', nargs='*', help='Curry modules or source files to process')
  args = parser.parse_args(argv)

  if args.man:
    mantext = StringIO()
    parser.print_usage(file=mantext)
    mantext.write('\n')
    mantext.write(__doc__)
    pydoc.getpager()(mantext.getvalue())
    return
  else:
    del args.man

  if args.subdir:
    sys.stdout.write(os.path.join('.curry', config.intermediate_subdir()))
    return
  else:
    del args.subdir

  if len(args.names) > 1 and args.output:
    sys.stderr.write(progname + ': -o,--output cannot be used with multiple input files.\n')
    sys.exit(1)
  if not args.icy and not args.json:
    sys.stderr.write(progname + ': one of -i,--icy or -j,--json must be supplied.\n')
    sys.exit(1)
  if args.json:
    args.icy = True
  kwds = dict(args._get_kwargs())
  error_handler = handle_program_errors(
      progname
    , exit_status=None if args.keep_going else 1
    )
  for name in args.names:
    kwds['is_sourcefile'] = name.endswith('.curry')
    with error_handler:
      importer.findOrBuildICurry(name, config.currypath(), **kwds)
  if error_handler.nerrors:
    sys.exit(1)


main('sprite-make', sys.argv[1:])
