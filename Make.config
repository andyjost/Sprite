# The configurable portion of the build scripts.  Update global paths, flags,
# versions, etc. here.

# Make variables that may be useful to set on the command line:
#
#     COMPILER     The C++ compiler; either GCC or CLANG.  (default: GCC)
#     DEBUG        Whether to build debug flavor; unset or 1. (default: unset)
#     DEBUG_LLVM   Whether to use a debug LLVM; unset or 1. (default: unset)
#     PREFIX       The installation root directory. (default: <work-tree-root>/install)
#     OBJECT_ROOT  The directory under which to place build outputs.
#                  (default: <work-tree-root>/object-root)
#     NVALIDATE    Indicates not to validate variables; unset or 1. (default: unset)

# Tools
# =====
ifndef COMPILER
  COMPILER := GCC
endif

ifeq ($(COMPILER),GCC)
  CC := /usr/bin/gcc
  CXX := /usr/bin/g++
else ifeq ($(COMPILER),CLANG)
  CC := /usr/bin/clang
  CXX := /usr/bin/clang++
else
  $(error COMPILER must be set to GCC or CLANG, not $(COMPILER))
endif

# Download the Memory Pool System (MPS) from www.ravenbrook.com/project/mps.
MPS_HOME := /usr/local/src/mps


# Compiler flags
# ==============
CFLAGS     += -Wall -DBOOST_NO_AUTO_PTR
ifeq ($(DEBUG),1)
  CFLAGS   += -O0 -ggdb
else
  CFLAGS   += -O2
endif
CXXFLAGS += $(CFLAGS) -std=c++17 -Wno-register
ARFLAGS  += -U


# LLVM
# ====
ifeq ($(DEBUG_LLVM),1)
  LLVM_INCLUDE_PATH   := /opt/llvm-5.0-g/include
  LLVM_C_INCLUDE_PATH := /opt/llvm-5.0-g/include
  LLVM_LIBRARY_PATH   := /opt/llvm-5.0-g/lib
else
  LLVM_INCLUDE_PATH   := /usr/include/llvm-5.0
  LLVM_C_INCLUDE_PATH := /usr/include/llvm-c-5.0
  LLVM_LIBRARY_PATH   := /usr/lib/llvm-5.0/lib
endif

# Strings are appended to this variable to form tool names, e.g.,
# $(LLVM)-config for llvm-config.
LLVM := /usr/bin/llvm


# Python
# ======
# The Python package will be installed under $(PREFIX)/lib/$(PYTHON_VERSION).
PYTHON_VERSION := python2.7

# The top directory of the Python installation to build against.  It should
# have bin, include, and lib subdirectories, and libpython2.7.so should be
# found directly under lib (not under a subdirectory named for the
# target-triple, for example).  If you are pointing to your own build of
# Python, then the directory structure ought to match what Sprite expects.  If
# you want to use the Python installed on your system, then you may need to
# create a directory structure with links to Python and its libraries (e.g.,
# ./3rdparty/python/{bin,include,lib}) and point to that.  An alternative is to
# uncomment some of the variables below and set them directly.  If in doubt,
# use targets such as "make print-PYTHON_LIBRARY_PATH" to print values and
# debug.
PYTHON_HOME := /opt/python2.7

# The name of the Python package to create.  This package contains the Curry
# system implemented by Sprite, and is imported to Python by the statement
# "import $(PYTHON_PACKAGE_NAME)".
#PYTHON_PACKAGE_NAME := curry

# The include directory for Python files.
#PYTHON_INCLUDE_PATH := $(PYTHON_HOME)/include/$(PYTHON_VERSION)

# The Python executable Sprite will use.
#PYTHON_EXECUTABLE := $(PYTHON_HOME)/bin/python

# The Python executable to use for measuring line coverage.  Optional.  Used in
# the "tests" directory only when measuring line coverage.
#PYTHON_COVERAGE_EXECUTABLE := $(PYTHON_HOME)/bin/coverage

# The name of the Python library to use when linking.  This is passed via the
# -l option to a compiler, so the actual name of the library file is
# lib$(PYTHON_LIBRARY).so.
#PYTHON_LIBRARY := $(PYTHON_VERSION)

# The directory containing the Python library.  The following file must exist:
#     $(PYTHON_LIBRARY_PATH)/lib$(PYTHON_LIBRARY).so
#PYTHON_LIBRARY_PATH := $(PYTHON_HOME)/lib/$(MULTIARCH)  ## If it exists...
#PYTHON_LIBRARY_PATH := $(PYTHON_HOME)/lib               ## otherwise.


# Boost
# =====
# The location of Boost.  Use version 1.66 or newer and make sure Boost.Python is
# built.
BOOST_HOME := /opt/boost_1_74_0

# The location of Boost header files.  An extra subdirectory, "boost," is added
# when looking up these headers, so the following file, e.g., should exist:
#     $(BOOST_INCLUDE_PATH)/boost/version.hpp.
#BOOST_INCLUDE_PATH := $(BOOST_HOME)/include

# The location of Boost libraries.  Boost.Python is needed.
#BOOST_LIBRARY_PATH := $(BOOST_HOME)/lib/$(MULTIARCH)    ## If it exists...
#BOOST_LIBRARY_PATH := $(BOOST_HOME)/lib                 ## otherwise.

# The name of the Boost.Python shared object.
#BOOST_PYTHON_LIBRARY := boost_python27                  ## If it exists...
#BOOST_PYTHON_LIBRARY := boost_python                    ## otherwise.


# CMC
# ===
# The location of the Curry Meta-Compiler.  This may be cloned from
# https://projects.cecs.pdx.edu/git/antoy-cmc.
CMC_HOME := /opt/antoy-cmc

# The location of the curry2json executable.
#CURRY2JSON := $(CMC_HOME)/translator/bin/curry2json

