#!/bin/bash

BASEDIR=$(dirname $(dirname $(readlink -f $0)))
# echo $BASEDIR

QUIET=''
if [ "$1" == "-q" ]
then
    QUIET='-q'
    shift
fi

if [ "$*" = "" ]
then
    echo `basename $0`: no input file. 1>&2
    exit 1
fi

FILE=$(dirname $1)/$(basename $1 ".curry")
if [ ! -f $FILE.curry ]
then
    echo `basename $0`: \"$FILE.curry\" not found. 1>&2
    exit 1
fi

# ------------------------------------------------------------------
# create ICurry

#xa parsecurry --flat $QUIET $FILE
#xa if [ $? -ne 0 ]
#xa then
#xa     echo `basename $0`: error parsing \"$FILE.curry\". 1>&2
#xa     exit 1
#xa fi

# Next path is required to compile Examples/RegExp.curry
# CURRYPATH=$(dirname $1):$BASEDIR/icurry:$BASEDIR/json
# Next path is required to compile the Prelude
CURRYPATH=$CURRYPATH:$PAKCSHOME/lib:$PAKCSHOME/lib/meta:$BASEDIR/icurry:$BASEDIR/json
export CURRYPATH

TARGET=$(dirname $1)/.curry/$(basename $1 ".curry")

# echo TARGET $TARGET

if [ -f $TARGET.icur -a $TARGET.icur -nt $FILE.curry ]
then
    [ -n "$QUIET" ] || echo \"read\" up to date
else
    rm -f $FILE.icur 
    command="pakcs $QUIET :set args $FILE :load $BASEDIR/icurry/Main.curry :eval Main.main :quit"
    if [ -n "$QUIET" ]
    then
        $command > /dev/null
    else
        echo CURRYPATH $CURRYPATH
        echo Running $command
        $command
    fi

    if [ -f $FILE.icur ]
    then
        mv -f $FILE.icur $TARGET.icur
        mv -f $FILE.read $TARGET.read
    else
        echo `basename $0`: failed to create \"$FILE.read\". 1>&2
        exit 1
    fi
    # cat $TARGET.read
fi

# ------------------------------------------------------------------
# generate json from icur

if [ -f $TARGET.json -a $TARGET.json -nt $TARGET.icur ]
then
    if [ -z "$QUIET" ]
    then
        echo \"json\" up to date
    fi
else
    rm -f $FILE.json
    command="pakcs $QUIET :set args $TARGET :load $BASEDIR/json/Main.curry :eval Main.main :quit"
    if [ -n "$QUIET" ]
    then
        $command > /dev/null
    else
        echo CURRYPATH $CURRYPATH
        echo Running $command
        $command
    fi
    
    if [ -f $TARGET.json ]
    then
        if [ -z "$QUIET" ]
        then
            echo \"$FILE.json\" created
        fi
        cat $TARGET.json
    fi
fi

